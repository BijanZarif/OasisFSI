// This code conforms with the UFC specification version 2016.1.0
// and was automatically generated by FFC version 2016.1.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              4
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False

#include "ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0: public ufc::finite_element
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', triangle, 1)";
}

ufc::shape ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::space_dimension() const
{
    return 3;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::value_size() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::degree() const
{
    return 1;
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::family() const
{
    return "Lagrange";
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1: public ufc::finite_element
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::shape ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::space_dimension() const
{
    return 6;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::value_size() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::degree() const
{
    return 1;
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::family() const
{
    return "Lagrange";
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[0];
    dof_coordinates[7] = coordinate_dofs[1];
    dof_coordinates[8] = coordinate_dofs[2];
    dof_coordinates[9] = coordinate_dofs[3];
    dof_coordinates[10] = coordinate_dofs[4];
    dof_coordinates[11] = coordinate_dofs[5];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2: public ufc::finite_element
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', triangle, 2)";
}

ufc::shape ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::space_dimension() const
{
    return 6;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::value_size() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::degree() const
{
    return 2;
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::family() const
{
    return "Lagrange";
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3: public ufc::finite_element
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
}

ufc::shape ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::space_dimension() const
{
    return 12;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::value_rank() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::value_size() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::degree() const
{
    return 2;
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::family() const
{
    return "Lagrange";
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[19] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[20] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[21] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[22] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[23] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_2();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4: public ufc::finite_element
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::signature() const
{
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
}

ufc::shape ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::space_dimension() const
{
    return 27;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::value_rank() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::value_size() const
{
    return 5;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::reference_value_size() const
{
    return 5;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::degree() const
{
    return 2;
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::family() const
{
    return "Mixed";
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 27; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 27; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[20];
    for (unsigned int r = 0; r < 20; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 27; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 16:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 17:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 18:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 19:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 20:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 21:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 22:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 23:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 24:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 25:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 26:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[17] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[18] = vals[3];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[19] = vals[3];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[3];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[3];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[22] = vals[3];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[23] = vals[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[24] = vals[4];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[25] = vals[4];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[26] = vals[4];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[18];
    vertex_values[8] = dof_values[19];
    vertex_values[13] = dof_values[20];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[24];
    vertex_values[9] = dof_values[25];
    vertex_values[14] = dof_values[26];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[19] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[20] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[21] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[22] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[23] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[31] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[32] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[33] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[34] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[35] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[36] = coordinate_dofs[0];
    dof_coordinates[37] = coordinate_dofs[1];
    dof_coordinates[38] = coordinate_dofs[2];
    dof_coordinates[39] = coordinate_dofs[3];
    dof_coordinates[40] = coordinate_dofs[4];
    dof_coordinates[41] = coordinate_dofs[5];
    dof_coordinates[42] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[43] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[44] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[45] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[46] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[47] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[48] = coordinate_dofs[0];
    dof_coordinates[49] = coordinate_dofs[1];
    dof_coordinates[50] = coordinate_dofs[2];
    dof_coordinates[51] = coordinate_dofs[3];
    dof_coordinates[52] = coordinate_dofs[4];
    dof_coordinates[53] = coordinate_dofs[5];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_3();
        break;
      }
    case 2:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5: public ufc::finite_element
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::signature() const
{
    return "FiniteElement('Real', triangle, 0)";
}

ufc::shape ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::space_dimension() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::value_rank() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::value_size() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::degree() const
{
    return 0;
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::family() const
{
    return "Real";
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
}

double ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0: public ufc::dofmap
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::num_element_dofs() const
{
    return 3;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::num_facet_dofs() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1: public ufc::dofmap
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::num_element_dofs() const
{
    return 6;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::num_facet_dofs() const
{
    return 4;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2: public ufc::dofmap
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + num_global_entities[1];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::num_element_dofs() const
{
    return 6;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::num_facet_dofs() const
{
    return 3;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3: public ufc::dofmap
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0] + 2*num_global_entities[1];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::num_element_dofs() const
{
    return 12;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::num_facet_dofs() const
{
    return 6;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_2();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4: public ufc::dofmap
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::signature() const
{
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 5*num_global_entities[0] + 4*num_global_entities[1];
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::num_element_dofs() const
{
    return 27;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::num_facet_dofs() const
{
    return 14;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + entity_indices[1][0];
    dofs[16] = offset + entity_indices[1][1];
    dofs[17] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[18] = offset + entity_indices[0][0];
    dofs[19] = offset + entity_indices[0][1];
    dofs[20] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[21] = offset + entity_indices[1][0];
    dofs[22] = offset + entity_indices[1][1];
    dofs[23] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[24] = offset + entity_indices[0][0];
    dofs[25] = offset + entity_indices[0][1];
    dofs[26] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 25;
      dofs[13] = 26;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
      dofs[8] = 16;
      dofs[9] = 18;
      dofs[10] = 20;
      dofs[11] = 22;
      dofs[12] = 24;
      dofs[13] = 26;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
      dofs[8] = 17;
      dofs[9] = 18;
      dofs[10] = 19;
      dofs[11] = 23;
      dofs[12] = 24;
      dofs[13] = 25;
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
        dofs[3] = 18;
        dofs[4] = 24;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
        dofs[3] = 19;
        dofs[4] = 25;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
        dofs[3] = 20;
        dofs[4] = 26;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
        dofs[2] = 15;
        dofs[3] = 21;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
        dofs[2] = 16;
        dofs[3] = 22;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
        dofs[2] = 17;
        dofs[3] = 23;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_3();
        break;
      }
    case 2:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5: public ufc::dofmap
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::signature() const
{
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::num_element_dofs() const
{
    return 1;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::num_facet_dofs() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 0;
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

void ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5::create() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
}


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_1: public ufc::cell_integral
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_1() : ufc::cell_integral()
  {
    
  }

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_1() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({false, false, false, false, false, false, false, false, false});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    24
    // Number of operations (multiply-add pairs) for tensor contraction: 226
    // Total number of operations (multiply-add pairs):                  253
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*K[0]*K[0]*(1.0);
    const double G0_0_1 = det*K[0]*K[2]*(1.0);
    const double G0_1_0 = det*K[2]*K[0]*(1.0);
    const double G0_1_1 = det*K[2]*K[2]*(1.0);
    const double G1_0_0 = det*K[0]*K[0]*(1.0);
    const double G1_0_1 = det*K[0]*K[2]*(1.0);
    const double G1_1_0 = det*K[2]*K[0]*(1.0);
    const double G1_1_1 = det*K[2]*K[2]*(1.0);
    const double G2_0_0 = det*K[1]*K[1]*(1.0);
    const double G2_0_1 = det*K[1]*K[3]*(1.0);
    const double G2_1_0 = det*K[3]*K[1]*(1.0);
    const double G2_1_1 = det*K[3]*K[3]*(1.0);
    const double G3_0_0 = det*K[1]*K[1]*(1.0);
    const double G3_0_1 = det*K[1]*K[3]*(1.0);
    const double G3_1_0 = det*K[3]*K[1]*(1.0);
    const double G3_1_1 = det*K[3]*K[3]*(1.0);
    
    // Compute element tensor
    A[0] = 0.5*G0_0_0 + 0.500000000000001*G0_0_1 + 0.500000000000001*G0_1_0 + 0.500000000000002*G0_1_1 + 0.5*G2_0_0 + 0.500000000000001*G2_0_1 + 0.500000000000001*G2_1_0 + 0.500000000000002*G2_1_1;
    A[1] = 0.166666666666668*G0_0_0 + 0.166666666666667*G0_1_0 + 0.166666666666668*G2_0_0 + 0.166666666666667*G2_1_0;
    A[2] = 0.166666666666667*G0_0_1 + 0.166666666666666*G0_1_1 + 0.166666666666667*G2_0_1 + 0.166666666666666*G2_1_1;
    A[3] = 0.0;
    A[4] = -0.666666666666669*G0_0_1 - 0.666666666666668*G0_1_1 - 0.666666666666669*G2_0_1 - 0.666666666666668*G2_1_1;
    A[5] = -0.666666666666669*G0_0_0 - 0.666666666666668*G0_1_0 - 0.666666666666669*G2_0_0 - 0.666666666666668*G2_1_0;
    A[6] = 0.0;
    A[7] = 0.0;
    A[8] = 0.0;
    A[9] = 0.0;
    A[10] = 0.0;
    A[11] = 0.0;
    A[12] = 0.0;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = 0.0;
    A[16] = 0.0;
    A[17] = 0.0;
    A[18] = 0.0;
    A[19] = 0.0;
    A[20] = 0.0;
    A[21] = 0.0;
    A[22] = 0.0;
    A[23] = 0.0;
    A[24] = 0.0;
    A[25] = 0.0;
    A[26] = 0.0;
    A[27] = 0.166666666666668*G0_0_0 + 0.166666666666667*G0_0_1 + 0.166666666666668*G2_0_0 + 0.166666666666667*G2_0_1;
    A[28] = 0.5*G0_0_0 + 0.5*G2_0_0;
    A[29] = -0.166666666666667*G0_0_1 - 0.166666666666667*G2_0_1;
    A[30] = 0.666666666666665*G0_0_1 + 0.666666666666665*G2_0_1;
    A[31] = 0.0;
    A[32] = -0.666666666666669*G0_0_0 - 0.666666666666668*G0_0_1 - 0.666666666666669*G2_0_0 - 0.666666666666668*G2_0_1;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.0;
    A[37] = 0.0;
    A[38] = 0.0;
    A[39] = 0.0;
    A[40] = 0.0;
    A[41] = 0.0;
    A[42] = 0.0;
    A[43] = 0.0;
    A[44] = 0.0;
    A[45] = 0.0;
    A[46] = 0.0;
    A[47] = 0.0;
    A[48] = 0.0;
    A[49] = 0.0;
    A[50] = 0.0;
    A[51] = 0.0;
    A[52] = 0.0;
    A[53] = 0.0;
    A[54] = 0.166666666666667*G0_1_0 + 0.166666666666666*G0_1_1 + 0.166666666666667*G2_1_0 + 0.166666666666666*G2_1_1;
    A[55] = -0.166666666666667*G0_1_0 - 0.166666666666667*G2_1_0;
    A[56] = 0.500000000000002*G0_1_1 + 0.500000000000002*G2_1_1;
    A[57] = 0.666666666666668*G0_1_0 + 0.666666666666668*G2_1_0;
    A[58] = -0.666666666666668*G0_1_0 - 0.666666666666667*G0_1_1 - 0.666666666666668*G2_1_0 - 0.666666666666667*G2_1_1;
    A[59] = 0.0;
    A[60] = 0.0;
    A[61] = 0.0;
    A[62] = 0.0;
    A[63] = 0.0;
    A[64] = 0.0;
    A[65] = 0.0;
    A[66] = 0.0;
    A[67] = 0.0;
    A[68] = 0.0;
    A[69] = 0.0;
    A[70] = 0.0;
    A[71] = 0.0;
    A[72] = 0.0;
    A[73] = 0.0;
    A[74] = 0.0;
    A[75] = 0.0;
    A[76] = 0.0;
    A[77] = 0.0;
    A[78] = 0.0;
    A[79] = 0.0;
    A[80] = 0.0;
    A[81] = 0.0;
    A[82] = 0.666666666666665*G0_1_0 + 0.666666666666665*G2_1_0;
    A[83] = 0.666666666666668*G0_0_1 + 0.666666666666668*G2_0_1;
    A[84] = 1.33333333333333*G0_0_0 + 0.666666666666656*G0_0_1 + 0.666666666666656*G0_1_0 + 1.33333333333332*G0_1_1 + 1.33333333333333*G2_0_0 + 0.666666666666656*G2_0_1 + 0.666666666666656*G2_1_0 + 1.33333333333332*G2_1_1;
    A[85] = -1.33333333333333*G0_0_0 - 0.666666666666661*G0_0_1 - 0.666666666666656*G0_1_0 - 1.33333333333333*G2_0_0 - 0.666666666666661*G2_0_1 - 0.666666666666656*G2_1_0;
    A[86] = -0.666666666666665*G0_0_1 - 0.666666666666668*G0_1_0 - 1.33333333333333*G0_1_1 - 0.666666666666665*G2_0_1 - 0.666666666666668*G2_1_0 - 1.33333333333333*G2_1_1;
    A[87] = 0.0;
    A[88] = 0.0;
    A[89] = 0.0;
    A[90] = 0.0;
    A[91] = 0.0;
    A[92] = 0.0;
    A[93] = 0.0;
    A[94] = 0.0;
    A[95] = 0.0;
    A[96] = 0.0;
    A[97] = 0.0;
    A[98] = 0.0;
    A[99] = 0.0;
    A[100] = 0.0;
    A[101] = 0.0;
    A[102] = 0.0;
    A[103] = 0.0;
    A[104] = 0.0;
    A[105] = 0.0;
    A[106] = 0.0;
    A[107] = 0.0;
    A[108] = -0.666666666666669*G0_1_0 - 0.666666666666668*G0_1_1 - 0.666666666666669*G2_1_0 - 0.666666666666668*G2_1_1;
    A[109] = 0.0;
    A[110] = -0.666666666666668*G0_0_1 - 0.666666666666667*G0_1_1 - 0.666666666666668*G2_0_1 - 0.666666666666667*G2_1_1;
    A[111] = -1.33333333333333*G0_0_0 - 0.666666666666656*G0_0_1 - 0.666666666666661*G0_1_0 - 1.33333333333333*G2_0_0 - 0.666666666666656*G2_0_1 - 0.666666666666661*G2_1_0;
    A[112] = 1.33333333333333*G0_0_0 + 0.666666666666661*G0_0_1 + 0.666666666666661*G0_1_0 + 1.33333333333333*G0_1_1 + 1.33333333333333*G2_0_0 + 0.666666666666661*G2_0_1 + 0.666666666666661*G2_1_0 + 1.33333333333333*G2_1_1;
    A[113] = 0.666666666666665*G0_0_1 + 0.666666666666667*G0_1_0 + 0.666666666666665*G2_0_1 + 0.666666666666667*G2_1_0;
    A[114] = 0.0;
    A[115] = 0.0;
    A[116] = 0.0;
    A[117] = 0.0;
    A[118] = 0.0;
    A[119] = 0.0;
    A[120] = 0.0;
    A[121] = 0.0;
    A[122] = 0.0;
    A[123] = 0.0;
    A[124] = 0.0;
    A[125] = 0.0;
    A[126] = 0.0;
    A[127] = 0.0;
    A[128] = 0.0;
    A[129] = 0.0;
    A[130] = 0.0;
    A[131] = 0.0;
    A[132] = 0.0;
    A[133] = 0.0;
    A[134] = 0.0;
    A[135] = -0.666666666666669*G0_0_0 - 0.666666666666668*G0_0_1 - 0.666666666666669*G2_0_0 - 0.666666666666668*G2_0_1;
    A[136] = -0.666666666666669*G0_0_0 - 0.666666666666668*G0_1_0 - 0.666666666666669*G2_0_0 - 0.666666666666668*G2_1_0;
    A[137] = 0.0;
    A[138] = -0.666666666666668*G0_0_1 - 0.666666666666665*G0_1_0 - 1.33333333333333*G0_1_1 - 0.666666666666668*G2_0_1 - 0.666666666666665*G2_1_0 - 1.33333333333333*G2_1_1;
    A[139] = 0.666666666666667*G0_0_1 + 0.666666666666665*G0_1_0 + 0.666666666666667*G2_0_1 + 0.666666666666665*G2_1_0;
    A[140] = 1.33333333333334*G0_0_0 + 0.666666666666669*G0_0_1 + 0.666666666666669*G0_1_0 + 1.33333333333333*G0_1_1 + 1.33333333333334*G2_0_0 + 0.666666666666669*G2_0_1 + 0.666666666666669*G2_1_0 + 1.33333333333333*G2_1_1;
    A[141] = 0.0;
    A[142] = 0.0;
    A[143] = 0.0;
    A[144] = 0.0;
    A[145] = 0.0;
    A[146] = 0.0;
    A[147] = 0.0;
    A[148] = 0.0;
    A[149] = 0.0;
    A[150] = 0.0;
    A[151] = 0.0;
    A[152] = 0.0;
    A[153] = 0.0;
    A[154] = 0.0;
    A[155] = 0.0;
    A[156] = 0.0;
    A[157] = 0.0;
    A[158] = 0.0;
    A[159] = 0.0;
    A[160] = 0.0;
    A[161] = 0.0;
    A[162] = 0.0;
    A[163] = 0.0;
    A[164] = 0.0;
    A[165] = 0.0;
    A[166] = 0.0;
    A[167] = 0.0;
    A[168] = 0.5*G1_0_0 + 0.500000000000001*G1_0_1 + 0.500000000000001*G1_1_0 + 0.500000000000002*G1_1_1 + 0.5*G3_0_0 + 0.500000000000001*G3_0_1 + 0.500000000000001*G3_1_0 + 0.500000000000002*G3_1_1;
    A[169] = 0.166666666666668*G1_0_0 + 0.166666666666667*G1_1_0 + 0.166666666666668*G3_0_0 + 0.166666666666667*G3_1_0;
    A[170] = 0.166666666666667*G1_0_1 + 0.166666666666666*G1_1_1 + 0.166666666666667*G3_0_1 + 0.166666666666666*G3_1_1;
    A[171] = 0.0;
    A[172] = -0.666666666666669*G1_0_1 - 0.666666666666668*G1_1_1 - 0.666666666666669*G3_0_1 - 0.666666666666668*G3_1_1;
    A[173] = -0.666666666666669*G1_0_0 - 0.666666666666668*G1_1_0 - 0.666666666666669*G3_0_0 - 0.666666666666668*G3_1_0;
    A[174] = 0.0;
    A[175] = 0.0;
    A[176] = 0.0;
    A[177] = 0.0;
    A[178] = 0.0;
    A[179] = 0.0;
    A[180] = 0.0;
    A[181] = 0.0;
    A[182] = 0.0;
    A[183] = 0.0;
    A[184] = 0.0;
    A[185] = 0.0;
    A[186] = 0.0;
    A[187] = 0.0;
    A[188] = 0.0;
    A[189] = 0.0;
    A[190] = 0.0;
    A[191] = 0.0;
    A[192] = 0.0;
    A[193] = 0.0;
    A[194] = 0.0;
    A[195] = 0.166666666666668*G1_0_0 + 0.166666666666667*G1_0_1 + 0.166666666666668*G3_0_0 + 0.166666666666667*G3_0_1;
    A[196] = 0.5*G1_0_0 + 0.5*G3_0_0;
    A[197] = -0.166666666666667*G1_0_1 - 0.166666666666667*G3_0_1;
    A[198] = 0.666666666666665*G1_0_1 + 0.666666666666665*G3_0_1;
    A[199] = 0.0;
    A[200] = -0.666666666666669*G1_0_0 - 0.666666666666668*G1_0_1 - 0.666666666666669*G3_0_0 - 0.666666666666668*G3_0_1;
    A[201] = 0.0;
    A[202] = 0.0;
    A[203] = 0.0;
    A[204] = 0.0;
    A[205] = 0.0;
    A[206] = 0.0;
    A[207] = 0.0;
    A[208] = 0.0;
    A[209] = 0.0;
    A[210] = 0.0;
    A[211] = 0.0;
    A[212] = 0.0;
    A[213] = 0.0;
    A[214] = 0.0;
    A[215] = 0.0;
    A[216] = 0.0;
    A[217] = 0.0;
    A[218] = 0.0;
    A[219] = 0.0;
    A[220] = 0.0;
    A[221] = 0.0;
    A[222] = 0.166666666666667*G1_1_0 + 0.166666666666666*G1_1_1 + 0.166666666666667*G3_1_0 + 0.166666666666666*G3_1_1;
    A[223] = -0.166666666666667*G1_1_0 - 0.166666666666667*G3_1_0;
    A[224] = 0.500000000000002*G1_1_1 + 0.500000000000002*G3_1_1;
    A[225] = 0.666666666666668*G1_1_0 + 0.666666666666668*G3_1_0;
    A[226] = -0.666666666666668*G1_1_0 - 0.666666666666667*G1_1_1 - 0.666666666666668*G3_1_0 - 0.666666666666667*G3_1_1;
    A[227] = 0.0;
    A[228] = 0.0;
    A[229] = 0.0;
    A[230] = 0.0;
    A[231] = 0.0;
    A[232] = 0.0;
    A[233] = 0.0;
    A[234] = 0.0;
    A[235] = 0.0;
    A[236] = 0.0;
    A[237] = 0.0;
    A[238] = 0.0;
    A[239] = 0.0;
    A[240] = 0.0;
    A[241] = 0.0;
    A[242] = 0.0;
    A[243] = 0.0;
    A[244] = 0.0;
    A[245] = 0.0;
    A[246] = 0.0;
    A[247] = 0.0;
    A[248] = 0.0;
    A[249] = 0.0;
    A[250] = 0.666666666666665*G1_1_0 + 0.666666666666665*G3_1_0;
    A[251] = 0.666666666666668*G1_0_1 + 0.666666666666668*G3_0_1;
    A[252] = 1.33333333333333*G1_0_0 + 0.666666666666656*G1_0_1 + 0.666666666666656*G1_1_0 + 1.33333333333332*G1_1_1 + 1.33333333333333*G3_0_0 + 0.666666666666656*G3_0_1 + 0.666666666666656*G3_1_0 + 1.33333333333332*G3_1_1;
    A[253] = -1.33333333333333*G1_0_0 - 0.666666666666661*G1_0_1 - 0.666666666666656*G1_1_0 - 1.33333333333333*G3_0_0 - 0.666666666666661*G3_0_1 - 0.666666666666656*G3_1_0;
    A[254] = -0.666666666666665*G1_0_1 - 0.666666666666668*G1_1_0 - 1.33333333333333*G1_1_1 - 0.666666666666665*G3_0_1 - 0.666666666666668*G3_1_0 - 1.33333333333333*G3_1_1;
    A[255] = 0.0;
    A[256] = 0.0;
    A[257] = 0.0;
    A[258] = 0.0;
    A[259] = 0.0;
    A[260] = 0.0;
    A[261] = 0.0;
    A[262] = 0.0;
    A[263] = 0.0;
    A[264] = 0.0;
    A[265] = 0.0;
    A[266] = 0.0;
    A[267] = 0.0;
    A[268] = 0.0;
    A[269] = 0.0;
    A[270] = 0.0;
    A[271] = 0.0;
    A[272] = 0.0;
    A[273] = 0.0;
    A[274] = 0.0;
    A[275] = 0.0;
    A[276] = -0.666666666666669*G1_1_0 - 0.666666666666668*G1_1_1 - 0.666666666666669*G3_1_0 - 0.666666666666668*G3_1_1;
    A[277] = 0.0;
    A[278] = -0.666666666666668*G1_0_1 - 0.666666666666667*G1_1_1 - 0.666666666666668*G3_0_1 - 0.666666666666667*G3_1_1;
    A[279] = -1.33333333333333*G1_0_0 - 0.666666666666656*G1_0_1 - 0.666666666666661*G1_1_0 - 1.33333333333333*G3_0_0 - 0.666666666666656*G3_0_1 - 0.666666666666661*G3_1_0;
    A[280] = 1.33333333333333*G1_0_0 + 0.666666666666661*G1_0_1 + 0.666666666666661*G1_1_0 + 1.33333333333333*G1_1_1 + 1.33333333333333*G3_0_0 + 0.666666666666661*G3_0_1 + 0.666666666666661*G3_1_0 + 1.33333333333333*G3_1_1;
    A[281] = 0.666666666666665*G1_0_1 + 0.666666666666667*G1_1_0 + 0.666666666666665*G3_0_1 + 0.666666666666667*G3_1_0;
    A[282] = 0.0;
    A[283] = 0.0;
    A[284] = 0.0;
    A[285] = 0.0;
    A[286] = 0.0;
    A[287] = 0.0;
    A[288] = 0.0;
    A[289] = 0.0;
    A[290] = 0.0;
    A[291] = 0.0;
    A[292] = 0.0;
    A[293] = 0.0;
    A[294] = 0.0;
    A[295] = 0.0;
    A[296] = 0.0;
    A[297] = 0.0;
    A[298] = 0.0;
    A[299] = 0.0;
    A[300] = 0.0;
    A[301] = 0.0;
    A[302] = 0.0;
    A[303] = -0.666666666666669*G1_0_0 - 0.666666666666668*G1_0_1 - 0.666666666666669*G3_0_0 - 0.666666666666668*G3_0_1;
    A[304] = -0.666666666666669*G1_0_0 - 0.666666666666668*G1_1_0 - 0.666666666666669*G3_0_0 - 0.666666666666668*G3_1_0;
    A[305] = 0.0;
    A[306] = -0.666666666666668*G1_0_1 - 0.666666666666665*G1_1_0 - 1.33333333333333*G1_1_1 - 0.666666666666668*G3_0_1 - 0.666666666666665*G3_1_0 - 1.33333333333333*G3_1_1;
    A[307] = 0.666666666666667*G1_0_1 + 0.666666666666665*G1_1_0 + 0.666666666666667*G3_0_1 + 0.666666666666665*G3_1_0;
    A[308] = 1.33333333333334*G1_0_0 + 0.666666666666669*G1_0_1 + 0.666666666666669*G1_1_0 + 1.33333333333333*G1_1_1 + 1.33333333333334*G3_0_0 + 0.666666666666669*G3_0_1 + 0.666666666666669*G3_1_0 + 1.33333333333333*G3_1_1;
    A[309] = 0.0;
    A[310] = 0.0;
    A[311] = 0.0;
    A[312] = 0.0;
    A[313] = 0.0;
    A[314] = 0.0;
    A[315] = 0.0;
    A[316] = 0.0;
    A[317] = 0.0;
    A[318] = 0.0;
    A[319] = 0.0;
    A[320] = 0.0;
    A[321] = 0.0;
    A[322] = 0.0;
    A[323] = 0.0;
    A[324] = 0.0;
    A[325] = 0.0;
    A[326] = 0.0;
    A[327] = 0.0;
    A[328] = 0.0;
    A[329] = 0.0;
    A[330] = 0.0;
    A[331] = 0.0;
    A[332] = 0.0;
    A[333] = 0.0;
    A[334] = 0.0;
    A[335] = 0.0;
    A[336] = 0.0;
    A[337] = 0.0;
    A[338] = 0.0;
    A[339] = 0.0;
    A[340] = 0.0;
    A[341] = 0.0;
    A[342] = 0.0;
    A[343] = 0.0;
    A[344] = 0.0;
    A[345] = 0.0;
    A[346] = 0.0;
    A[347] = 0.0;
    A[348] = 0.0;
    A[349] = 0.0;
    A[350] = 0.0;
    A[351] = 0.0;
    A[352] = 0.0;
    A[353] = 0.0;
    A[354] = 0.0;
    A[355] = 0.0;
    A[356] = 0.0;
    A[357] = 0.0;
    A[358] = 0.0;
    A[359] = 0.0;
    A[360] = 0.0;
    A[361] = 0.0;
    A[362] = 0.0;
    A[363] = 0.0;
    A[364] = 0.0;
    A[365] = 0.0;
    A[366] = 0.0;
    A[367] = 0.0;
    A[368] = 0.0;
    A[369] = 0.0;
    A[370] = 0.0;
    A[371] = 0.0;
    A[372] = 0.0;
    A[373] = 0.0;
    A[374] = 0.0;
    A[375] = 0.0;
    A[376] = 0.0;
    A[377] = 0.0;
    A[378] = 0.0;
    A[379] = 0.0;
    A[380] = 0.0;
    A[381] = 0.0;
    A[382] = 0.0;
    A[383] = 0.0;
    A[384] = 0.0;
    A[385] = 0.0;
    A[386] = 0.0;
    A[387] = 0.0;
    A[388] = 0.0;
    A[389] = 0.0;
    A[390] = 0.0;
    A[391] = 0.0;
    A[392] = 0.0;
    A[393] = 0.0;
    A[394] = 0.0;
    A[395] = 0.0;
    A[396] = 0.0;
    A[397] = 0.0;
    A[398] = 0.0;
    A[399] = 0.0;
    A[400] = 0.0;
    A[401] = 0.0;
    A[402] = 0.0;
    A[403] = 0.0;
    A[404] = 0.0;
    A[405] = 0.0;
    A[406] = 0.0;
    A[407] = 0.0;
    A[408] = 0.0;
    A[409] = 0.0;
    A[410] = 0.0;
    A[411] = 0.0;
    A[412] = 0.0;
    A[413] = 0.0;
    A[414] = 0.0;
    A[415] = 0.0;
    A[416] = 0.0;
    A[417] = 0.0;
    A[418] = 0.0;
    A[419] = 0.0;
    A[420] = 0.0;
    A[421] = 0.0;
    A[422] = 0.0;
    A[423] = 0.0;
    A[424] = 0.0;
    A[425] = 0.0;
    A[426] = 0.0;
    A[427] = 0.0;
    A[428] = 0.0;
    A[429] = 0.0;
    A[430] = 0.0;
    A[431] = 0.0;
    A[432] = 0.0;
    A[433] = 0.0;
    A[434] = 0.0;
    A[435] = 0.0;
    A[436] = 0.0;
    A[437] = 0.0;
    A[438] = 0.0;
    A[439] = 0.0;
    A[440] = 0.0;
    A[441] = 0.0;
    A[442] = 0.0;
    A[443] = 0.0;
    A[444] = 0.0;
    A[445] = 0.0;
    A[446] = 0.0;
    A[447] = 0.0;
    A[448] = 0.0;
    A[449] = 0.0;
    A[450] = 0.0;
    A[451] = 0.0;
    A[452] = 0.0;
    A[453] = 0.0;
    A[454] = 0.0;
    A[455] = 0.0;
    A[456] = 0.0;
    A[457] = 0.0;
    A[458] = 0.0;
    A[459] = 0.0;
    A[460] = 0.0;
    A[461] = 0.0;
    A[462] = 0.0;
    A[463] = 0.0;
    A[464] = 0.0;
    A[465] = 0.0;
    A[466] = 0.0;
    A[467] = 0.0;
    A[468] = 0.0;
    A[469] = 0.0;
    A[470] = 0.0;
    A[471] = 0.0;
    A[472] = 0.0;
    A[473] = 0.0;
    A[474] = 0.0;
    A[475] = 0.0;
    A[476] = 0.0;
    A[477] = 0.0;
    A[478] = 0.0;
    A[479] = 0.0;
    A[480] = 0.0;
    A[481] = 0.0;
    A[482] = 0.0;
    A[483] = 0.0;
    A[484] = 0.0;
    A[485] = 0.0;
    A[486] = 0.0;
    A[487] = 0.0;
    A[488] = 0.0;
    A[489] = 0.0;
    A[490] = 0.0;
    A[491] = 0.0;
    A[492] = 0.0;
    A[493] = 0.0;
    A[494] = 0.0;
    A[495] = 0.0;
    A[496] = 0.0;
    A[497] = 0.0;
    A[498] = 0.0;
    A[499] = 0.0;
    A[500] = 0.0;
    A[501] = 0.0;
    A[502] = 0.0;
    A[503] = 0.0;
    A[504] = 0.0;
    A[505] = 0.0;
    A[506] = 0.0;
    A[507] = 0.0;
    A[508] = 0.0;
    A[509] = 0.0;
    A[510] = 0.0;
    A[511] = 0.0;
    A[512] = 0.0;
    A[513] = 0.0;
    A[514] = 0.0;
    A[515] = 0.0;
    A[516] = 0.0;
    A[517] = 0.0;
    A[518] = 0.0;
    A[519] = 0.0;
    A[520] = 0.0;
    A[521] = 0.0;
    A[522] = 0.0;
    A[523] = 0.0;
    A[524] = 0.0;
    A[525] = 0.0;
    A[526] = 0.0;
    A[527] = 0.0;
    A[528] = 0.0;
    A[529] = 0.0;
    A[530] = 0.0;
    A[531] = 0.0;
    A[532] = 0.0;
    A[533] = 0.0;
    A[534] = 0.0;
    A[535] = 0.0;
    A[536] = 0.0;
    A[537] = 0.0;
    A[538] = 0.0;
    A[539] = 0.0;
    A[540] = 0.0;
    A[541] = 0.0;
    A[542] = 0.0;
    A[543] = 0.0;
    A[544] = 0.0;
    A[545] = 0.0;
    A[546] = 0.0;
    A[547] = 0.0;
    A[548] = 0.0;
    A[549] = 0.0;
    A[550] = 0.0;
    A[551] = 0.0;
    A[552] = 0.0;
    A[553] = 0.0;
    A[554] = 0.0;
    A[555] = 0.0;
    A[556] = 0.0;
    A[557] = 0.0;
    A[558] = 0.0;
    A[559] = 0.0;
    A[560] = 0.0;
    A[561] = 0.0;
    A[562] = 0.0;
    A[563] = 0.0;
    A[564] = 0.0;
    A[565] = 0.0;
    A[566] = 0.0;
    A[567] = 0.0;
    A[568] = 0.0;
    A[569] = 0.0;
    A[570] = 0.0;
    A[571] = 0.0;
    A[572] = 0.0;
    A[573] = 0.0;
    A[574] = 0.0;
    A[575] = 0.0;
    A[576] = 0.0;
    A[577] = 0.0;
    A[578] = 0.0;
    A[579] = 0.0;
    A[580] = 0.0;
    A[581] = 0.0;
    A[582] = 0.0;
    A[583] = 0.0;
    A[584] = 0.0;
    A[585] = 0.0;
    A[586] = 0.0;
    A[587] = 0.0;
    A[588] = 0.0;
    A[589] = 0.0;
    A[590] = 0.0;
    A[591] = 0.0;
    A[592] = 0.0;
    A[593] = 0.0;
    A[594] = 0.0;
    A[595] = 0.0;
    A[596] = 0.0;
    A[597] = 0.0;
    A[598] = 0.0;
    A[599] = 0.0;
    A[600] = 0.0;
    A[601] = 0.0;
    A[602] = 0.0;
    A[603] = 0.0;
    A[604] = 0.0;
    A[605] = 0.0;
    A[606] = 0.0;
    A[607] = 0.0;
    A[608] = 0.0;
    A[609] = 0.0;
    A[610] = 0.0;
    A[611] = 0.0;
    A[612] = 0.0;
    A[613] = 0.0;
    A[614] = 0.0;
    A[615] = 0.0;
    A[616] = 0.0;
    A[617] = 0.0;
    A[618] = 0.0;
    A[619] = 0.0;
    A[620] = 0.0;
    A[621] = 0.0;
    A[622] = 0.0;
    A[623] = 0.0;
    A[624] = 0.0;
    A[625] = 0.0;
    A[626] = 0.0;
    A[627] = 0.0;
    A[628] = 0.0;
    A[629] = 0.0;
    A[630] = 0.0;
    A[631] = 0.0;
    A[632] = 0.0;
    A[633] = 0.0;
    A[634] = 0.0;
    A[635] = 0.0;
    A[636] = 0.0;
    A[637] = 0.0;
    A[638] = 0.0;
    A[639] = 0.0;
    A[640] = 0.0;
    A[641] = 0.0;
    A[642] = 0.0;
    A[643] = 0.0;
    A[644] = 0.0;
    A[645] = 0.0;
    A[646] = 0.0;
    A[647] = 0.0;
    A[648] = 0.0;
    A[649] = 0.0;
    A[650] = 0.0;
    A[651] = 0.0;
    A[652] = 0.0;
    A[653] = 0.0;
    A[654] = 0.0;
    A[655] = 0.0;
    A[656] = 0.0;
    A[657] = 0.0;
    A[658] = 0.0;
    A[659] = 0.0;
    A[660] = 0.0;
    A[661] = 0.0;
    A[662] = 0.0;
    A[663] = 0.0;
    A[664] = 0.0;
    A[665] = 0.0;
    A[666] = 0.0;
    A[667] = 0.0;
    A[668] = 0.0;
    A[669] = 0.0;
    A[670] = 0.0;
    A[671] = 0.0;
    A[672] = 0.0;
    A[673] = 0.0;
    A[674] = 0.0;
    A[675] = 0.0;
    A[676] = 0.0;
    A[677] = 0.0;
    A[678] = 0.0;
    A[679] = 0.0;
    A[680] = 0.0;
    A[681] = 0.0;
    A[682] = 0.0;
    A[683] = 0.0;
    A[684] = 0.0;
    A[685] = 0.0;
    A[686] = 0.0;
    A[687] = 0.0;
    A[688] = 0.0;
    A[689] = 0.0;
    A[690] = 0.0;
    A[691] = 0.0;
    A[692] = 0.0;
    A[693] = 0.0;
    A[694] = 0.0;
    A[695] = 0.0;
    A[696] = 0.0;
    A[697] = 0.0;
    A[698] = 0.0;
    A[699] = 0.0;
    A[700] = 0.0;
    A[701] = 0.0;
    A[702] = 0.0;
    A[703] = 0.0;
    A[704] = 0.0;
    A[705] = 0.0;
    A[706] = 0.0;
    A[707] = 0.0;
    A[708] = 0.0;
    A[709] = 0.0;
    A[710] = 0.0;
    A[711] = 0.0;
    A[712] = 0.0;
    A[713] = 0.0;
    A[714] = 0.0;
    A[715] = 0.0;
    A[716] = 0.0;
    A[717] = 0.0;
    A[718] = 0.0;
    A[719] = 0.0;
    A[720] = 0.0;
    A[721] = 0.0;
    A[722] = 0.0;
    A[723] = 0.0;
    A[724] = 0.0;
    A[725] = 0.0;
    A[726] = 0.0;
    A[727] = 0.0;
    A[728] = 0.0;
  }

};


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_2: public ufc::cell_integral
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_2() : ufc::cell_integral()
  {
    
  }

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_2() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Values of basis functions at quadrature points.
    static const double FE0_C0[6][27] = \
    {{-0.074803807748196, 0.517632341987674, -0.0748038077481967, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.074803807748196, -0.0748038077481967, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.517632341987671, -0.0748038077481967, -0.0748038077481967, 0.0335448115231487, 0.299215230992786, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.0847304930939779, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.0482083778155119, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C0_D01[6][27] = \
    {{0.633695145960915, 0.0, -0.633695145960916, 3.26739029192182, 0.0, -3.26739029192184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.633695145960915, 0.0, 2.26739029192184, 0.366304854039069, -2.90108543788275, -0.366304854039082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.26739029192184, 0.0, -0.633695145960916, 0.366304854039074, 2.90108543788276, -0.366304854039083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.783793963663865, 0.0, 0.783793963663862, 0.432412072672268, 0.0, -0.43241207267228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.783793963663864, 0.0, -0.567587927327719, 1.78379396366385, 1.35138189099159, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.567587927327715, 0.0, 0.783793963663862, 1.78379396366385, -1.35138189099157, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C0_D10[6][27] = \
    {{0.633695145960922, 2.26739029192184, 0.0, 0.366304854039083, -0.366304854039083, -2.90108543788276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.63369514596092, -0.633695145960916, 0.0, 3.26739029192183, -3.26739029192183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.26739029192183, -0.633695145960919, 0.0, 0.366304854039083, -0.366304854039083, 2.90108543788275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.78379396366386, -0.567587927327721, 0.0, 1.78379396366386, -1.78379396366386, 1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.783793963663859, 0.783793963663859, 0.0, 0.432412072672279, -0.432412072672279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.567587927327721, 0.78379396366386, 0.0, 1.78379396366386, -1.78379396366386, -1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987674, -0.0748038077481967, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481967, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481967, -0.0748038077481967, 0.0335448115231487, 0.299215230992786, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939779, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0482083778155119, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1_D01[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, -0.633695145960916, 3.26739029192182, 0.0, -3.26739029192184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, 2.26739029192184, 0.366304854039069, -2.90108543788275, -0.366304854039082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192184, 0.0, -0.633695145960916, 0.366304854039074, 2.90108543788276, -0.366304854039083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663865, 0.0, 0.783793963663862, 0.432412072672268, 0.0, -0.43241207267228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663864, 0.0, -0.567587927327719, 1.78379396366385, 1.35138189099159, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327715, 0.0, 0.783793963663862, 1.78379396366385, -1.35138189099157, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1_D10[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960922, 2.26739029192184, 0.0, 0.366304854039083, -0.366304854039083, -2.90108543788276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63369514596092, -0.633695145960916, 0.0, 3.26739029192183, -3.26739029192183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192183, -0.633695145960919, 0.0, 0.366304854039083, -0.366304854039083, 2.90108543788275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.78379396366386, -0.567587927327721, 0.0, 1.78379396366386, -1.78379396366386, 1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663859, 0.783793963663859, 0.0, 0.432412072672279, -0.432412072672279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327721, 0.78379396366386, 0.0, 1.78379396366386, -1.78379396366386, -1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987674, -0.0748038077481967, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481967, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481967, -0.0748038077481967, 0.0335448115231487, 0.299215230992786, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939779, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0482083778155119, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2_D01[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, -0.633695145960916, 3.26739029192182, 0.0, -3.26739029192184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, 2.26739029192184, 0.366304854039069, -2.90108543788275, -0.366304854039082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192184, 0.0, -0.633695145960916, 0.366304854039074, 2.90108543788276, -0.366304854039083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663865, 0.0, 0.783793963663862, 0.432412072672268, 0.0, -0.43241207267228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663864, 0.0, -0.567587927327719, 1.78379396366385, 1.35138189099159, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327715, 0.0, 0.783793963663862, 1.78379396366385, -1.35138189099157, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2_D10[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960922, 2.26739029192184, 0.0, 0.366304854039083, -0.366304854039083, -2.90108543788276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63369514596092, -0.633695145960916, 0.0, 3.26739029192183, -3.26739029192183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192183, -0.633695145960919, 0.0, 0.366304854039083, -0.366304854039083, 2.90108543788275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.78379396366386, -0.567587927327721, 0.0, 1.78379396366386, -1.78379396366386, 1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663859, 0.783793963663859, 0.0, 0.432412072672279, -0.432412072672279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327721, 0.78379396366386, 0.0, 1.78379396366386, -1.78379396366386, -1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987674, -0.0748038077481967, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481967, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231484, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481967, -0.0748038077481967, 0.0335448115231487, 0.299215230992786, 0.299215230992787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939779, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0482083778155119, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3_D01[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, -0.633695145960916, 3.26739029192182, 0.0, -3.26739029192184, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, 2.26739029192184, 0.366304854039069, -2.90108543788275, -0.366304854039082, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192184, 0.0, -0.633695145960916, 0.366304854039074, 2.90108543788276, -0.366304854039083, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663865, 0.0, 0.783793963663862, 0.432412072672268, 0.0, -0.43241207267228, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663864, 0.0, -0.567587927327719, 1.78379396366385, 1.35138189099159, -1.78379396366386, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327715, 0.0, 0.783793963663862, 1.78379396366385, -1.35138189099157, -1.78379396366386, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3_D10[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960922, 2.26739029192184, 0.0, 0.366304854039083, -0.366304854039083, -2.90108543788276, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63369514596092, -0.633695145960916, 0.0, 3.26739029192183, -3.26739029192183, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192183, -0.633695145960919, 0.0, 0.366304854039083, -0.366304854039083, 2.90108543788275, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.78379396366386, -0.567587927327721, 0.0, 1.78379396366386, -1.78379396366386, 1.35138189099158, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663859, 0.783793963663859, 0.0, 0.432412072672279, -0.432412072672279, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327721, 0.78379396366386, 0.0, 1.78379396366386, -1.78379396366386, -1.35138189099158, 0.0, 0.0, 0.0}};
    
    static const double FE1[6][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 729; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 7092930
    for (unsigned int ip = 0; ip < 6; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      
      // Total number of operations to compute function values = 14
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE1[ip][0]*w[6][0];
        F1 += FE1[ip][0]*w[3][0];
        F2 += FE1[ip][0]*w[0][0];
        F3 += FE1[ip][0]*w[7][0];
        F8 += FE1[ip][0]*w[8][0];
        F13 += FE1[ip][0]*w[1][0];
        F14 += FE1[ip][0]*w[2][0];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 432
      for (unsigned int r = 0; r < 27; r++)
      {
        F4 += FE0_C0_D10[ip][r]*w[4][r];
        F5 += FE0_C0_D01[ip][r]*w[4][r];
        F6 += FE0_C0_D10[ip][r]*w[5][r];
        F7 += FE0_C0_D01[ip][r]*w[5][r];
        F9 += FE0_C1_D10[ip][r]*w[4][r];
        F10 += FE0_C1_D01[ip][r]*w[4][r];
        F11 += FE0_C1_D10[ip][r]*w[5][r];
        F12 += FE0_C1_D01[ip][r]*w[5][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 1181709
      for (unsigned int j = 0; j < 27; j++)
      {
        for (unsigned int k = 0; k < 27; k++)
        {
          // Number of operations to compute entry: 1621
          A[j*27 + k] += ((((((FE0_C0[ip][j]*FE0_C2[ip][k]*F0 + FE0_C1[ip][j]*FE0_C3[ip][k]*F0))*10000000000.0)*(-1.0) + ((FE0_C0[ip][j]*FE0_C0[ip][k] + FE0_C1[ip][j]*FE0_C1[ip][k]))*10000000000.0*1.0/(F1)) + ((FE0_C2[ip][j]*FE0_C2[ip][k] + FE0_C3[ip][j]*FE0_C3[ip][k]))*F2/(F1)) + ((((K[0]*FE0_C2_D10[ip][j] + K[2]*FE0_C2_D01[ip][j]))*(((((((((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + (((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + ((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + (((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5)*2.0*F13)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + (((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*((0.5*(((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)))))*2.0*F13)) + ((((((((2.0*((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + 2.0*((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5 + ((2.0*((((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + 2.0*((((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*0.5))*(F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0))))*1.0 + (((2.0*((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + 2.0*((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5)*2.0*F13))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*(((0.5*((((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))) + (-1.0)*1.0)))*2.0*F13 + 1.0*((F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0)))*((0.5*((((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))) + (-1.0)*1.0)) + 0.5*((((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + (-1.0)*1.0)))))))))) + ((K[0]*FE0_C3_D10[ip][j] + K[2]*FE0_C3_D01[ip][j]))*(((((((((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + (((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + ((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + (((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5)*2.0*F13)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + (((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*((0.5*(((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)))))*2.0*F13)) + ((((((((2.0*((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + 2.0*((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5 + ((2.0*((((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + 2.0*((((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*0.5))*(F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0))))*1.0 + (((2.0*((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + 2.0*((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5)*2.0*F13))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)) + (((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*(((0.5*((((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))) + (-1.0)*1.0)))*2.0*F13 + 1.0*((F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0)))*((0.5*((((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))) + (-1.0)*1.0)) + 0.5*((((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + (-1.0)*1.0))))))))))) + (((K[1]*FE0_C2_D10[ip][j] + K[3]*FE0_C2_D01[ip][j]))*(((((((((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + (((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + ((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + (((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5)*2.0*F13)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*((0.5*(((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*2.0*F13)) + ((((((((2.0*((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + 2.0*((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5 + ((2.0*((((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + 2.0*((((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*0.5))*(F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0))))*1.0 + (((2.0*((((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + 2.0*((((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*0.5)*2.0*F13))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + (((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*(((0.5*((((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + (-1.0)*1.0)))*2.0*F13 + 1.0*((F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0)))*((0.5*((((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))) + (-1.0)*1.0)) + 0.5*((((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + (-1.0)*1.0)))))))))) + ((K[1]*FE0_C3_D10[ip][j] + K[3]*FE0_C3_D01[ip][j]))*(((((((((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + (((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + ((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + (((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5)*2.0*F13)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)) + (((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*((0.5*(((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*2.0*F13)) + ((((((((2.0*((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F3)*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))) + 2.0*((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F3)*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3)))))*0.5 + ((2.0*((((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + 2.0*((((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*0.5))*(F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0))))*1.0 + (((2.0*((((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F3)*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + 2.0*((((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)))))*0.5)*2.0*F13))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + (((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F3)*(((0.5*((((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + (-1.0)*1.0)))*2.0*F13 + 1.0*((F13*2.0*F14/(((-1.0)*2.0*F14 + 1.0)))*((0.5*((((((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0))*(((((K[0]*F4 + K[2]*F5))*F3 + ((K[0]*F6 + K[2]*F7))*F8) + 1.0)) + ((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))*((((K[0]*F11 + K[2]*F12))*F8 + ((K[0]*F9 + K[2]*F10))*F3))) + (-1.0)*1.0)) + 0.5*((((((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0))*(((((K[1]*F11 + K[3]*F12))*F8 + ((K[1]*F9 + K[3]*F10))*F3) + 1.0)) + ((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))*((((K[1]*F4 + K[3]*F5))*F3 + ((K[1]*F6 + K[3]*F7))*F8))) + (-1.0)*1.0)))))))))))))*W6[ip]*det;
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};


class ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0: public ufc::form
{
public:

  ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0();

  ~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};

extern "C" DLL_EXPORT ufc::form * create_ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0()
{
  return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0();
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0() : ufc::form()
{
    // Do nothing
}

ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::~ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0()
{
    // Do nothing
}

const char * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::signature() const
{
    return "2fd5cfc8dfceeb070f79f9ee0bab808898e5a153e5dc8a9ba79f39e9f244bdcefb130bdabcb76596ea9ab12383af630eddc29ebb804cecffee24f7457b8d8a5e";
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::rank() const
{
    return 2;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::num_coefficients() const
{
    return 9;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 8, 11, 12});
    return position[i];
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_coordinate_finite_element() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_1();
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_coordinate_dofmap() const
{
    return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_1();
}

ufc::coordinate_mapping * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4();
        break;
      }
    case 2:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
        break;
      }
    case 3:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
        break;
      }
    case 4:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
        break;
      }
    case 5:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
        break;
      }
    case 6:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4();
        break;
      }
    case 7:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_4();
        break;
      }
    case 8:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
        break;
      }
    case 9:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
        break;
      }
    case 10:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_finite_element_5();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4();
        break;
      }
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4();
        break;
      }
    case 2:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
        break;
      }
    case 3:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
        break;
      }
    case 4:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
        break;
      }
    case 5:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
        break;
      }
    case 6:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4();
        break;
      }
    case 7:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_4();
        break;
      }
    case 8:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
        break;
      }
    case 9:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
        break;
      }
    case 10:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_dofmap_5();
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_cell_subdomain_id() const
{
    return 3;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_cell_integrals() const
{
    return true;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_custom_integrals() const
{
    return false;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_interface_integrals() const
{
    return false;
}

bool ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 1:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_cell_integral_0_2();
        break;
      }
    }
    
    return 0;
}

ufc::exterior_facet_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_cell_integral() const
{
    return 0;
}

ufc::exterior_facet_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * ffc_form_e397c7b6a6388a9ed0b31ab39e87cbbe31f895df_form_0::create_default_overlap_integral() const
{
    return 0;
}

