// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_F2D44367611BA053A55267E6BDE162B932FDEA4E_H
#define __FFC_FORM_F2D44367611BA053A55267E6BDE162B932FDEA4E_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_3();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (5,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 27;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 27; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 27; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[20];
    for (unsigned int r = 0; r < 20; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 27; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 16:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 17:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 18:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 19:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 20:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 21:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 22:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 23:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 24:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 25:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 26:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[15] = vals[2];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[16] = vals[2];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[18] = vals[3];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[19] = vals[3];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[3];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[21] = vals[3];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[22] = vals[3];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[23] = vals[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[24] = vals[4];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[25] = vals[4];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[4];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[18];
    vertex_values[8] = dof_values[19];
    vertex_values[13] = dof_values[20];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[24];
    vertex_values[9] = dof_values[25];
    vertex_values[14] = dof_values[26];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_2();
        break;
      }
    case 2:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (5,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 5*num_global_entities[0] + 4*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 27;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 14;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + c.entity_indices[1][0];
    dofs[16] = offset + c.entity_indices[1][1];
    dofs[17] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[18] = offset + c.entity_indices[0][0];
    dofs[19] = offset + c.entity_indices[0][1];
    dofs[20] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[21] = offset + c.entity_indices[1][0];
    dofs[22] = offset + c.entity_indices[1][1];
    dofs[23] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[24] = offset + c.entity_indices[0][0];
    dofs[25] = offset + c.entity_indices[0][1];
    dofs[26] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 25;
      dofs[13] = 26;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
      dofs[8] = 16;
      dofs[9] = 18;
      dofs[10] = 20;
      dofs[11] = 22;
      dofs[12] = 24;
      dofs[13] = 26;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
      dofs[8] = 17;
      dofs[9] = 18;
      dofs[10] = 19;
      dofs[11] = 23;
      dofs[12] = 24;
      dofs[13] = 25;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
        dofs[3] = 18;
        dofs[4] = 24;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
        dofs[3] = 19;
        dofs[4] = 25;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
        dofs[3] = 20;
        dofs[4] = 26;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
        dofs[2] = 15;
        dofs[3] = 21;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
        dofs[2] = 16;
        dofs[3] = 22;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
        dofs[2] = 17;
        dofs[3] = 23;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[24] = vertex_coordinates[0];
    dof_coordinates[25] = vertex_coordinates[1];
    dof_coordinates[26] = vertex_coordinates[2];
    dof_coordinates[27] = vertex_coordinates[3];
    dof_coordinates[28] = vertex_coordinates[4];
    dof_coordinates[29] = vertex_coordinates[5];
    dof_coordinates[30] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[31] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[32] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[33] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[34] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[35] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[36] = vertex_coordinates[0];
    dof_coordinates[37] = vertex_coordinates[1];
    dof_coordinates[38] = vertex_coordinates[2];
    dof_coordinates[39] = vertex_coordinates[3];
    dof_coordinates[40] = vertex_coordinates[4];
    dof_coordinates[41] = vertex_coordinates[5];
    dof_coordinates[42] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[43] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[44] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[45] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[46] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[47] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[48] = vertex_coordinates[0];
    dof_coordinates[49] = vertex_coordinates[1];
    dof_coordinates[50] = vertex_coordinates[2];
    dof_coordinates[51] = vertex_coordinates[3];
    dof_coordinates[52] = vertex_coordinates[4];
    dof_coordinates[53] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 3;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_2();
        break;
      }
    case 2:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_1: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_1() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_1()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W81[81] = {0.00147423627366826, 0.00309144427703874, 0.00400413481402117, 0.00407626855723845, 0.00342808550558074, 0.00237326071360203, 0.00129245870681851, 0.000490084735942431, 8.86235065032537e-05, 0.00327677730508426, 0.00687133713087068, 0.00889996964491653, 0.00906030094114559, 0.00761958784030232, 0.00527503425623155, 0.00287274125179641, 0.00108930879601036, 0.000196983007401021, 0.00472721788115971, 0.00991288230119542, 0.0128394735833738, 0.0130707743096293, 0.0109923405017046, 0.00760998808832589, 0.00414433833888139, 0.0015714830576417, 0.000284176038886103, 0.00566566418067728, 0.0118807856107056, 0.0153883631786879, 0.0156655816764714, 0.0131745376261433, 0.00912072132305256, 0.00496707151425978, 0.00188345354372316, 0.000340590606356558, 0.00599021224213659, 0.0125613564697619, 0.0162698597304439, 0.0165629582244975, 0.0139292188975413, 0.00964318653279844, 0.0052516018675731, 0.00199134401816193, 0.000360100767481402, 0.00566566418067728, 0.0118807856107056, 0.0153883631786879, 0.0156655816764714, 0.0131745376261433, 0.00912072132305256, 0.00496707151425978, 0.00188345354372316, 0.000340590606356557, 0.00472721788115971, 0.00991288230119542, 0.0128394735833738, 0.0130707743096293, 0.0109923405017046, 0.00760998808832589, 0.00414433833888139, 0.0015714830576417, 0.000284176038886103, 0.00327677730508426, 0.00687133713087068, 0.00889996964491653, 0.00906030094114559, 0.00761958784030232, 0.00527503425623155, 0.00287274125179641, 0.00108930879601036, 0.000196983007401021, 0.00147423627366826, 0.00309144427703874, 0.00400413481402117, 0.00407626855723845, 0.00342808550558074, 0.00237326071360203, 0.00129245870681851, 0.000490084735942431, 8.86235065032537e-05};
    // Quadrature points on the UFC reference element: (0.0156904364105179, 0.0144124096488766), (0.0147356419101901, 0.0743873897091961), (0.0131161241707132, 0.176116656162995), (0.0109900094576124, 0.309667579927638), (0.00856536678369429, 0.461970401081011), (0.00607952789173366, 0.618117234695294), (0.00377582919540587, 0.76282301518504), (0.00187980320192882, 0.881921021210001), (0.000577220039089332, 0.963742187116791), (0.0808028529112415, 0.0144124096488766), (0.0758858373769427, 0.0743873897091961), (0.0675456197904911, 0.176116656162995), (0.0565965212478945, 0.309667579927638), (0.0441100587801205, 0.461970401081011), (0.0313084470790275, 0.618117234695294), (0.0194448237838582, 0.76282301518504), (0.00968063970009886, 0.881921021210001), (0.00297257671460893, 0.963742187116791), (0.190528159002766, 0.0144124096488766), (0.1789341386955, 0.0743873897091961), (0.159268418424774, 0.176116656162995), (0.133451117266456, 0.309667579927638), (0.104008806497362, 0.461970401081011), (0.0738233932130476, 0.618117234695294), (0.045849698917701, 0.76282301518504), (0.0228263531988773, 0.881921021210001), (0.00700915312422268, 0.963742187116791), (0.33300372005773, 0.0144124096488766), (0.312739776329138, 0.0743873897091961), (0.278368174556239, 0.176116656162995), (0.233244884788631, 0.309667579927638), (0.181785829788464, 0.461970401081011), (0.129027985657871, 0.618117234695294), (0.0801357677680581, 0.76282301518504), (0.0398957328426579, 0.881921021210001), (0.012250546465347, 0.963742187116791), (0.492793795175562, 0.0144124096488766), (0.462806305145402, 0.0743873897091961), (0.411941671918502, 0.176116656162995), (0.345166210036181, 0.309667579927638), (0.269014799459495, 0.461970401081011), (0.190941382652353, 0.618117234695294), (0.11858849240748, 0.76282301518504), (0.0590394893949994, 0.881921021210001), (0.0181289064416047, 0.963742187116791), (0.652583870293393, 0.0144124096488766), (0.612872833961666, 0.0743873897091961), (0.545515169280765, 0.176116656162995), (0.457087535283731, 0.309667579927638), (0.356243769130525, 0.461970401081011), (0.252854779646835, 0.618117234695294), (0.157041217046902, 0.76282301518504), (0.0781832459473407, 0.881921021210001), (0.0240072664178624, 0.963742187116791), (0.795059431348357, 0.0144124096488766), (0.746678471595304, 0.0743873897091961), (0.664614925412231, 0.176116656162995), (0.556881302805906, 0.309667579927638), (0.434020792421627, 0.461970401081011), (0.308059372091658, 0.618117234695294), (0.191327285897259, 0.76282301518504), (0.0952526255911214, 0.881921021210001), (0.0292486597589868, 0.963742187116791), (0.904784737439882, 0.0144124096488766), (0.849726772913861, 0.0743873897091961), (0.756337724046514, 0.176116656162995), (0.633735898824468, 0.309667579927638), (0.493919540138869, 0.461970401081011), (0.350574318225679, 0.618117234695294), (0.217732161031102, 0.76282301518504), (0.1083983390899, 0.881921021210001), (0.0332852361686005, 0.963742187116791), (0.969897153940606, 0.0144124096488766), (0.910876968380614, 0.0743873897091961), (0.810767219666292, 0.176116656162995), (0.67934241061475, 0.309667579927638), (0.529464232135295, 0.461970401081011), (0.375803237412972, 0.618117234695294), (0.233401155619555, 0.76282301518504), (0.11619917558807, 0.881921021210001), (0.0356805928441201, 0.963742187116791)
    
    // Values of basis functions at quadrature points.
    static const double FE1_C0_D01[81][27] = \
    {{-2.87958861576243, 0.0, -0.942350361404494, 0.0627617456420613, 3.82193897716692, -0.0627617456420696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.64350787352246, 0.0, -0.702450441163215, 0.0589425676407498, 3.34595831468568, -0.0589425676407584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.24306887866517, 0.0, -0.295533375348018, 0.0524644966828417, 2.53860225401319, -0.0524644966828505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.717369642459, 0.0, 0.238670319710553, 0.0439600378304381, 1.47869932274846, -0.043960037830448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.11785692854118, 0.0, 0.847881604324046, 0.0342614671347647, 0.269975324217143, -0.0342614671347757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.503212949651895, 0.0, 1.47246893878118, 0.0243181115669203, -0.969255989129278, -0.0243181115669328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0663953775217761, 0.0, 2.05129206074016, 0.0151033167816075, -2.11768743826193, -0.0151033167816211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.535203297647715, 0.0, 2.52768408484001, 0.00751921280769774, -3.06288738248771, -0.00751921280771284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.857277628623514, 0.0, 2.85496874846717, 0.00230888015633779, -3.71224637709067, -0.00230888015635433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.61913894975953, 0.0, -0.942350361404493, 0.323211411644955, 3.56148931116403, -0.323211411644964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.39890709165545, 0.0, -0.702450441163215, 0.30354334950776, 3.10135753281867, -0.303543349507769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.02535089618606, 0.0, -0.295533375348018, 0.270182479161953, 2.32088427153408, -0.270182479161963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.53494359529788, 0.0, 0.238670319710553, 0.226386084991566, 1.29627327558733, -0.226386084991577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.975678160555479, 0.0, 0.847881604324046, 0.176440235120469, 0.127796556231438, -0.176440235120481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.402297272902719, 0.0, 1.47246893878118, 0.125233788316096, -1.07017166587845, -0.125233788316108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.129071355875585, 0.0, 2.05129206074016, 0.077779295135417, -2.18036341661574, -0.0777792951354307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.566406643640395, 0.0, 2.52768408484001, 0.0387225588003772, -3.0940907284804, -0.038722558800393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.866859055325593, 0.0, 2.85496874846717, 0.0118903068584162, -3.72182780379275, -0.0118903068584327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.18023772539343, 0.0, -0.942350361404493, 0.762112636011054, 3.12258808679793, -0.762112636011064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.98671388638122, 0.0, -0.702450441163215, 0.71573655478199, 2.68916432754444, -0.715736554782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.65845970164893, 0.0, -0.295533375348018, 0.637073673699085, 1.95399307699695, -0.637073673699096, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.22752521122363, 0.0, 0.238670319710553, 0.533804469065811, 0.988854891513082, -0.533804469065823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.736083169686512, 0.0, 0.847881604324046, 0.416035225989437, -0.111798434637529, -0.416035225989449, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.232237488366639, 0.0, 1.47246893878118, 0.295293572852176, -1.24023145041453, -0.295293572852189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.234690856410957, 0.0, 2.05129206074016, 0.183398795670788, -2.28598291715111, -0.183398795670802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.618989497635509, 0.0, 2.52768408484001, 0.0913054127954911, -3.14667358247551, -0.0913054127955067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.883005360964048, 0.0, 2.85496874846717, 0.0280366124968712, -3.73797410943121, -0.0280366124968877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.61033548117358, 0.0, -0.942350361404493, 1.33201488023091, 2.55268584257807, -1.33201488023092, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.45149133584667, 0.0, -0.702450441163215, 1.25095910531654, 2.15394177700989, -1.25095910531655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.18206067712307, 0.0, -0.295533375348018, 1.11347269822495, 1.47759405247109, -1.11347269822496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.828350141134928, 0.0, 0.238670319710553, 0.932979539154513, 0.589679821424381, -0.932979539154525, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.424975076522104, 0.0, 0.847881604324046, 0.727143319153844, -0.422906527801936, -0.727143319153857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0114191185873457, 0.0, 1.47246893878118, 0.516111942631469, -1.46104982019383, -0.516111942631483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.371835131812385, 0.0, 2.05129206074016, 0.320543071072216, -2.42312719255254, -0.320543071072231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.687267016210631, 0.0, 2.52768408484001, 0.159582931370614, -3.21495110105063, -0.159582931370629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.903970934328545, 0.0, 2.85496874846717, 0.0490021858613687, -3.7589396827957, -0.0490021858613852, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.971175180702251, 0.0, -0.942350361404493, 1.97117518070223, 1.91352554210675, -1.97117518070225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.851225220581612, 0.0, -0.702450441163215, 1.8512252205816, 1.55367566174483, -1.85122522058161, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.647766687674014, 0.0, -0.295533375348018, 1.647766687674, 0.943300063022037, -1.64776668767401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.380664840144729, 0.0, 0.238670319710553, 1.38066484014471, 0.141994520434182, -1.38066484014473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0760591978379831, 0.0, 0.847881604324046, 1.07605919783796, -0.771822406486057, -1.07605919783798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.236234469390583, 0.0, 1.47246893878118, 0.763765530609397, -1.70870340817175, -0.763765530609411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.525646030370074, 0.0, 2.05129206074016, 0.474353969629904, -2.57693809111023, -0.474353969629919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.763842042419997, 0.0, 2.52768408484001, 0.236157957579979, -3.29152612726, -0.236157957579995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.927484374233576, 0.0, 2.85496874846717, 0.0725156257663988, -3.78245312270073, -0.0725156257664159, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.332014880230927, 0.0, -0.942350361404493, 2.61033548117356, 1.27436524163543, -2.61033548117357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.250959105316555, 0.0, -0.702450441163215, 2.45149133584665, 0.953409546479777, -2.45149133584667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.113472698224962, 0.0, -0.295533375348018, 2.18206067712305, 0.409006073572986, -2.18206067712306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.06702046084547, 0.0, 0.238670319710553, 1.82835014113491, -0.305690780556016, -1.82835014113492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.272856680846137, 0.0, 0.847881604324046, 1.42497507652208, -1.12073828517018, -1.4249750765221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.483888057368511, 0.0, 1.47246893878118, 1.01141911858733, -1.95635699614968, -1.01141911858734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.679456928927762, 0.0, 2.05129206074016, 0.628164868187592, -2.73074898966792, -0.628164868187607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.840417068629363, 0.0, 2.52768408484001, 0.312732983789345, -3.36810115346936, -0.312732983789361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.950997814138607, 0.0, 2.85496874846717, 0.0960290656714298, -3.80596656260576, -0.0960290656714469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.23788736398893, 0.0, -0.942350361404493, 3.18023772539341, 0.70446299741557, -3.18023772539343, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.284263445217995, 0.0, -0.702450441163215, 2.9867138863812, 0.418186995945227, -2.98671388638122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.362926326300899, 0.0, -0.295533375348018, 2.65845970164891, -0.0673929509528741, -2.65845970164892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.466195530934172, 0.0, 0.238670319710553, 2.22752521122361, -0.704865850644718, -2.22752521122363, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.583964774010545, 0.0, 0.847881604324046, 1.73608316968649, -1.43184637833458, -1.73608316968651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.704706427147804, 0.0, 1.47246893878118, 1.23223748836662, -2.17717536592898, -1.23223748836663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.816601204329191, 0.0, 2.05129206074016, 0.765309143589021, -2.86789326506934, -0.765309143589037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.908694587204485, 0.0, 2.52768408484001, 0.381010502364467, -3.43637867204449, -0.381010502364484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.971963387503104, 0.0, 2.85496874846717, 0.116994639035927, -3.82693213597026, -0.116994639035944, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.676788588355029, 0.0, -0.942350361404493, 3.61913894975951, 0.265561773049472, -3.61913894975953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.696456650492225, 0.0, -0.702450441163215, 3.39890709165543, 0.00599379067099814, -3.39890709165545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.729817520838031, 0.0, -0.295533375348018, 3.02535089618604, -0.434284145490005, -3.02535089618606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.773613915008417, 0.0, 0.238670319710553, 2.53494359529786, -1.01228423471896, -2.53494359529787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.823559764879513, 0.0, 0.847881604324045, 1.97567816055546, -1.67144136920355, -1.97567816055548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.874766211683885, 0.0, 1.47246893878118, 1.4022972729027, -2.34723515046506, -1.40229727290271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.922220704864562, 0.0, 2.05129206074016, 0.870928644124392, -2.97351276560472, -0.870928644124408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.961277441199599, 0.0, 2.52768408484001, 0.433593356359581, -3.4889615260396, -0.433593356359597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.988109693141559, 0.0, 2.85496874846717, 0.133140944674382, -3.84307844160872, -0.133140944674399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.937238254357924, 0.0, -0.942350361404493, 3.87958861576241, 0.00511210704657783, -3.87958861576242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.941057432359235, 0.0, -0.702450441163215, 3.64350787352244, -0.238606991196011, -3.64350787352246, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.947535503317143, 0.0, -0.295533375348018, 3.24306887866515, -0.652002127969117, -3.24306887866517, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.956039962169545, 0.0, 0.238670319710552, 2.71736964245898, -1.19471028188009, -2.717369642459, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.965738532865217, 0.0, 0.847881604324045, 2.11785692854116, -1.81362013718926, -2.11785692854118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.97568188843306, 0.0, 1.47246893878118, 1.50321294965187, -2.44815082721423, -1.50321294965189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.984896683218371, 0.0, 2.05129206074016, 0.933604622478201, -3.03618874395852, -0.933604622478217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.992480787192279, 0.0, 2.52768408484001, 0.464796702352261, -3.52016487203228, -0.464796702352278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.997691119843638, 0.0, 2.85496874846717, 0.142722371376461, -3.8526598683108, -0.142722371376478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D02[81][27] = \
    {{4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.64313007644523e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.64313007644523e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 3.99999999999999, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.64313007644523e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D10[81][27] = \
    {{-2.87958861576242, -0.937238254357931, 0.0, 0.0576496385955054, -0.0576496385955054, 3.81682687012035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.64350787352246, -0.941057432359242, 0.0, 0.297549558836783, -0.297549558836783, 3.5845653058817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.24306887866517, -0.94753550331715, 0.0, 0.704466624651979, -0.704466624651979, 3.19060438198232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.717369642459, -0.956039962169553, 0.0, 1.23867031971055, -1.23867031971055, 2.67340960462855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.11785692854118, -0.965738532865224, 0.0, 1.84788160432404, -1.84788160432404, 2.0835954614064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.50321294965189, -0.975681888433067, 0.0, 2.47246893878117, -2.47246893878117, 1.47889483808496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0663953775217807, -0.984896683218378, 0.0, 3.05129206074015, -3.05129206074015, 0.918501305696597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.535203297647719, -0.992480787192286, 0.0, 3.52768408484, -3.52768408484, 0.457277489544567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.857277628623518, -0.997691119843645, 0.0, 3.85496874846715, -3.85496874846715, 0.140413491220126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.61913894975953, -0.676788588355037, 0.0, 0.0576496385955052, -0.0576496385955052, 3.29592753811456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.39890709165545, -0.696456650492232, 0.0, 0.297549558836783, -0.297549558836783, 3.09536374214768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.02535089618605, -0.729817520838038, 0.0, 0.704466624651979, -0.704466624651979, 2.75516841702409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.53494359529787, -0.773613915008424, 0.0, 1.23867031971055, -1.23867031971055, 2.30855751030629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.975678160555475, -0.82355976487952, 0.0, 1.84788160432404, -1.84788160432404, 1.79923792543499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.402297272902715, -0.874766211683892, 0.0, 2.47246893878117, -2.47246893878117, 1.27706348458661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.12907135587559, -0.922220704864569, 0.0, 3.05129206074015, -3.05129206074015, 0.793149348988978, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.566406643640399, -0.961277441199606, 0.0, 3.52768408484, -3.52768408484, 0.394870797559207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.866859055325596, -0.988109693141566, 0.0, 3.85496874846715, -3.85496874846715, 0.121250637815969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.18023772539343, -0.237887363988938, 0.0, 0.0576496385955051, -0.0576496385955051, 2.41812508938237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.98671388638121, -0.284263445218001, 0.0, 0.297549558836783, -0.297549558836783, 2.27097733159922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.65845970164892, -0.362926326300906, 0.0, 0.704466624651979, -0.704466624651979, 2.02138602794983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.22752521122363, -0.466195530934178, 0.0, 1.23867031971055, -1.23867031971055, 1.6937207421578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.736083169686507, -0.583964774010552, 0.0, 1.84788160432404, -1.84788160432404, 1.32004794369706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.232237488366634, -0.704706427147811, 0.0, 2.47246893878117, -2.47246893878117, 0.936943915514445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.234690856410961, -0.816601204329197, 0.0, 3.05129206074015, -3.05129206074015, 0.581910347918236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.618989497635513, -0.908694587204492, 0.0, 3.52768408484, -3.52768408484, 0.289705089568979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.883005360964051, -0.971963387503111, 0.0, 3.85496874846715, -3.85496874846715, 0.0889580265390593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.61033548117357, 0.33201488023092, 0.0, 0.057649638595505, -0.057649638595505, 1.27832060094265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.45149133584666, 0.250959105316548, 0.0, 0.297549558836783, -0.297549558836783, 1.20053223053012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.18206067712306, 0.113472698224956, 0.0, 0.704466624651979, -0.704466624651979, 1.06858797889811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.828350141134923, -0.0670204608454761, 0.0, 1.23867031971055, -1.23867031971055, 0.895370601980399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.424975076522099, -0.272856680846144, 0.0, 1.84788160432404, -1.84788160432404, 0.697831757368242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0114191185873411, -0.483888057368517, 0.0, 2.47246893878117, -2.47246893878117, 0.495307175955858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.37183513181239, -0.679456928927769, 0.0, 3.05129206074015, -3.05129206074015, 0.307621797115378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.687267016210635, -0.84041706862937, 0.0, 3.52768408484, -3.52768408484, 0.153150052418734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.903970934328549, -0.950997814138614, 0.0, 3.85496874846715, -3.85496874846715, 0.0470268798100645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.971175180702246, 0.971175180702245, 0.0, 0.0576496385955049, -0.0576496385955049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.851225220581607, 0.851225220581606, 0.0, 0.297549558836783, -0.297549558836783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.647766687674008, 0.647766687674008, 0.0, 0.704466624651979, -0.704466624651979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.380664840144724, 0.380664840144724, 0.0, 1.23867031971055, -1.23867031971055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0760591978379779, 0.0760591978379777, 0.0, 1.84788160432404, -1.84788160432404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.236234469390588, -0.236234469390588, 0.0, 2.47246893878117, -2.47246893878117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.525646030370078, -0.52564603037008, 0.0, 3.05129206074015, -3.05129206074015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.763842042420001, -0.763842042420004, 0.0, 3.52768408484, -3.52768408484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.92748437423358, -0.927484374233583, 0.0, 3.85496874846715, -3.85496874846715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.33201488023092, 1.61033548117357, 0.0, 0.0576496385955048, -0.0576496385955048, -1.27832060094265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.250959105316549, 1.45149133584666, 0.0, 0.297549558836783, -0.297549558836783, -1.20053223053012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.113472698224956, 1.18206067712306, 0.0, 0.704466624651979, -0.704466624651979, -1.06858797889811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0670204608454757, 0.828350141134924, 0.0, 1.23867031971055, -1.23867031971055, -0.8953706019804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.272856680846143, 0.424975076522099, 0.0, 1.84788160432404, -1.84788160432404, -0.697831757368242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.483888057368516, 0.0114191185873403, 0.0, 2.47246893878117, -2.47246893878117, -0.495307175955857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.679456928927767, -0.371835131812392, 0.0, 3.05129206074015, -3.05129206074015, -0.307621797115375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.840417068629367, -0.687267016210638, 0.0, 3.52768408484, -3.52768408484, -0.153150052418729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.950997814138611, -0.903970934328552, 0.0, 3.85496874846715, -3.85496874846715, -0.0470268798100591, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.237887363988937, 2.18023772539343, 0.0, 0.0576496385955048, -0.0576496385955048, -2.41812508938237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.284263445218002, 1.98671388638121, 0.0, 0.297549558836783, -0.297549558836783, -2.27097733159922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.362926326300906, 1.65845970164892, 0.0, 0.704466624651979, -0.704466624651979, -2.02138602794983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.466195530934179, 1.22752521122363, 0.0, 1.23867031971055, -1.23867031971055, -1.69372074215781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.583964774010551, 0.736083169686507, 0.0, 1.84788160432404, -1.84788160432404, -1.32004794369706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.70470642714781, 0.232237488366634, 0.0, 2.47246893878117, -2.47246893878117, -0.936943915514444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.816601204329196, -0.234690856410962, 0.0, 3.05129206074015, -3.05129206074015, -0.581910347918234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.908694587204489, -0.618989497635515, 0.0, 3.52768408484, -3.52768408484, -0.289705089568975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.971963387503108, -0.883005360964055, 0.0, 3.85496874846715, -3.85496874846715, -0.0889580265390538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.676788588355037, 2.61913894975953, 0.0, 0.0576496385955046, -0.0576496385955046, -3.29592753811456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.696456650492233, 2.39890709165545, 0.0, 0.297549558836783, -0.297549558836783, -3.09536374214768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.729817520838039, 2.02535089618606, 0.0, 0.704466624651979, -0.704466624651979, -2.75516841702409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.773613915008424, 1.53494359529787, 0.0, 1.23867031971055, -1.23867031971055, -2.3085575103063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.82355976487952, 0.975678160555476, 0.0, 1.84788160432404, -1.84788160432404, -1.799237925435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.874766211683891, 0.402297272902715, 0.0, 2.47246893878117, -2.47246893878117, -1.27706348458661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.922220704864567, -0.129071355875591, 0.0, 3.05129206074015, -3.05129206074015, -0.793149348988976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.961277441199603, -0.566406643640402, 0.0, 3.52768408484, -3.52768408484, -0.394870797559202, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.988109693141563, -0.8668590553256, 0.0, 3.85496874846715, -3.85496874846715, -0.121250637815964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.937238254357933, 2.87958861576242, 0.0, 0.0576496385955044, -0.0576496385955044, -3.81682687012036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.941057432359243, 2.64350787352246, 0.0, 0.297549558836783, -0.297549558836783, -3.5845653058817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.947535503317151, 2.24306887866517, 0.0, 0.704466624651979, -0.704466624651979, -3.19060438198232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.956039962169553, 1.717369642459, 0.0, 1.23867031971055, -1.23867031971055, -2.67340960462855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.965738532865224, 1.11785692854118, 0.0, 1.84788160432404, -1.84788160432404, -2.0835954614064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.975681888433066, 0.50321294965189, 0.0, 2.47246893878117, -2.47246893878117, -1.47889483808496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.984896683218376, -0.0663953775217816, 0.0, 3.05129206074015, -3.05129206074015, -0.918501305696595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.992480787192283, -0.535203297647721, 0.0, 3.52768408484, -3.52768408484, -0.457277489544563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.997691119843641, -0.857277628623521, 0.0, 3.85496874846715, -3.85496874846715, -0.140413491220121, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D11[81][27] = \
    {{4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.02140518265514e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.15463194561016e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.17683640610267e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.08801856413265e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.3988810110277e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.35447209004269e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.26565424807268e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.06581410364015e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.57651669496772e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.50990331349021e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.4210854715202e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.15463194561016e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 1.70974345792274e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.66533453693773e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.48769885299771e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.28785870856518e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.02140518265514e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D20[81][27] = \
    {{3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D01[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.87958861576243, 0.0, -0.942350361404494, 0.0627617456420613, 3.82193897716692, -0.0627617456420696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.64350787352246, 0.0, -0.702450441163215, 0.0589425676407498, 3.34595831468568, -0.0589425676407584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.24306887866517, 0.0, -0.295533375348018, 0.0524644966828417, 2.53860225401319, -0.0524644966828505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.717369642459, 0.0, 0.238670319710553, 0.0439600378304381, 1.47869932274846, -0.043960037830448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11785692854118, 0.0, 0.847881604324046, 0.0342614671347647, 0.269975324217143, -0.0342614671347757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.503212949651895, 0.0, 1.47246893878118, 0.0243181115669203, -0.969255989129278, -0.0243181115669328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0663953775217761, 0.0, 2.05129206074016, 0.0151033167816075, -2.11768743826193, -0.0151033167816211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.535203297647715, 0.0, 2.52768408484001, 0.00751921280769774, -3.06288738248771, -0.00751921280771284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.857277628623514, 0.0, 2.85496874846717, 0.00230888015633779, -3.71224637709067, -0.00230888015635433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.61913894975953, 0.0, -0.942350361404493, 0.323211411644955, 3.56148931116403, -0.323211411644964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.39890709165545, 0.0, -0.702450441163215, 0.30354334950776, 3.10135753281867, -0.303543349507769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.02535089618606, 0.0, -0.295533375348018, 0.270182479161953, 2.32088427153408, -0.270182479161963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.53494359529788, 0.0, 0.238670319710553, 0.226386084991566, 1.29627327558733, -0.226386084991577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.975678160555479, 0.0, 0.847881604324046, 0.176440235120469, 0.127796556231438, -0.176440235120481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.402297272902719, 0.0, 1.47246893878118, 0.125233788316096, -1.07017166587845, -0.125233788316108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.129071355875585, 0.0, 2.05129206074016, 0.077779295135417, -2.18036341661574, -0.0777792951354307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.566406643640395, 0.0, 2.52768408484001, 0.0387225588003772, -3.0940907284804, -0.038722558800393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.866859055325593, 0.0, 2.85496874846717, 0.0118903068584162, -3.72182780379275, -0.0118903068584327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18023772539343, 0.0, -0.942350361404493, 0.762112636011054, 3.12258808679793, -0.762112636011064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.98671388638122, 0.0, -0.702450441163215, 0.71573655478199, 2.68916432754444, -0.715736554782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.65845970164893, 0.0, -0.295533375348018, 0.637073673699085, 1.95399307699695, -0.637073673699096, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.22752521122363, 0.0, 0.238670319710553, 0.533804469065811, 0.988854891513082, -0.533804469065823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.736083169686512, 0.0, 0.847881604324046, 0.416035225989437, -0.111798434637529, -0.416035225989449, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.232237488366639, 0.0, 1.47246893878118, 0.295293572852176, -1.24023145041453, -0.295293572852189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.234690856410957, 0.0, 2.05129206074016, 0.183398795670788, -2.28598291715111, -0.183398795670802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.618989497635509, 0.0, 2.52768408484001, 0.0913054127954911, -3.14667358247551, -0.0913054127955067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.883005360964048, 0.0, 2.85496874846717, 0.0280366124968712, -3.73797410943121, -0.0280366124968877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.61033548117358, 0.0, -0.942350361404493, 1.33201488023091, 2.55268584257807, -1.33201488023092, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.45149133584667, 0.0, -0.702450441163215, 1.25095910531654, 2.15394177700989, -1.25095910531655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18206067712307, 0.0, -0.295533375348018, 1.11347269822495, 1.47759405247109, -1.11347269822496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828350141134928, 0.0, 0.238670319710553, 0.932979539154513, 0.589679821424381, -0.932979539154525, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.424975076522104, 0.0, 0.847881604324046, 0.727143319153844, -0.422906527801936, -0.727143319153857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0114191185873457, 0.0, 1.47246893878118, 0.516111942631469, -1.46104982019383, -0.516111942631483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.371835131812385, 0.0, 2.05129206074016, 0.320543071072216, -2.42312719255254, -0.320543071072231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687267016210631, 0.0, 2.52768408484001, 0.159582931370614, -3.21495110105063, -0.159582931370629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.903970934328545, 0.0, 2.85496874846717, 0.0490021858613687, -3.7589396827957, -0.0490021858613852, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.971175180702251, 0.0, -0.942350361404493, 1.97117518070223, 1.91352554210675, -1.97117518070225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.851225220581612, 0.0, -0.702450441163215, 1.8512252205816, 1.55367566174483, -1.85122522058161, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.647766687674014, 0.0, -0.295533375348018, 1.647766687674, 0.943300063022037, -1.64776668767401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.380664840144729, 0.0, 0.238670319710553, 1.38066484014471, 0.141994520434182, -1.38066484014473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0760591978379831, 0.0, 0.847881604324046, 1.07605919783796, -0.771822406486057, -1.07605919783798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.236234469390583, 0.0, 1.47246893878118, 0.763765530609397, -1.70870340817175, -0.763765530609411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.525646030370074, 0.0, 2.05129206074016, 0.474353969629904, -2.57693809111023, -0.474353969629919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.763842042419997, 0.0, 2.52768408484001, 0.236157957579979, -3.29152612726, -0.236157957579995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.927484374233576, 0.0, 2.85496874846717, 0.0725156257663988, -3.78245312270073, -0.0725156257664159, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.332014880230927, 0.0, -0.942350361404493, 2.61033548117356, 1.27436524163543, -2.61033548117357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250959105316555, 0.0, -0.702450441163215, 2.45149133584665, 0.953409546479777, -2.45149133584667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113472698224962, 0.0, -0.295533375348018, 2.18206067712305, 0.409006073572986, -2.18206067712306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06702046084547, 0.0, 0.238670319710553, 1.82835014113491, -0.305690780556016, -1.82835014113492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.272856680846137, 0.0, 0.847881604324046, 1.42497507652208, -1.12073828517018, -1.4249750765221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.483888057368511, 0.0, 1.47246893878118, 1.01141911858733, -1.95635699614968, -1.01141911858734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.679456928927762, 0.0, 2.05129206074016, 0.628164868187592, -2.73074898966792, -0.628164868187607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.840417068629363, 0.0, 2.52768408484001, 0.312732983789345, -3.36810115346936, -0.312732983789361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.950997814138607, 0.0, 2.85496874846717, 0.0960290656714298, -3.80596656260576, -0.0960290656714469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23788736398893, 0.0, -0.942350361404493, 3.18023772539341, 0.70446299741557, -3.18023772539343, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.284263445217995, 0.0, -0.702450441163215, 2.9867138863812, 0.418186995945227, -2.98671388638122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.362926326300899, 0.0, -0.295533375348018, 2.65845970164891, -0.0673929509528741, -2.65845970164892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.466195530934172, 0.0, 0.238670319710553, 2.22752521122361, -0.704865850644718, -2.22752521122363, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.583964774010545, 0.0, 0.847881604324046, 1.73608316968649, -1.43184637833458, -1.73608316968651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.704706427147804, 0.0, 1.47246893878118, 1.23223748836662, -2.17717536592898, -1.23223748836663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.816601204329191, 0.0, 2.05129206074016, 0.765309143589021, -2.86789326506934, -0.765309143589037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.908694587204485, 0.0, 2.52768408484001, 0.381010502364467, -3.43637867204449, -0.381010502364484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.971963387503104, 0.0, 2.85496874846717, 0.116994639035927, -3.82693213597026, -0.116994639035944, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.676788588355029, 0.0, -0.942350361404493, 3.61913894975951, 0.265561773049472, -3.61913894975953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.696456650492225, 0.0, -0.702450441163215, 3.39890709165543, 0.00599379067099814, -3.39890709165545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729817520838031, 0.0, -0.295533375348018, 3.02535089618604, -0.434284145490005, -3.02535089618606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.773613915008417, 0.0, 0.238670319710553, 2.53494359529786, -1.01228423471896, -2.53494359529787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.823559764879513, 0.0, 0.847881604324045, 1.97567816055546, -1.67144136920355, -1.97567816055548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874766211683885, 0.0, 1.47246893878118, 1.4022972729027, -2.34723515046506, -1.40229727290271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.922220704864562, 0.0, 2.05129206074016, 0.870928644124392, -2.97351276560472, -0.870928644124408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961277441199599, 0.0, 2.52768408484001, 0.433593356359581, -3.4889615260396, -0.433593356359597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.988109693141559, 0.0, 2.85496874846717, 0.133140944674382, -3.84307844160872, -0.133140944674399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.937238254357924, 0.0, -0.942350361404493, 3.87958861576241, 0.00511210704657783, -3.87958861576242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.941057432359235, 0.0, -0.702450441163215, 3.64350787352244, -0.238606991196011, -3.64350787352246, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.947535503317143, 0.0, -0.295533375348018, 3.24306887866515, -0.652002127969117, -3.24306887866517, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.956039962169545, 0.0, 0.238670319710552, 2.71736964245898, -1.19471028188009, -2.717369642459, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965738532865217, 0.0, 0.847881604324045, 2.11785692854116, -1.81362013718926, -2.11785692854118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.97568188843306, 0.0, 1.47246893878118, 1.50321294965187, -2.44815082721423, -1.50321294965189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.984896683218371, 0.0, 2.05129206074016, 0.933604622478201, -3.03618874395852, -0.933604622478217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.992480787192279, 0.0, 2.52768408484001, 0.464796702352261, -3.52016487203228, -0.464796702352278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997691119843638, 0.0, 2.85496874846717, 0.142722371376461, -3.8526598683108, -0.142722371376478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D02[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.64313007644523e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.64313007644523e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.11022302462516e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.68753899743024e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 3.99999999999999, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.15463194561016e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.46549439250521e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.64313007644523e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D10[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.87958861576242, -0.937238254357931, 0.0, 0.0576496385955054, -0.0576496385955054, 3.81682687012035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.64350787352246, -0.941057432359242, 0.0, 0.297549558836783, -0.297549558836783, 3.5845653058817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.24306887866517, -0.94753550331715, 0.0, 0.704466624651979, -0.704466624651979, 3.19060438198232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.717369642459, -0.956039962169553, 0.0, 1.23867031971055, -1.23867031971055, 2.67340960462855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11785692854118, -0.965738532865224, 0.0, 1.84788160432404, -1.84788160432404, 2.0835954614064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.50321294965189, -0.975681888433067, 0.0, 2.47246893878117, -2.47246893878117, 1.47889483808496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0663953775217807, -0.984896683218378, 0.0, 3.05129206074015, -3.05129206074015, 0.918501305696597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.535203297647719, -0.992480787192286, 0.0, 3.52768408484, -3.52768408484, 0.457277489544567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.857277628623518, -0.997691119843645, 0.0, 3.85496874846715, -3.85496874846715, 0.140413491220126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.61913894975953, -0.676788588355037, 0.0, 0.0576496385955052, -0.0576496385955052, 3.29592753811456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.39890709165545, -0.696456650492232, 0.0, 0.297549558836783, -0.297549558836783, 3.09536374214768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.02535089618605, -0.729817520838038, 0.0, 0.704466624651979, -0.704466624651979, 2.75516841702409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.53494359529787, -0.773613915008424, 0.0, 1.23867031971055, -1.23867031971055, 2.30855751030629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.975678160555475, -0.82355976487952, 0.0, 1.84788160432404, -1.84788160432404, 1.79923792543499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.402297272902715, -0.874766211683892, 0.0, 2.47246893878117, -2.47246893878117, 1.27706348458661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12907135587559, -0.922220704864569, 0.0, 3.05129206074015, -3.05129206074015, 0.793149348988978, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.566406643640399, -0.961277441199606, 0.0, 3.52768408484, -3.52768408484, 0.394870797559207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.866859055325596, -0.988109693141566, 0.0, 3.85496874846715, -3.85496874846715, 0.121250637815969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18023772539343, -0.237887363988938, 0.0, 0.0576496385955051, -0.0576496385955051, 2.41812508938237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.98671388638121, -0.284263445218001, 0.0, 0.297549558836783, -0.297549558836783, 2.27097733159922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.65845970164892, -0.362926326300906, 0.0, 0.704466624651979, -0.704466624651979, 2.02138602794983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.22752521122363, -0.466195530934178, 0.0, 1.23867031971055, -1.23867031971055, 1.6937207421578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.736083169686507, -0.583964774010552, 0.0, 1.84788160432404, -1.84788160432404, 1.32004794369706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.232237488366634, -0.704706427147811, 0.0, 2.47246893878117, -2.47246893878117, 0.936943915514445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.234690856410961, -0.816601204329197, 0.0, 3.05129206074015, -3.05129206074015, 0.581910347918236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.618989497635513, -0.908694587204492, 0.0, 3.52768408484, -3.52768408484, 0.289705089568979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.883005360964051, -0.971963387503111, 0.0, 3.85496874846715, -3.85496874846715, 0.0889580265390593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.61033548117357, 0.33201488023092, 0.0, 0.057649638595505, -0.057649638595505, 1.27832060094265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.45149133584666, 0.250959105316548, 0.0, 0.297549558836783, -0.297549558836783, 1.20053223053012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18206067712306, 0.113472698224956, 0.0, 0.704466624651979, -0.704466624651979, 1.06858797889811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828350141134923, -0.0670204608454761, 0.0, 1.23867031971055, -1.23867031971055, 0.895370601980399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.424975076522099, -0.272856680846144, 0.0, 1.84788160432404, -1.84788160432404, 0.697831757368242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0114191185873411, -0.483888057368517, 0.0, 2.47246893878117, -2.47246893878117, 0.495307175955858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.37183513181239, -0.679456928927769, 0.0, 3.05129206074015, -3.05129206074015, 0.307621797115378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687267016210635, -0.84041706862937, 0.0, 3.52768408484, -3.52768408484, 0.153150052418734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.903970934328549, -0.950997814138614, 0.0, 3.85496874846715, -3.85496874846715, 0.0470268798100645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.971175180702246, 0.971175180702245, 0.0, 0.0576496385955049, -0.0576496385955049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.851225220581607, 0.851225220581606, 0.0, 0.297549558836783, -0.297549558836783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.647766687674008, 0.647766687674008, 0.0, 0.704466624651979, -0.704466624651979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.380664840144724, 0.380664840144724, 0.0, 1.23867031971055, -1.23867031971055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0760591978379779, 0.0760591978379777, 0.0, 1.84788160432404, -1.84788160432404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.236234469390588, -0.236234469390588, 0.0, 2.47246893878117, -2.47246893878117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.525646030370078, -0.52564603037008, 0.0, 3.05129206074015, -3.05129206074015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.763842042420001, -0.763842042420004, 0.0, 3.52768408484, -3.52768408484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.92748437423358, -0.927484374233583, 0.0, 3.85496874846715, -3.85496874846715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.33201488023092, 1.61033548117357, 0.0, 0.0576496385955048, -0.0576496385955048, -1.27832060094265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250959105316549, 1.45149133584666, 0.0, 0.297549558836783, -0.297549558836783, -1.20053223053012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113472698224956, 1.18206067712306, 0.0, 0.704466624651979, -0.704466624651979, -1.06858797889811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0670204608454757, 0.828350141134924, 0.0, 1.23867031971055, -1.23867031971055, -0.8953706019804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.272856680846143, 0.424975076522099, 0.0, 1.84788160432404, -1.84788160432404, -0.697831757368242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.483888057368516, 0.0114191185873403, 0.0, 2.47246893878117, -2.47246893878117, -0.495307175955857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.679456928927767, -0.371835131812392, 0.0, 3.05129206074015, -3.05129206074015, -0.307621797115375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.840417068629367, -0.687267016210638, 0.0, 3.52768408484, -3.52768408484, -0.153150052418729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.950997814138611, -0.903970934328552, 0.0, 3.85496874846715, -3.85496874846715, -0.0470268798100591, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.237887363988937, 2.18023772539343, 0.0, 0.0576496385955048, -0.0576496385955048, -2.41812508938237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.284263445218002, 1.98671388638121, 0.0, 0.297549558836783, -0.297549558836783, -2.27097733159922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.362926326300906, 1.65845970164892, 0.0, 0.704466624651979, -0.704466624651979, -2.02138602794983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.466195530934179, 1.22752521122363, 0.0, 1.23867031971055, -1.23867031971055, -1.69372074215781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.583964774010551, 0.736083169686507, 0.0, 1.84788160432404, -1.84788160432404, -1.32004794369706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.70470642714781, 0.232237488366634, 0.0, 2.47246893878117, -2.47246893878117, -0.936943915514444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.816601204329196, -0.234690856410962, 0.0, 3.05129206074015, -3.05129206074015, -0.581910347918234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.908694587204489, -0.618989497635515, 0.0, 3.52768408484, -3.52768408484, -0.289705089568975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.971963387503108, -0.883005360964055, 0.0, 3.85496874846715, -3.85496874846715, -0.0889580265390538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.676788588355037, 2.61913894975953, 0.0, 0.0576496385955046, -0.0576496385955046, -3.29592753811456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.696456650492233, 2.39890709165545, 0.0, 0.297549558836783, -0.297549558836783, -3.09536374214768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729817520838039, 2.02535089618606, 0.0, 0.704466624651979, -0.704466624651979, -2.75516841702409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.773613915008424, 1.53494359529787, 0.0, 1.23867031971055, -1.23867031971055, -2.3085575103063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.82355976487952, 0.975678160555476, 0.0, 1.84788160432404, -1.84788160432404, -1.799237925435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874766211683891, 0.402297272902715, 0.0, 2.47246893878117, -2.47246893878117, -1.27706348458661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.922220704864567, -0.129071355875591, 0.0, 3.05129206074015, -3.05129206074015, -0.793149348988976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961277441199603, -0.566406643640402, 0.0, 3.52768408484, -3.52768408484, -0.394870797559202, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.988109693141563, -0.8668590553256, 0.0, 3.85496874846715, -3.85496874846715, -0.121250637815964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.937238254357933, 2.87958861576242, 0.0, 0.0576496385955044, -0.0576496385955044, -3.81682687012036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.941057432359243, 2.64350787352246, 0.0, 0.297549558836783, -0.297549558836783, -3.5845653058817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.947535503317151, 2.24306887866517, 0.0, 0.704466624651979, -0.704466624651979, -3.19060438198232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.956039962169553, 1.717369642459, 0.0, 1.23867031971055, -1.23867031971055, -2.67340960462855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965738532865224, 1.11785692854118, 0.0, 1.84788160432404, -1.84788160432404, -2.0835954614064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975681888433066, 0.50321294965189, 0.0, 2.47246893878117, -2.47246893878117, -1.47889483808496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.984896683218376, -0.0663953775217816, 0.0, 3.05129206074015, -3.05129206074015, -0.918501305696595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.992480787192283, -0.535203297647721, 0.0, 3.52768408484, -3.52768408484, -0.457277489544563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997691119843641, -0.857277628623521, 0.0, 3.85496874846715, -3.85496874846715, -0.140413491220121, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D11[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.02140518265514e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.15463194561016e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.17683640610267e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.08801856413265e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.3988810110277e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.35447209004269e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.26565424807268e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.06581410364015e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.57651669496772e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.50990331349021e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.4210854715202e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.15463194561016e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 1.70974345792274e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.66533453693773e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.48769885299771e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.28785870856518e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.02140518265514e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D20[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.911503824503568, -0.0151980568210128, -0.0139969745451025, 0.00090454798847206, 0.055914220399486, 0.0608724384745895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.748516734671902, -0.0143013636251795, -0.0633204222137004, 0.00438458374955394, 0.271031040096239, 0.0536894273211853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.503919749304526, -0.01277205874419, -0.114082503006926, 0.00923987172305858, 0.571158446616784, 0.0425364941067478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.243669811104969, -0.0107484488418556, -0.117879559811158, 0.0136129985284827, 0.841481280949109, 0.0298639180704533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312005140859399, -0.00841863576741578, -0.0351370981311106, 0.0158277837138768, 0.978387214710366, 0.0181402213883435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0933470909128306, -0.00600560657296083, 0.14602059695942, 0.0150314438747653, 0.929161831596982, 0.00913882505462386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124448956730467, -0.00374731542317999, 0.400974889806951, 0.0115211576466527, 0.712175093109525, 0.00352513159051911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0891946787733756, -0.00187273588177278, 0.673648354094182, 0.00663135183807551, 0.409913982393563, 0.000873726329327792, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0331343834327043, -0.000576553673142161, 0.89385581934052, 0.00222516521167826, 0.137547570340864, 8.2382212784865e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.73248610476843, -0.06774465083405, -0.0139969745451025, 0.00465825526781882, 0.0521605131201392, 0.292436752222764, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.594344404299348, -0.0643685167481431, -0.0633204222137004, 0.0225797974334692, 0.252835826412324, 0.257928910816702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.387755781585207, -0.0584207982847279, -0.114082503006926, 0.0475836347838333, 0.532814683556009, 0.204349201366605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.169506480093244, -0.0501901888131676, -0.117879559811158, 0.0701044310686345, 0.784989848408957, 0.14346898905349, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00600651587688565, -0.040218664208949, -0.0351370981311106, 0.0815101661854369, 0.912704832238806, 0.0871472797927023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10476961302688, -0.0293480093620269, 0.14602059695942, 0.0774091629243696, 0.866784112547378, 0.0439037499577392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.122917573136554, -0.0186886214398875, 0.400974889806951, 0.0593318364341778, 0.664364414322, 0.0169350540133137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.084897939255002, -0.00949321013009255, 0.673648354094182, 0.0341502386011091, 0.38239509563053, 0.00419746105927378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0310694222750014, -0.0029549042899604, 0.89385581934052, 0.0114591903372385, 0.128313545215303, 0.000395771671900164, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.469179567403589, -0.117926200256799, -0.0139969745451025, 0.0109838795087765, 0.0458348888791815, 0.605924839010355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.368379008292494, -0.114899286714099, -0.0633204222137004, 0.0532417740296861, 0.222173849816107, 0.534425076789513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.218811072749179, -0.108535560209716, -0.114082503006926, 0.11219928514136, 0.468199033198482, 0.423408672127621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0633522680237009, -0.0978327158671251, -0.117879559811158, 0.165301938090171, 0.68979234138742, 0.297265728176991, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0572726959130331, -0.0823731428393508, -0.0351370981311106, 0.192195960214175, 0.802019038210068, 0.180567938459251, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118258218624645, -0.0629236064420711, 0.14602059695942, 0.182526046674689, 0.761667228797058, 0.0909679526355481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118115025239636, -0.0416453091360132, 0.400974889806951, 0.139900822294907, 0.58379542846127, 0.0350891938125209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0771065002271167, -0.0217842683981574, 0.673648354094182, 0.080524162894616, 0.336021171337023, 0.00869708029945335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0275376915635927, -0.00691089666918501, 0.89385581934052, 0.0270200662470993, 0.112752669305443, 0.000820033339716114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.199147545240815, -0.111220764913156, -0.0139969745451025, 0.0191975441122872, 0.0376212242756708, 0.869251425829485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.138353387254742, -0.11712744093234, -0.0633204222137004, 0.0930555824774495, 0.182360041368343, 0.766678852045505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0496584305500789, -0.123390493344693, -0.114082503006926, 0.196101088340167, 0.384297229999675, 0.607416247461698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0392295054602189, -0.124438532228508, -0.117879559811158, 0.288913516011985, 0.566180763465607, 0.426453318022293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.102424523041879, -0.115693653964703, -0.0351370981311106, 0.335918690792885, 0.658296307631358, 0.25904027671345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124983700466336, -0.0957315434920154, 0.14602059695942, 0.319017686772589, 0.625175588699158, 0.130501371527184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.107717329343758, -0.0672922852165058, 0.400974889806951, 0.244517631971993, 0.479178618784185, 0.0503384739971351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.065958006053616, -0.0367123938445524, 0.673648354094182, 0.140739541802073, 0.275805792429566, 0.0124767115723476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0228545687361459, -0.0119503946879477, 0.89385581934052, 0.0472254737755574, 0.0925472617769846, 0.00117640853103196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00710234604849471, -0.00710234604849473, -0.0139969745451025, 0.028409384193979, 0.028409384193979, 0.971382898254134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0344269529807241, -0.0344269529807241, -0.0633204222137004, 0.137707811922896, 0.137707811922896, 0.856758704329356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0725497897924803, -0.0725497897924803, -0.114082503006926, 0.290199159169921, 0.290199159169921, 0.678783764252044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.106886784934699, -0.106886784934699, -0.117879559811158, 0.427547139738796, 0.427547139738796, 0.476558850202964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.12427687480303, -0.12427687480303, -0.0351370981311106, 0.497107499212121, 0.497107499212122, 0.289475849312928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118024159433968, -0.118024159433968, 0.14602059695942, 0.472096637735874, 0.472096637735874, 0.145834446436769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0904620313445221, -0.0904620313445222, 0.400974889806951, 0.361848125378089, 0.361848125378089, 0.0562529221259159, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520681667789548, -0.0520681667789548, 0.673648354094182, 0.208272667115819, 0.208272667115819, 0.0139426452320889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0174715919440677, -0.0174715919440677, 0.89385581934052, 0.069886367776271, 0.069886367776271, 0.00131462899507384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.111220764913156, 0.199147545240815, -0.0139969745451025, 0.0376212242756708, 0.0191975441122872, 0.869251425829485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.11712744093234, 0.138353387254742, -0.0633204222137004, 0.182360041368343, 0.0930555824774495, 0.766678852045505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123390493344693, 0.0496584305500788, -0.114082503006926, 0.384297229999675, 0.196101088340167, 0.607416247461698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124438532228507, -0.0392295054602191, -0.117879559811158, 0.566180763465607, 0.288913516011985, 0.426453318022293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.115693653964703, -0.10242452304188, -0.0351370981311106, 0.658296307631358, 0.335918690792885, 0.25904027671345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0957315434920154, -0.124983700466336, 0.14602059695942, 0.625175588699158, 0.319017686772589, 0.130501371527184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0672922852165058, -0.107717329343758, 0.400974889806951, 0.479178618784185, 0.244517631971993, 0.0503384739971351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0367123938445525, -0.0659580060536159, 0.673648354094182, 0.275805792429566, 0.140739541802073, 0.0124767115723477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0119503946879477, -0.0228545687361459, 0.89385581934052, 0.0925472617769848, 0.0472254737755572, 0.00117640853103196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.117926200256799, 0.469179567403589, -0.0139969745451025, 0.0458348888791816, 0.0109838795087765, 0.605924839010355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.114899286714099, 0.368379008292494, -0.0633204222137004, 0.222173849816107, 0.053241774029686, 0.534425076789512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.108535560209716, 0.218811072749179, -0.114082503006926, 0.468199033198482, 0.11219928514136, 0.423408672127621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.097832715867125, 0.0633522680237008, -0.117879559811158, 0.68979234138742, 0.165301938090171, 0.297265728176991, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0823731428393508, -0.0572726959130332, -0.0351370981311106, 0.802019038210068, 0.192195960214175, 0.180567938459251, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0629236064420711, -0.118258218624645, 0.14602059695942, 0.761667228797058, 0.182526046674689, 0.0909679526355481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0416453091360132, -0.118115025239636, 0.400974889806951, 0.58379542846127, 0.139900822294907, 0.0350891938125209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0217842683981575, -0.0771065002271167, 0.673648354094182, 0.336021171337023, 0.0805241628946163, 0.00869708029945337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00691089666918498, -0.0275376915635928, 0.89385581934052, 0.112752669305443, 0.0270200662470991, 0.000820033339716114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0677446508340501, 0.73248610476843, -0.0139969745451025, 0.0521605131201392, 0.00465825526781882, 0.292436752222764, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0643685167481431, 0.594344404299348, -0.0633204222137004, 0.252835826412324, 0.0225797974334692, 0.257928910816702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0584207982847279, 0.387755781585207, -0.114082503006926, 0.532814683556009, 0.0475836347838333, 0.204349201366605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0501901888131676, 0.169506480093244, -0.117879559811158, 0.784989848408957, 0.0701044310686345, 0.14346898905349, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0402186642089491, -0.00600651587688582, -0.0351370981311106, 0.912704832238806, 0.0815101661854369, 0.0871472797927023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0293480093620269, -0.10476961302688, 0.14602059695942, 0.866784112547378, 0.0774091629243695, 0.0439037499577391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0186886214398875, -0.122917573136555, 0.400974889806951, 0.664364414322, 0.0593318364341779, 0.0169350540133137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00949321013009261, -0.084897939255002, 0.673648354094182, 0.38239509563053, 0.0341502386011093, 0.00419746105927381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00295490428996037, -0.0310694222750015, 0.89385581934052, 0.128313545215304, 0.0114591903372382, 0.000395771671900164, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0151980568210128, 0.911503824503568, -0.0139969745451025, 0.0559142203994861, 0.000904547988471949, 0.0608724384745892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0143013636251795, 0.748516734671902, -0.0633204222137004, 0.271031040096239, 0.0043845837495539, 0.0536894273211853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01277205874419, 0.503919749304526, -0.114082503006926, 0.571158446616784, 0.00923987172305857, 0.0425364941067478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0107484488418556, 0.243669811104969, -0.117879559811158, 0.841481280949109, 0.0136129985284828, 0.0298639180704533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00841863576741589, 0.0312005140859397, -0.0351370981311106, 0.978387214710366, 0.015827783713877, 0.0181402213883436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00600560657296086, -0.0933470909128307, 0.14602059695942, 0.929161831596982, 0.0150314438747653, 0.00913882505462386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00374731542318006, -0.124448956730467, 0.400974889806951, 0.712175093109525, 0.0115211576466527, 0.00352513159051911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00187273588177285, -0.0891946787733757, 0.673648354094182, 0.409913982393563, 0.00663135183807573, 0.000873726329327737, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000576553673142188, -0.0331343834327043, 0.89385581934052, 0.137547570340864, 0.00222516521167804, 8.2382212784865e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2_D01[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.87958861576243, 0.0, -0.942350361404494, 0.0627617456420613, 3.82193897716692, -0.0627617456420696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.64350787352246, 0.0, -0.702450441163215, 0.0589425676407498, 3.34595831468568, -0.0589425676407584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.24306887866517, 0.0, -0.295533375348018, 0.0524644966828417, 2.53860225401319, -0.0524644966828505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.717369642459, 0.0, 0.238670319710553, 0.0439600378304381, 1.47869932274846, -0.043960037830448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11785692854118, 0.0, 0.847881604324046, 0.0342614671347647, 0.269975324217143, -0.0342614671347757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.503212949651895, 0.0, 1.47246893878118, 0.0243181115669203, -0.969255989129278, -0.0243181115669328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0663953775217761, 0.0, 2.05129206074016, 0.0151033167816075, -2.11768743826193, -0.0151033167816211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.535203297647715, 0.0, 2.52768408484001, 0.00751921280769774, -3.06288738248771, -0.00751921280771284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.857277628623514, 0.0, 2.85496874846717, 0.00230888015633779, -3.71224637709067, -0.00230888015635433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.61913894975953, 0.0, -0.942350361404493, 0.323211411644955, 3.56148931116403, -0.323211411644964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.39890709165545, 0.0, -0.702450441163215, 0.30354334950776, 3.10135753281867, -0.303543349507769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.02535089618606, 0.0, -0.295533375348018, 0.270182479161953, 2.32088427153408, -0.270182479161963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.53494359529788, 0.0, 0.238670319710553, 0.226386084991566, 1.29627327558733, -0.226386084991577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.975678160555479, 0.0, 0.847881604324046, 0.176440235120469, 0.127796556231438, -0.176440235120481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.402297272902719, 0.0, 1.47246893878118, 0.125233788316096, -1.07017166587845, -0.125233788316108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.129071355875585, 0.0, 2.05129206074016, 0.077779295135417, -2.18036341661574, -0.0777792951354307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.566406643640395, 0.0, 2.52768408484001, 0.0387225588003772, -3.0940907284804, -0.038722558800393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.866859055325593, 0.0, 2.85496874846717, 0.0118903068584162, -3.72182780379275, -0.0118903068584327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18023772539343, 0.0, -0.942350361404493, 0.762112636011054, 3.12258808679793, -0.762112636011064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.98671388638122, 0.0, -0.702450441163215, 0.71573655478199, 2.68916432754444, -0.715736554782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.65845970164893, 0.0, -0.295533375348018, 0.637073673699085, 1.95399307699695, -0.637073673699096, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.22752521122363, 0.0, 0.238670319710553, 0.533804469065811, 0.988854891513082, -0.533804469065823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.736083169686512, 0.0, 0.847881604324046, 0.416035225989437, -0.111798434637529, -0.416035225989449, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.232237488366639, 0.0, 1.47246893878118, 0.295293572852176, -1.24023145041453, -0.295293572852189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.234690856410957, 0.0, 2.05129206074016, 0.183398795670788, -2.28598291715111, -0.183398795670802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.618989497635509, 0.0, 2.52768408484001, 0.0913054127954911, -3.14667358247551, -0.0913054127955067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.883005360964048, 0.0, 2.85496874846717, 0.0280366124968712, -3.73797410943121, -0.0280366124968877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.61033548117358, 0.0, -0.942350361404493, 1.33201488023091, 2.55268584257807, -1.33201488023092, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.45149133584667, 0.0, -0.702450441163215, 1.25095910531654, 2.15394177700989, -1.25095910531655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18206067712307, 0.0, -0.295533375348018, 1.11347269822495, 1.47759405247109, -1.11347269822496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828350141134928, 0.0, 0.238670319710553, 0.932979539154513, 0.589679821424381, -0.932979539154525, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.424975076522104, 0.0, 0.847881604324046, 0.727143319153844, -0.422906527801936, -0.727143319153857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0114191185873457, 0.0, 1.47246893878118, 0.516111942631469, -1.46104982019383, -0.516111942631483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.371835131812385, 0.0, 2.05129206074016, 0.320543071072216, -2.42312719255254, -0.320543071072231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687267016210631, 0.0, 2.52768408484001, 0.159582931370614, -3.21495110105063, -0.159582931370629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.903970934328545, 0.0, 2.85496874846717, 0.0490021858613687, -3.7589396827957, -0.0490021858613852, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.971175180702251, 0.0, -0.942350361404493, 1.97117518070223, 1.91352554210675, -1.97117518070225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.851225220581612, 0.0, -0.702450441163215, 1.8512252205816, 1.55367566174483, -1.85122522058161, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.647766687674014, 0.0, -0.295533375348018, 1.647766687674, 0.943300063022037, -1.64776668767401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.380664840144729, 0.0, 0.238670319710553, 1.38066484014471, 0.141994520434182, -1.38066484014473, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0760591978379831, 0.0, 0.847881604324046, 1.07605919783796, -0.771822406486057, -1.07605919783798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.236234469390583, 0.0, 1.47246893878118, 0.763765530609397, -1.70870340817175, -0.763765530609411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.525646030370074, 0.0, 2.05129206074016, 0.474353969629904, -2.57693809111023, -0.474353969629919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.763842042419997, 0.0, 2.52768408484001, 0.236157957579979, -3.29152612726, -0.236157957579995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.927484374233576, 0.0, 2.85496874846717, 0.0725156257663988, -3.78245312270073, -0.0725156257664159, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.332014880230927, 0.0, -0.942350361404493, 2.61033548117356, 1.27436524163543, -2.61033548117357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250959105316555, 0.0, -0.702450441163215, 2.45149133584665, 0.953409546479777, -2.45149133584667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113472698224962, 0.0, -0.295533375348018, 2.18206067712305, 0.409006073572986, -2.18206067712306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06702046084547, 0.0, 0.238670319710553, 1.82835014113491, -0.305690780556016, -1.82835014113492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.272856680846137, 0.0, 0.847881604324046, 1.42497507652208, -1.12073828517018, -1.4249750765221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.483888057368511, 0.0, 1.47246893878118, 1.01141911858733, -1.95635699614968, -1.01141911858734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.679456928927762, 0.0, 2.05129206074016, 0.628164868187592, -2.73074898966792, -0.628164868187607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.840417068629363, 0.0, 2.52768408484001, 0.312732983789345, -3.36810115346936, -0.312732983789361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.950997814138607, 0.0, 2.85496874846717, 0.0960290656714298, -3.80596656260576, -0.0960290656714469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23788736398893, 0.0, -0.942350361404493, 3.18023772539341, 0.70446299741557, -3.18023772539343, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.284263445217995, 0.0, -0.702450441163215, 2.9867138863812, 0.418186995945227, -2.98671388638122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.362926326300899, 0.0, -0.295533375348018, 2.65845970164891, -0.0673929509528741, -2.65845970164892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.466195530934172, 0.0, 0.238670319710553, 2.22752521122361, -0.704865850644718, -2.22752521122363, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.583964774010545, 0.0, 0.847881604324046, 1.73608316968649, -1.43184637833458, -1.73608316968651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.704706427147804, 0.0, 1.47246893878118, 1.23223748836662, -2.17717536592898, -1.23223748836663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.816601204329191, 0.0, 2.05129206074016, 0.765309143589021, -2.86789326506934, -0.765309143589037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.908694587204485, 0.0, 2.52768408484001, 0.381010502364467, -3.43637867204449, -0.381010502364484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.971963387503104, 0.0, 2.85496874846717, 0.116994639035927, -3.82693213597026, -0.116994639035944, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.676788588355029, 0.0, -0.942350361404493, 3.61913894975951, 0.265561773049472, -3.61913894975953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.696456650492225, 0.0, -0.702450441163215, 3.39890709165543, 0.00599379067099814, -3.39890709165545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729817520838031, 0.0, -0.295533375348018, 3.02535089618604, -0.434284145490005, -3.02535089618606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.773613915008417, 0.0, 0.238670319710553, 2.53494359529786, -1.01228423471896, -2.53494359529787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.823559764879513, 0.0, 0.847881604324045, 1.97567816055546, -1.67144136920355, -1.97567816055548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874766211683885, 0.0, 1.47246893878118, 1.4022972729027, -2.34723515046506, -1.40229727290271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.922220704864562, 0.0, 2.05129206074016, 0.870928644124392, -2.97351276560472, -0.870928644124408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961277441199599, 0.0, 2.52768408484001, 0.433593356359581, -3.4889615260396, -0.433593356359597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.988109693141559, 0.0, 2.85496874846717, 0.133140944674382, -3.84307844160872, -0.133140944674399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.937238254357924, 0.0, -0.942350361404493, 3.87958861576241, 0.00511210704657783, -3.87958861576242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.941057432359235, 0.0, -0.702450441163215, 3.64350787352244, -0.238606991196011, -3.64350787352246, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.947535503317143, 0.0, -0.295533375348018, 3.24306887866515, -0.652002127969117, -3.24306887866517, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.956039962169545, 0.0, 0.238670319710552, 2.71736964245898, -1.19471028188009, -2.717369642459, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965738532865217, 0.0, 0.847881604324045, 2.11785692854116, -1.81362013718926, -2.11785692854118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.97568188843306, 0.0, 1.47246893878118, 1.50321294965187, -2.44815082721423, -1.50321294965189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.984896683218371, 0.0, 2.05129206074016, 0.933604622478201, -3.03618874395852, -0.933604622478217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.992480787192279, 0.0, 2.52768408484001, 0.464796702352261, -3.52016487203228, -0.464796702352278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997691119843638, 0.0, 2.85496874846717, 0.142722371376461, -3.8526598683108, -0.142722371376478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2_D10[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.87958861576242, -0.937238254357931, 0.0, 0.0576496385955054, -0.0576496385955054, 3.81682687012035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.64350787352246, -0.941057432359242, 0.0, 0.297549558836783, -0.297549558836783, 3.5845653058817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.24306887866517, -0.94753550331715, 0.0, 0.704466624651979, -0.704466624651979, 3.19060438198232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.717369642459, -0.956039962169553, 0.0, 1.23867031971055, -1.23867031971055, 2.67340960462855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11785692854118, -0.965738532865224, 0.0, 1.84788160432404, -1.84788160432404, 2.0835954614064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.50321294965189, -0.975681888433067, 0.0, 2.47246893878117, -2.47246893878117, 1.47889483808496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0663953775217807, -0.984896683218378, 0.0, 3.05129206074015, -3.05129206074015, 0.918501305696597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.535203297647719, -0.992480787192286, 0.0, 3.52768408484, -3.52768408484, 0.457277489544567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.857277628623518, -0.997691119843645, 0.0, 3.85496874846715, -3.85496874846715, 0.140413491220126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.61913894975953, -0.676788588355037, 0.0, 0.0576496385955052, -0.0576496385955052, 3.29592753811456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.39890709165545, -0.696456650492232, 0.0, 0.297549558836783, -0.297549558836783, 3.09536374214768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.02535089618605, -0.729817520838038, 0.0, 0.704466624651979, -0.704466624651979, 2.75516841702409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.53494359529787, -0.773613915008424, 0.0, 1.23867031971055, -1.23867031971055, 2.30855751030629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.975678160555475, -0.82355976487952, 0.0, 1.84788160432404, -1.84788160432404, 1.79923792543499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.402297272902715, -0.874766211683892, 0.0, 2.47246893878117, -2.47246893878117, 1.27706348458661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12907135587559, -0.922220704864569, 0.0, 3.05129206074015, -3.05129206074015, 0.793149348988978, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.566406643640399, -0.961277441199606, 0.0, 3.52768408484, -3.52768408484, 0.394870797559207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.866859055325596, -0.988109693141566, 0.0, 3.85496874846715, -3.85496874846715, 0.121250637815969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18023772539343, -0.237887363988938, 0.0, 0.0576496385955051, -0.0576496385955051, 2.41812508938237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.98671388638121, -0.284263445218001, 0.0, 0.297549558836783, -0.297549558836783, 2.27097733159922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.65845970164892, -0.362926326300906, 0.0, 0.704466624651979, -0.704466624651979, 2.02138602794983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.22752521122363, -0.466195530934178, 0.0, 1.23867031971055, -1.23867031971055, 1.6937207421578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.736083169686507, -0.583964774010552, 0.0, 1.84788160432404, -1.84788160432404, 1.32004794369706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.232237488366634, -0.704706427147811, 0.0, 2.47246893878117, -2.47246893878117, 0.936943915514445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.234690856410961, -0.816601204329197, 0.0, 3.05129206074015, -3.05129206074015, 0.581910347918236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.618989497635513, -0.908694587204492, 0.0, 3.52768408484, -3.52768408484, 0.289705089568979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.883005360964051, -0.971963387503111, 0.0, 3.85496874846715, -3.85496874846715, 0.0889580265390593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.61033548117357, 0.33201488023092, 0.0, 0.057649638595505, -0.057649638595505, 1.27832060094265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.45149133584666, 0.250959105316548, 0.0, 0.297549558836783, -0.297549558836783, 1.20053223053012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18206067712306, 0.113472698224956, 0.0, 0.704466624651979, -0.704466624651979, 1.06858797889811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828350141134923, -0.0670204608454761, 0.0, 1.23867031971055, -1.23867031971055, 0.895370601980399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.424975076522099, -0.272856680846144, 0.0, 1.84788160432404, -1.84788160432404, 0.697831757368242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0114191185873411, -0.483888057368517, 0.0, 2.47246893878117, -2.47246893878117, 0.495307175955858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.37183513181239, -0.679456928927769, 0.0, 3.05129206074015, -3.05129206074015, 0.307621797115378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687267016210635, -0.84041706862937, 0.0, 3.52768408484, -3.52768408484, 0.153150052418734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.903970934328549, -0.950997814138614, 0.0, 3.85496874846715, -3.85496874846715, 0.0470268798100645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.971175180702246, 0.971175180702245, 0.0, 0.0576496385955049, -0.0576496385955049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.851225220581607, 0.851225220581606, 0.0, 0.297549558836783, -0.297549558836783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.647766687674008, 0.647766687674008, 0.0, 0.704466624651979, -0.704466624651979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.380664840144724, 0.380664840144724, 0.0, 1.23867031971055, -1.23867031971055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0760591978379779, 0.0760591978379777, 0.0, 1.84788160432404, -1.84788160432404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.236234469390588, -0.236234469390588, 0.0, 2.47246893878117, -2.47246893878117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.525646030370078, -0.52564603037008, 0.0, 3.05129206074015, -3.05129206074015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.763842042420001, -0.763842042420004, 0.0, 3.52768408484, -3.52768408484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.92748437423358, -0.927484374233583, 0.0, 3.85496874846715, -3.85496874846715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.33201488023092, 1.61033548117357, 0.0, 0.0576496385955048, -0.0576496385955048, -1.27832060094265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250959105316549, 1.45149133584666, 0.0, 0.297549558836783, -0.297549558836783, -1.20053223053012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113472698224956, 1.18206067712306, 0.0, 0.704466624651979, -0.704466624651979, -1.06858797889811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0670204608454757, 0.828350141134924, 0.0, 1.23867031971055, -1.23867031971055, -0.8953706019804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.272856680846143, 0.424975076522099, 0.0, 1.84788160432404, -1.84788160432404, -0.697831757368242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.483888057368516, 0.0114191185873403, 0.0, 2.47246893878117, -2.47246893878117, -0.495307175955857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.679456928927767, -0.371835131812392, 0.0, 3.05129206074015, -3.05129206074015, -0.307621797115375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.840417068629367, -0.687267016210638, 0.0, 3.52768408484, -3.52768408484, -0.153150052418729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.950997814138611, -0.903970934328552, 0.0, 3.85496874846715, -3.85496874846715, -0.0470268798100591, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.237887363988937, 2.18023772539343, 0.0, 0.0576496385955048, -0.0576496385955048, -2.41812508938237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.284263445218002, 1.98671388638121, 0.0, 0.297549558836783, -0.297549558836783, -2.27097733159922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.362926326300906, 1.65845970164892, 0.0, 0.704466624651979, -0.704466624651979, -2.02138602794983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.466195530934179, 1.22752521122363, 0.0, 1.23867031971055, -1.23867031971055, -1.69372074215781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.583964774010551, 0.736083169686507, 0.0, 1.84788160432404, -1.84788160432404, -1.32004794369706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.70470642714781, 0.232237488366634, 0.0, 2.47246893878117, -2.47246893878117, -0.936943915514444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.816601204329196, -0.234690856410962, 0.0, 3.05129206074015, -3.05129206074015, -0.581910347918234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.908694587204489, -0.618989497635515, 0.0, 3.52768408484, -3.52768408484, -0.289705089568975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.971963387503108, -0.883005360964055, 0.0, 3.85496874846715, -3.85496874846715, -0.0889580265390538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.676788588355037, 2.61913894975953, 0.0, 0.0576496385955046, -0.0576496385955046, -3.29592753811456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.696456650492233, 2.39890709165545, 0.0, 0.297549558836783, -0.297549558836783, -3.09536374214768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729817520838039, 2.02535089618606, 0.0, 0.704466624651979, -0.704466624651979, -2.75516841702409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.773613915008424, 1.53494359529787, 0.0, 1.23867031971055, -1.23867031971055, -2.3085575103063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.82355976487952, 0.975678160555476, 0.0, 1.84788160432404, -1.84788160432404, -1.799237925435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874766211683891, 0.402297272902715, 0.0, 2.47246893878117, -2.47246893878117, -1.27706348458661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.922220704864567, -0.129071355875591, 0.0, 3.05129206074015, -3.05129206074015, -0.793149348988976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961277441199603, -0.566406643640402, 0.0, 3.52768408484, -3.52768408484, -0.394870797559202, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.988109693141563, -0.8668590553256, 0.0, 3.85496874846715, -3.85496874846715, -0.121250637815964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.937238254357933, 2.87958861576242, 0.0, 0.0576496385955044, -0.0576496385955044, -3.81682687012036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.941057432359243, 2.64350787352246, 0.0, 0.297549558836783, -0.297549558836783, -3.5845653058817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.947535503317151, 2.24306887866517, 0.0, 0.704466624651979, -0.704466624651979, -3.19060438198232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.956039962169553, 1.717369642459, 0.0, 1.23867031971055, -1.23867031971055, -2.67340960462855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965738532865224, 1.11785692854118, 0.0, 1.84788160432404, -1.84788160432404, -2.0835954614064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975681888433066, 0.50321294965189, 0.0, 2.47246893878117, -2.47246893878117, -1.47889483808496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.984896683218376, -0.0663953775217816, 0.0, 3.05129206074015, -3.05129206074015, -0.918501305696595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.992480787192283, -0.535203297647721, 0.0, 3.52768408484, -3.52768408484, -0.457277489544563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997691119843641, -0.857277628623521, 0.0, 3.85496874846715, -3.85496874846715, -0.140413491220121, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C3[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.911503824503568, -0.0151980568210128, -0.0139969745451025, 0.00090454798847206, 0.055914220399486, 0.0608724384745895, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.748516734671902, -0.0143013636251795, -0.0633204222137004, 0.00438458374955394, 0.271031040096239, 0.0536894273211853, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.503919749304526, -0.01277205874419, -0.114082503006926, 0.00923987172305858, 0.571158446616784, 0.0425364941067478, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.243669811104969, -0.0107484488418556, -0.117879559811158, 0.0136129985284827, 0.841481280949109, 0.0298639180704533, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312005140859399, -0.00841863576741578, -0.0351370981311106, 0.0158277837138768, 0.978387214710366, 0.0181402213883435, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0933470909128306, -0.00600560657296083, 0.14602059695942, 0.0150314438747653, 0.929161831596982, 0.00913882505462386, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124448956730467, -0.00374731542317999, 0.400974889806951, 0.0115211576466527, 0.712175093109525, 0.00352513159051911, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0891946787733756, -0.00187273588177278, 0.673648354094182, 0.00663135183807551, 0.409913982393563, 0.000873726329327792, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0331343834327043, -0.000576553673142161, 0.89385581934052, 0.00222516521167826, 0.137547570340864, 8.2382212784865e-05, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.73248610476843, -0.06774465083405, -0.0139969745451025, 0.00465825526781882, 0.0521605131201392, 0.292436752222764, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.594344404299348, -0.0643685167481431, -0.0633204222137004, 0.0225797974334692, 0.252835826412324, 0.257928910816702, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.387755781585207, -0.0584207982847279, -0.114082503006926, 0.0475836347838333, 0.532814683556009, 0.204349201366605, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.169506480093244, -0.0501901888131676, -0.117879559811158, 0.0701044310686345, 0.784989848408957, 0.14346898905349, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00600651587688565, -0.040218664208949, -0.0351370981311106, 0.0815101661854369, 0.912704832238806, 0.0871472797927023, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10476961302688, -0.0293480093620269, 0.14602059695942, 0.0774091629243696, 0.866784112547378, 0.0439037499577392, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.122917573136554, -0.0186886214398875, 0.400974889806951, 0.0593318364341778, 0.664364414322, 0.0169350540133137, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.084897939255002, -0.00949321013009255, 0.673648354094182, 0.0341502386011091, 0.38239509563053, 0.00419746105927378, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0310694222750014, -0.0029549042899604, 0.89385581934052, 0.0114591903372385, 0.128313545215303, 0.000395771671900164, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.469179567403589, -0.117926200256799, -0.0139969745451025, 0.0109838795087765, 0.0458348888791815, 0.605924839010355, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.368379008292494, -0.114899286714099, -0.0633204222137004, 0.0532417740296861, 0.222173849816107, 0.534425076789513, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.218811072749179, -0.108535560209716, -0.114082503006926, 0.11219928514136, 0.468199033198482, 0.423408672127621, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0633522680237009, -0.0978327158671251, -0.117879559811158, 0.165301938090171, 0.68979234138742, 0.297265728176991, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0572726959130331, -0.0823731428393508, -0.0351370981311106, 0.192195960214175, 0.802019038210068, 0.180567938459251, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118258218624645, -0.0629236064420711, 0.14602059695942, 0.182526046674689, 0.761667228797058, 0.0909679526355481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118115025239636, -0.0416453091360132, 0.400974889806951, 0.139900822294907, 0.58379542846127, 0.0350891938125209, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0771065002271167, -0.0217842683981574, 0.673648354094182, 0.080524162894616, 0.336021171337023, 0.00869708029945335, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0275376915635927, -0.00691089666918501, 0.89385581934052, 0.0270200662470993, 0.112752669305443, 0.000820033339716114, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.199147545240815, -0.111220764913156, -0.0139969745451025, 0.0191975441122872, 0.0376212242756708, 0.869251425829485, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.138353387254742, -0.11712744093234, -0.0633204222137004, 0.0930555824774495, 0.182360041368343, 0.766678852045505, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0496584305500789, -0.123390493344693, -0.114082503006926, 0.196101088340167, 0.384297229999675, 0.607416247461698, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0392295054602189, -0.124438532228508, -0.117879559811158, 0.288913516011985, 0.566180763465607, 0.426453318022293, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.102424523041879, -0.115693653964703, -0.0351370981311106, 0.335918690792885, 0.658296307631358, 0.25904027671345, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124983700466336, -0.0957315434920154, 0.14602059695942, 0.319017686772589, 0.625175588699158, 0.130501371527184, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.107717329343758, -0.0672922852165058, 0.400974889806951, 0.244517631971993, 0.479178618784185, 0.0503384739971351, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.065958006053616, -0.0367123938445524, 0.673648354094182, 0.140739541802073, 0.275805792429566, 0.0124767115723476, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0228545687361459, -0.0119503946879477, 0.89385581934052, 0.0472254737755574, 0.0925472617769846, 0.00117640853103196, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00710234604849471, -0.00710234604849473, -0.0139969745451025, 0.028409384193979, 0.028409384193979, 0.971382898254134, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0344269529807241, -0.0344269529807241, -0.0633204222137004, 0.137707811922896, 0.137707811922896, 0.856758704329356, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0725497897924803, -0.0725497897924803, -0.114082503006926, 0.290199159169921, 0.290199159169921, 0.678783764252044, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.106886784934699, -0.106886784934699, -0.117879559811158, 0.427547139738796, 0.427547139738796, 0.476558850202964, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.12427687480303, -0.12427687480303, -0.0351370981311106, 0.497107499212121, 0.497107499212122, 0.289475849312928, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118024159433968, -0.118024159433968, 0.14602059695942, 0.472096637735874, 0.472096637735874, 0.145834446436769, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0904620313445221, -0.0904620313445222, 0.400974889806951, 0.361848125378089, 0.361848125378089, 0.0562529221259159, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520681667789548, -0.0520681667789548, 0.673648354094182, 0.208272667115819, 0.208272667115819, 0.0139426452320889, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0174715919440677, -0.0174715919440677, 0.89385581934052, 0.069886367776271, 0.069886367776271, 0.00131462899507384, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.111220764913156, 0.199147545240815, -0.0139969745451025, 0.0376212242756708, 0.0191975441122872, 0.869251425829485, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.11712744093234, 0.138353387254742, -0.0633204222137004, 0.182360041368343, 0.0930555824774495, 0.766678852045505, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123390493344693, 0.0496584305500788, -0.114082503006926, 0.384297229999675, 0.196101088340167, 0.607416247461698, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124438532228507, -0.0392295054602191, -0.117879559811158, 0.566180763465607, 0.288913516011985, 0.426453318022293, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.115693653964703, -0.10242452304188, -0.0351370981311106, 0.658296307631358, 0.335918690792885, 0.25904027671345, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0957315434920154, -0.124983700466336, 0.14602059695942, 0.625175588699158, 0.319017686772589, 0.130501371527184, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0672922852165058, -0.107717329343758, 0.400974889806951, 0.479178618784185, 0.244517631971993, 0.0503384739971351, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0367123938445525, -0.0659580060536159, 0.673648354094182, 0.275805792429566, 0.140739541802073, 0.0124767115723477, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0119503946879477, -0.0228545687361459, 0.89385581934052, 0.0925472617769848, 0.0472254737755572, 0.00117640853103196, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.117926200256799, 0.469179567403589, -0.0139969745451025, 0.0458348888791816, 0.0109838795087765, 0.605924839010355, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.114899286714099, 0.368379008292494, -0.0633204222137004, 0.222173849816107, 0.053241774029686, 0.534425076789512, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.108535560209716, 0.218811072749179, -0.114082503006926, 0.468199033198482, 0.11219928514136, 0.423408672127621, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.097832715867125, 0.0633522680237008, -0.117879559811158, 0.68979234138742, 0.165301938090171, 0.297265728176991, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0823731428393508, -0.0572726959130332, -0.0351370981311106, 0.802019038210068, 0.192195960214175, 0.180567938459251, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0629236064420711, -0.118258218624645, 0.14602059695942, 0.761667228797058, 0.182526046674689, 0.0909679526355481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0416453091360132, -0.118115025239636, 0.400974889806951, 0.58379542846127, 0.139900822294907, 0.0350891938125209, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0217842683981575, -0.0771065002271167, 0.673648354094182, 0.336021171337023, 0.0805241628946163, 0.00869708029945337, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00691089666918498, -0.0275376915635928, 0.89385581934052, 0.112752669305443, 0.0270200662470991, 0.000820033339716114, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0677446508340501, 0.73248610476843, -0.0139969745451025, 0.0521605131201392, 0.00465825526781882, 0.292436752222764, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0643685167481431, 0.594344404299348, -0.0633204222137004, 0.252835826412324, 0.0225797974334692, 0.257928910816702, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0584207982847279, 0.387755781585207, -0.114082503006926, 0.532814683556009, 0.0475836347838333, 0.204349201366605, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0501901888131676, 0.169506480093244, -0.117879559811158, 0.784989848408957, 0.0701044310686345, 0.14346898905349, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0402186642089491, -0.00600651587688582, -0.0351370981311106, 0.912704832238806, 0.0815101661854369, 0.0871472797927023, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0293480093620269, -0.10476961302688, 0.14602059695942, 0.866784112547378, 0.0774091629243695, 0.0439037499577391, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0186886214398875, -0.122917573136555, 0.400974889806951, 0.664364414322, 0.0593318364341779, 0.0169350540133137, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00949321013009261, -0.084897939255002, 0.673648354094182, 0.38239509563053, 0.0341502386011093, 0.00419746105927381, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00295490428996037, -0.0310694222750015, 0.89385581934052, 0.128313545215304, 0.0114591903372382, 0.000395771671900164, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0151980568210128, 0.911503824503568, -0.0139969745451025, 0.0559142203994861, 0.000904547988471949, 0.0608724384745892, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0143013636251795, 0.748516734671902, -0.0633204222137004, 0.271031040096239, 0.0043845837495539, 0.0536894273211853, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01277205874419, 0.503919749304526, -0.114082503006926, 0.571158446616784, 0.00923987172305857, 0.0425364941067478, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0107484488418556, 0.243669811104969, -0.117879559811158, 0.841481280949109, 0.0136129985284828, 0.0298639180704533, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00841863576741589, 0.0312005140859397, -0.0351370981311106, 0.978387214710366, 0.015827783713877, 0.0181402213883436, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00600560657296086, -0.0933470909128307, 0.14602059695942, 0.929161831596982, 0.0150314438747653, 0.00913882505462386, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00374731542318006, -0.124448956730467, 0.400974889806951, 0.712175093109525, 0.0115211576466527, 0.00352513159051911, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00187273588177285, -0.0891946787733757, 0.673648354094182, 0.409913982393563, 0.00663135183807573, 0.000873726329327737, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000576553673142188, -0.0331343834327043, 0.89385581934052, 0.137547570340864, 0.00222516521167804, 8.2382212784865e-05, 0.0, 0.0, 0.0}};
    
    static const double FE1_C3_D01[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.87958861576243, 0.0, -0.942350361404494, 0.0627617456420613, 3.82193897716692, -0.0627617456420696, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.64350787352246, 0.0, -0.702450441163215, 0.0589425676407498, 3.34595831468568, -0.0589425676407584, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.24306887866517, 0.0, -0.295533375348018, 0.0524644966828417, 2.53860225401319, -0.0524644966828505, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.717369642459, 0.0, 0.238670319710553, 0.0439600378304381, 1.47869932274846, -0.043960037830448, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11785692854118, 0.0, 0.847881604324046, 0.0342614671347647, 0.269975324217143, -0.0342614671347757, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.503212949651895, 0.0, 1.47246893878118, 0.0243181115669203, -0.969255989129278, -0.0243181115669328, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0663953775217761, 0.0, 2.05129206074016, 0.0151033167816075, -2.11768743826193, -0.0151033167816211, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.535203297647715, 0.0, 2.52768408484001, 0.00751921280769774, -3.06288738248771, -0.00751921280771284, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.857277628623514, 0.0, 2.85496874846717, 0.00230888015633779, -3.71224637709067, -0.00230888015635433, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.61913894975953, 0.0, -0.942350361404493, 0.323211411644955, 3.56148931116403, -0.323211411644964, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.39890709165545, 0.0, -0.702450441163215, 0.30354334950776, 3.10135753281867, -0.303543349507769, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.02535089618606, 0.0, -0.295533375348018, 0.270182479161953, 2.32088427153408, -0.270182479161963, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.53494359529788, 0.0, 0.238670319710553, 0.226386084991566, 1.29627327558733, -0.226386084991577, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.975678160555479, 0.0, 0.847881604324046, 0.176440235120469, 0.127796556231438, -0.176440235120481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.402297272902719, 0.0, 1.47246893878118, 0.125233788316096, -1.07017166587845, -0.125233788316108, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.129071355875585, 0.0, 2.05129206074016, 0.077779295135417, -2.18036341661574, -0.0777792951354307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.566406643640395, 0.0, 2.52768408484001, 0.0387225588003772, -3.0940907284804, -0.038722558800393, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.866859055325593, 0.0, 2.85496874846717, 0.0118903068584162, -3.72182780379275, -0.0118903068584327, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18023772539343, 0.0, -0.942350361404493, 0.762112636011054, 3.12258808679793, -0.762112636011064, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.98671388638122, 0.0, -0.702450441163215, 0.71573655478199, 2.68916432754444, -0.715736554782, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.65845970164893, 0.0, -0.295533375348018, 0.637073673699085, 1.95399307699695, -0.637073673699096, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.22752521122363, 0.0, 0.238670319710553, 0.533804469065811, 0.988854891513082, -0.533804469065823, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.736083169686512, 0.0, 0.847881604324046, 0.416035225989437, -0.111798434637529, -0.416035225989449, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.232237488366639, 0.0, 1.47246893878118, 0.295293572852176, -1.24023145041453, -0.295293572852189, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.234690856410957, 0.0, 2.05129206074016, 0.183398795670788, -2.28598291715111, -0.183398795670802, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.618989497635509, 0.0, 2.52768408484001, 0.0913054127954911, -3.14667358247551, -0.0913054127955067, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.883005360964048, 0.0, 2.85496874846717, 0.0280366124968712, -3.73797410943121, -0.0280366124968877, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.61033548117358, 0.0, -0.942350361404493, 1.33201488023091, 2.55268584257807, -1.33201488023092, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.45149133584667, 0.0, -0.702450441163215, 1.25095910531654, 2.15394177700989, -1.25095910531655, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18206067712307, 0.0, -0.295533375348018, 1.11347269822495, 1.47759405247109, -1.11347269822496, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828350141134928, 0.0, 0.238670319710553, 0.932979539154513, 0.589679821424381, -0.932979539154525, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.424975076522104, 0.0, 0.847881604324046, 0.727143319153844, -0.422906527801936, -0.727143319153857, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0114191185873457, 0.0, 1.47246893878118, 0.516111942631469, -1.46104982019383, -0.516111942631483, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.371835131812385, 0.0, 2.05129206074016, 0.320543071072216, -2.42312719255254, -0.320543071072231, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687267016210631, 0.0, 2.52768408484001, 0.159582931370614, -3.21495110105063, -0.159582931370629, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.903970934328545, 0.0, 2.85496874846717, 0.0490021858613687, -3.7589396827957, -0.0490021858613852, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.971175180702251, 0.0, -0.942350361404493, 1.97117518070223, 1.91352554210675, -1.97117518070225, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.851225220581612, 0.0, -0.702450441163215, 1.8512252205816, 1.55367566174483, -1.85122522058161, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.647766687674014, 0.0, -0.295533375348018, 1.647766687674, 0.943300063022037, -1.64776668767401, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.380664840144729, 0.0, 0.238670319710553, 1.38066484014471, 0.141994520434182, -1.38066484014473, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0760591978379831, 0.0, 0.847881604324046, 1.07605919783796, -0.771822406486057, -1.07605919783798, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.236234469390583, 0.0, 1.47246893878118, 0.763765530609397, -1.70870340817175, -0.763765530609411, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.525646030370074, 0.0, 2.05129206074016, 0.474353969629904, -2.57693809111023, -0.474353969629919, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.763842042419997, 0.0, 2.52768408484001, 0.236157957579979, -3.29152612726, -0.236157957579995, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.927484374233576, 0.0, 2.85496874846717, 0.0725156257663988, -3.78245312270073, -0.0725156257664159, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.332014880230927, 0.0, -0.942350361404493, 2.61033548117356, 1.27436524163543, -2.61033548117357, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250959105316555, 0.0, -0.702450441163215, 2.45149133584665, 0.953409546479777, -2.45149133584667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113472698224962, 0.0, -0.295533375348018, 2.18206067712305, 0.409006073572986, -2.18206067712306, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06702046084547, 0.0, 0.238670319710553, 1.82835014113491, -0.305690780556016, -1.82835014113492, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.272856680846137, 0.0, 0.847881604324046, 1.42497507652208, -1.12073828517018, -1.4249750765221, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.483888057368511, 0.0, 1.47246893878118, 1.01141911858733, -1.95635699614968, -1.01141911858734, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.679456928927762, 0.0, 2.05129206074016, 0.628164868187592, -2.73074898966792, -0.628164868187607, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.840417068629363, 0.0, 2.52768408484001, 0.312732983789345, -3.36810115346936, -0.312732983789361, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.950997814138607, 0.0, 2.85496874846717, 0.0960290656714298, -3.80596656260576, -0.0960290656714469, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23788736398893, 0.0, -0.942350361404493, 3.18023772539341, 0.70446299741557, -3.18023772539343, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.284263445217995, 0.0, -0.702450441163215, 2.9867138863812, 0.418186995945227, -2.98671388638122, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.362926326300899, 0.0, -0.295533375348018, 2.65845970164891, -0.0673929509528741, -2.65845970164892, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.466195530934172, 0.0, 0.238670319710553, 2.22752521122361, -0.704865850644718, -2.22752521122363, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.583964774010545, 0.0, 0.847881604324046, 1.73608316968649, -1.43184637833458, -1.73608316968651, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.704706427147804, 0.0, 1.47246893878118, 1.23223748836662, -2.17717536592898, -1.23223748836663, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.816601204329191, 0.0, 2.05129206074016, 0.765309143589021, -2.86789326506934, -0.765309143589037, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.908694587204485, 0.0, 2.52768408484001, 0.381010502364467, -3.43637867204449, -0.381010502364484, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.971963387503104, 0.0, 2.85496874846717, 0.116994639035927, -3.82693213597026, -0.116994639035944, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.676788588355029, 0.0, -0.942350361404493, 3.61913894975951, 0.265561773049472, -3.61913894975953, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.696456650492225, 0.0, -0.702450441163215, 3.39890709165543, 0.00599379067099814, -3.39890709165545, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729817520838031, 0.0, -0.295533375348018, 3.02535089618604, -0.434284145490005, -3.02535089618606, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.773613915008417, 0.0, 0.238670319710553, 2.53494359529786, -1.01228423471896, -2.53494359529787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.823559764879513, 0.0, 0.847881604324045, 1.97567816055546, -1.67144136920355, -1.97567816055548, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874766211683885, 0.0, 1.47246893878118, 1.4022972729027, -2.34723515046506, -1.40229727290271, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.922220704864562, 0.0, 2.05129206074016, 0.870928644124392, -2.97351276560472, -0.870928644124408, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961277441199599, 0.0, 2.52768408484001, 0.433593356359581, -3.4889615260396, -0.433593356359597, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.988109693141559, 0.0, 2.85496874846717, 0.133140944674382, -3.84307844160872, -0.133140944674399, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.937238254357924, 0.0, -0.942350361404493, 3.87958861576241, 0.00511210704657783, -3.87958861576242, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.941057432359235, 0.0, -0.702450441163215, 3.64350787352244, -0.238606991196011, -3.64350787352246, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.947535503317143, 0.0, -0.295533375348018, 3.24306887866515, -0.652002127969117, -3.24306887866517, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.956039962169545, 0.0, 0.238670319710552, 2.71736964245898, -1.19471028188009, -2.717369642459, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965738532865217, 0.0, 0.847881604324045, 2.11785692854116, -1.81362013718926, -2.11785692854118, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.97568188843306, 0.0, 1.47246893878118, 1.50321294965187, -2.44815082721423, -1.50321294965189, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.984896683218371, 0.0, 2.05129206074016, 0.933604622478201, -3.03618874395852, -0.933604622478217, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.992480787192279, 0.0, 2.52768408484001, 0.464796702352261, -3.52016487203228, -0.464796702352278, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997691119843638, 0.0, 2.85496874846717, 0.142722371376461, -3.8526598683108, -0.142722371376478, 0.0, 0.0, 0.0}};
    
    static const double FE1_C3_D10[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.87958861576242, -0.937238254357931, 0.0, 0.0576496385955054, -0.0576496385955054, 3.81682687012035, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.64350787352246, -0.941057432359242, 0.0, 0.297549558836783, -0.297549558836783, 3.5845653058817, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.24306887866517, -0.94753550331715, 0.0, 0.704466624651979, -0.704466624651979, 3.19060438198232, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.717369642459, -0.956039962169553, 0.0, 1.23867031971055, -1.23867031971055, 2.67340960462855, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11785692854118, -0.965738532865224, 0.0, 1.84788160432404, -1.84788160432404, 2.0835954614064, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.50321294965189, -0.975681888433067, 0.0, 2.47246893878117, -2.47246893878117, 1.47889483808496, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0663953775217807, -0.984896683218378, 0.0, 3.05129206074015, -3.05129206074015, 0.918501305696597, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.535203297647719, -0.992480787192286, 0.0, 3.52768408484, -3.52768408484, 0.457277489544567, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.857277628623518, -0.997691119843645, 0.0, 3.85496874846715, -3.85496874846715, 0.140413491220126, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.61913894975953, -0.676788588355037, 0.0, 0.0576496385955052, -0.0576496385955052, 3.29592753811456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.39890709165545, -0.696456650492232, 0.0, 0.297549558836783, -0.297549558836783, 3.09536374214768, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.02535089618605, -0.729817520838038, 0.0, 0.704466624651979, -0.704466624651979, 2.75516841702409, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.53494359529787, -0.773613915008424, 0.0, 1.23867031971055, -1.23867031971055, 2.30855751030629, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.975678160555475, -0.82355976487952, 0.0, 1.84788160432404, -1.84788160432404, 1.79923792543499, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.402297272902715, -0.874766211683892, 0.0, 2.47246893878117, -2.47246893878117, 1.27706348458661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12907135587559, -0.922220704864569, 0.0, 3.05129206074015, -3.05129206074015, 0.793149348988978, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.566406643640399, -0.961277441199606, 0.0, 3.52768408484, -3.52768408484, 0.394870797559207, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.866859055325596, -0.988109693141566, 0.0, 3.85496874846715, -3.85496874846715, 0.121250637815969, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18023772539343, -0.237887363988938, 0.0, 0.0576496385955051, -0.0576496385955051, 2.41812508938237, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.98671388638121, -0.284263445218001, 0.0, 0.297549558836783, -0.297549558836783, 2.27097733159922, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.65845970164892, -0.362926326300906, 0.0, 0.704466624651979, -0.704466624651979, 2.02138602794983, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.22752521122363, -0.466195530934178, 0.0, 1.23867031971055, -1.23867031971055, 1.6937207421578, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.736083169686507, -0.583964774010552, 0.0, 1.84788160432404, -1.84788160432404, 1.32004794369706, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.232237488366634, -0.704706427147811, 0.0, 2.47246893878117, -2.47246893878117, 0.936943915514445, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.234690856410961, -0.816601204329197, 0.0, 3.05129206074015, -3.05129206074015, 0.581910347918236, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.618989497635513, -0.908694587204492, 0.0, 3.52768408484, -3.52768408484, 0.289705089568979, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.883005360964051, -0.971963387503111, 0.0, 3.85496874846715, -3.85496874846715, 0.0889580265390593, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.61033548117357, 0.33201488023092, 0.0, 0.057649638595505, -0.057649638595505, 1.27832060094265, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.45149133584666, 0.250959105316548, 0.0, 0.297549558836783, -0.297549558836783, 1.20053223053012, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18206067712306, 0.113472698224956, 0.0, 0.704466624651979, -0.704466624651979, 1.06858797889811, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828350141134923, -0.0670204608454761, 0.0, 1.23867031971055, -1.23867031971055, 0.895370601980399, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.424975076522099, -0.272856680846144, 0.0, 1.84788160432404, -1.84788160432404, 0.697831757368242, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0114191185873411, -0.483888057368517, 0.0, 2.47246893878117, -2.47246893878117, 0.495307175955858, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.37183513181239, -0.679456928927769, 0.0, 3.05129206074015, -3.05129206074015, 0.307621797115378, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687267016210635, -0.84041706862937, 0.0, 3.52768408484, -3.52768408484, 0.153150052418734, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.903970934328549, -0.950997814138614, 0.0, 3.85496874846715, -3.85496874846715, 0.0470268798100645, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.971175180702246, 0.971175180702245, 0.0, 0.0576496385955049, -0.0576496385955049, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.851225220581607, 0.851225220581606, 0.0, 0.297549558836783, -0.297549558836783, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.647766687674008, 0.647766687674008, 0.0, 0.704466624651979, -0.704466624651979, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.380664840144724, 0.380664840144724, 0.0, 1.23867031971055, -1.23867031971055, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0760591978379779, 0.0760591978379777, 0.0, 1.84788160432404, -1.84788160432404, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.236234469390588, -0.236234469390588, 0.0, 2.47246893878117, -2.47246893878117, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.525646030370078, -0.52564603037008, 0.0, 3.05129206074015, -3.05129206074015, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.763842042420001, -0.763842042420004, 0.0, 3.52768408484, -3.52768408484, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.92748437423358, -0.927484374233583, 0.0, 3.85496874846715, -3.85496874846715, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.33201488023092, 1.61033548117357, 0.0, 0.0576496385955048, -0.0576496385955048, -1.27832060094265, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.250959105316549, 1.45149133584666, 0.0, 0.297549558836783, -0.297549558836783, -1.20053223053012, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113472698224956, 1.18206067712306, 0.0, 0.704466624651979, -0.704466624651979, -1.06858797889811, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0670204608454757, 0.828350141134924, 0.0, 1.23867031971055, -1.23867031971055, -0.8953706019804, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.272856680846143, 0.424975076522099, 0.0, 1.84788160432404, -1.84788160432404, -0.697831757368242, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.483888057368516, 0.0114191185873403, 0.0, 2.47246893878117, -2.47246893878117, -0.495307175955857, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.679456928927767, -0.371835131812392, 0.0, 3.05129206074015, -3.05129206074015, -0.307621797115375, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.840417068629367, -0.687267016210638, 0.0, 3.52768408484, -3.52768408484, -0.153150052418729, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.950997814138611, -0.903970934328552, 0.0, 3.85496874846715, -3.85496874846715, -0.0470268798100591, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.237887363988937, 2.18023772539343, 0.0, 0.0576496385955048, -0.0576496385955048, -2.41812508938237, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.284263445218002, 1.98671388638121, 0.0, 0.297549558836783, -0.297549558836783, -2.27097733159922, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.362926326300906, 1.65845970164892, 0.0, 0.704466624651979, -0.704466624651979, -2.02138602794983, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.466195530934179, 1.22752521122363, 0.0, 1.23867031971055, -1.23867031971055, -1.69372074215781, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.583964774010551, 0.736083169686507, 0.0, 1.84788160432404, -1.84788160432404, -1.32004794369706, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.70470642714781, 0.232237488366634, 0.0, 2.47246893878117, -2.47246893878117, -0.936943915514444, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.816601204329196, -0.234690856410962, 0.0, 3.05129206074015, -3.05129206074015, -0.581910347918234, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.908694587204489, -0.618989497635515, 0.0, 3.52768408484, -3.52768408484, -0.289705089568975, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.971963387503108, -0.883005360964055, 0.0, 3.85496874846715, -3.85496874846715, -0.0889580265390538, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.676788588355037, 2.61913894975953, 0.0, 0.0576496385955046, -0.0576496385955046, -3.29592753811456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.696456650492233, 2.39890709165545, 0.0, 0.297549558836783, -0.297549558836783, -3.09536374214768, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729817520838039, 2.02535089618606, 0.0, 0.704466624651979, -0.704466624651979, -2.75516841702409, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.773613915008424, 1.53494359529787, 0.0, 1.23867031971055, -1.23867031971055, -2.3085575103063, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.82355976487952, 0.975678160555476, 0.0, 1.84788160432404, -1.84788160432404, -1.799237925435, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874766211683891, 0.402297272902715, 0.0, 2.47246893878117, -2.47246893878117, -1.27706348458661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.922220704864567, -0.129071355875591, 0.0, 3.05129206074015, -3.05129206074015, -0.793149348988976, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961277441199603, -0.566406643640402, 0.0, 3.52768408484, -3.52768408484, -0.394870797559202, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.988109693141563, -0.8668590553256, 0.0, 3.85496874846715, -3.85496874846715, -0.121250637815964, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.937238254357933, 2.87958861576242, 0.0, 0.0576496385955044, -0.0576496385955044, -3.81682687012036, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.941057432359243, 2.64350787352246, 0.0, 0.297549558836783, -0.297549558836783, -3.5845653058817, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.947535503317151, 2.24306887866517, 0.0, 0.704466624651979, -0.704466624651979, -3.19060438198232, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.956039962169553, 1.717369642459, 0.0, 1.23867031971055, -1.23867031971055, -2.67340960462855, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965738532865224, 1.11785692854118, 0.0, 1.84788160432404, -1.84788160432404, -2.0835954614064, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975681888433066, 0.50321294965189, 0.0, 2.47246893878117, -2.47246893878117, -1.47889483808496, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.984896683218376, -0.0663953775217816, 0.0, 3.05129206074015, -3.05129206074015, -0.918501305696595, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.992480787192283, -0.535203297647721, 0.0, 3.52768408484, -3.52768408484, -0.457277489544563, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997691119843641, -0.857277628623521, 0.0, 3.85496874846715, -3.85496874846715, -0.140413491220121, 0.0, 0.0, 0.0}};
    
    static const double FE1_C4[81][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.969897153940606, 0.0156904364105179, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.910876968380614, 0.0147356419101901, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.810767219666292, 0.0131161241707132, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.67934241061475, 0.0109900094576124, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.529464232135295, 0.00856536678369434, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.375803237412972, 0.00607952789173372, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.233401155619555, 0.00377582919540587, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11619917558807, 0.00187980320192888, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0356805928441201, 0.000577220039089388, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.904784737439882, 0.0808028529112415, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.849726772913861, 0.0758858373769426, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.756337724046514, 0.0675456197904911, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633735898824468, 0.0565965212478945, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493919540138869, 0.0441100587801205, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.350574318225679, 0.0313084470790275, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.217732161031102, 0.0194448237838582, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1083983390899, 0.00968063970009891, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0332852361686005, 0.00297257671460899, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.795059431348357, 0.190528159002766, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.746678471595304, 0.1789341386955, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.664614925412231, 0.159268418424774, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.556881302805906, 0.133451117266456, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.434020792421627, 0.104008806497362, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.308059372091658, 0.0738233932130477, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.191327285897259, 0.045849698917701, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0952526255911215, 0.0228263531988773, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0292486597589868, 0.00700915312422273, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.652583870293393, 0.33300372005773, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.612872833961666, 0.312739776329138, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.545515169280765, 0.278368174556239, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.457087535283731, 0.233244884788631, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.356243769130525, 0.181785829788464, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.252854779646835, 0.129027985657871, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.157041217046902, 0.0801357677680581, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0781832459473409, 0.039895732842658, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0240072664178624, 0.0122505464653471, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.492793795175562, 0.492793795175562, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.462806305145402, 0.462806305145402, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.411941671918502, 0.411941671918502, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.345166210036181, 0.345166210036181, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.269014799459495, 0.269014799459495, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.190941382652353, 0.190941382652353, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11858849240748, 0.11858849240748, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0590394893949994, 0.0590394893949994, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0181289064416048, 0.0181289064416048, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.333003720057731, 0.652583870293393, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.312739776329138, 0.612872833961666, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.278368174556239, 0.545515169280765, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.233244884788631, 0.457087535283731, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.181785829788464, 0.356243769130525, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.129027985657871, 0.252854779646835, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0801357677680582, 0.157041217046902, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0398957328426581, 0.0781832459473408, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012250546465347, 0.0240072664178625, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.190528159002766, 0.795059431348357, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1789341386955, 0.746678471595304, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.159268418424774, 0.664614925412231, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.133451117266456, 0.556881302805906, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.104008806497362, 0.434020792421627, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0738233932130477, 0.308059372091658, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.045849698917701, 0.191327285897259, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0228263531988774, 0.0952526255911215, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00700915312422268, 0.0292486597589868, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0808028529112416, 0.904784737439882, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0758858373769426, 0.849726772913861, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0675456197904911, 0.756337724046514, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0565965212478945, 0.633735898824468, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0441100587801205, 0.493919540138869, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0313084470790274, 0.350574318225679, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0194448237838582, 0.217732161031102, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00968063970009897, 0.1083983390899, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00297257671460893, 0.0332852361686006, 0.963742187116791},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0156904364105178, 0.969897153940606, 0.0144124096488765},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0147356419101901, 0.910876968380614, 0.0743873897091961},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0131161241707132, 0.810767219666292, 0.176116656162995},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0109900094576124, 0.67934241061475, 0.309667579927638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00856536678369439, 0.529464232135295, 0.461970401081011},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00607952789173372, 0.375803237412972, 0.618117234695294},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00377582919540587, 0.233401155619555, 0.762823015185039},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00187980320192893, 0.11619917558807, 0.881921021210001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000577220039089332, 0.0356805928441202, 0.963742187116791}};
    
    static const double FE2[81][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 729; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 665978841
    for (unsigned int ip = 0; ip < 81; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      
      // Total number of operations to compute function values = 2
      for (unsigned int r = 0; r < 1; r++)
      {
        F16 += FE2[ip][0]*w[1][0];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 1026
      for (unsigned int r = 0; r < 27; r++)
      {
        F0 += FE1_C1_D10[ip][r]*w[2][r];
        F1 += FE1_C1_D01[ip][r]*w[2][r];
        F2 += FE1_C0_D10[ip][r]*w[2][r];
        F3 += FE1_C0_D01[ip][r]*w[2][r];
        F4 += FE1_C0_D20[ip][r]*w[2][r];
        F5 += FE1_C0_D11[ip][r]*w[2][r];
        F6 += FE1_C0_D02[ip][r]*w[2][r];
        F7 += FE1_C1_D20[ip][r]*w[2][r];
        F8 += FE1_C1_D11[ip][r]*w[2][r];
        F9 += FE1_C1_D02[ip][r]*w[2][r];
        F10 += FE1_C2[ip][r]*w[2][r];
        F11 += FE1_C2_D10[ip][r]*w[2][r];
        F12 += FE1_C2_D01[ip][r]*w[2][r];
        F13 += FE1_C3[ip][r]*w[2][r];
        F14 += FE1_C3_D10[ip][r]*w[2][r];
        F15 += FE1_C3_D01[ip][r]*w[2][r];
        F17 += FE1_C2[ip][r]*w[3][r];
        F18 += FE1_C3[ip][r]*w[3][r];
        F19 += FE1_C4[ip][r]*w[2][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 8220933
      for (unsigned int j = 0; j < 27; j++)
      {
        for (unsigned int k = 0; k < 27; k++)
        {
          // Number of operations to compute entry: 11277
          A[j*27 + k] += ((((((K[0]*FE1_C0_D10[ip][j] + K[2]*FE1_C0_D01[ip][j]))*((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k])) + ((K[0]*FE1_C1_D10[ip][j] + K[2]*FE1_C1_D01[ip][j]))*((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))) + (((K[1]*FE1_C0_D10[ip][j] + K[3]*FE1_C0_D01[ip][j]))*((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k])) + ((K[1]*FE1_C1_D10[ip][j] + K[3]*FE1_C1_D01[ip][j]))*((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k])))) + (((FE1_C2[ip][j]*((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*F17 + F10)) + FE1_C2[ip][k]*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + FE1_C3[ip][j]*((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*F18 + F13)) + FE1_C3[ip][k]*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*1000.0/(F16) + (FE1_C4[ip][j]*((((((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*K[1]*FE1_C0_D20[ip][k] + K[1]*K[3]*FE1_C0_D11[ip][k] + K[3]*K[1]*FE1_C0_D11[ip][k] + K[3]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)) + ((K[1]*K[0]*FE1_C1_D20[ip][k] + K[1]*K[2]*FE1_C1_D11[ip][k] + K[3]*K[0]*FE1_C1_D11[ip][k] + K[3]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + ((K[1]*K[1]*FE1_C1_D20[ip][k] + K[1]*K[3]*FE1_C1_D11[ip][k] + K[3]*K[1]*FE1_C1_D11[ip][k] + K[3]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6)) + ((K[1]*K[0]*FE1_C0_D20[ip][k] + K[1]*K[2]*FE1_C0_D11[ip][k] + K[3]*K[0]*FE1_C0_D11[ip][k] + K[3]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(-1.0) + (K[1]*K[0]*FE1_C0_D20[ip][k] + K[1]*K[2]*FE1_C0_D11[ip][k] + K[3]*K[0]*FE1_C0_D11[ip][k] + K[3]*K[2]*FE1_C0_D02[ip][k])) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*K[1]*FE1_C0_D20[ip][k] + K[1]*K[3]*FE1_C0_D11[ip][k] + K[3]*K[1]*FE1_C0_D11[ip][k] + K[3]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)) + ((K[1]*K[0]*FE1_C1_D20[ip][k] + K[1]*K[2]*FE1_C1_D11[ip][k] + K[3]*K[0]*FE1_C1_D11[ip][k] + K[3]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + ((K[1]*K[1]*FE1_C1_D20[ip][k] + K[1]*K[3]*FE1_C1_D11[ip][k] + K[3]*K[1]*FE1_C1_D11[ip][k] + K[3]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6)) + ((K[1]*K[0]*FE1_C0_D20[ip][k] + K[1]*K[2]*FE1_C0_D11[ip][k] + K[3]*K[0]*FE1_C0_D11[ip][k] + K[3]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*F13 + FE1_C3[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + (((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))))) + ((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*((K[1]*F14 + K[3]*F15)) + ((K[1]*FE1_C3_D10[ip][k] + K[3]*FE1_C3_D01[ip][k]))*((((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + (((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*K[1]*FE1_C0_D20[ip][k] + K[1]*K[3]*FE1_C0_D11[ip][k] + K[3]*K[1]*FE1_C0_D11[ip][k] + K[3]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)) + ((K[1]*K[0]*FE1_C1_D20[ip][k] + K[1]*K[2]*FE1_C1_D11[ip][k] + K[3]*K[0]*FE1_C1_D11[ip][k] + K[3]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + ((K[1]*K[1]*FE1_C1_D20[ip][k] + K[1]*K[3]*FE1_C1_D11[ip][k] + K[3]*K[1]*FE1_C1_D11[ip][k] + K[3]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6)) + ((K[1]*K[0]*FE1_C0_D20[ip][k] + K[1]*K[2]*FE1_C0_D11[ip][k] + K[3]*K[0]*FE1_C0_D11[ip][k] + K[3]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(-1.0) + ((K[1]*K[0]*FE1_C1_D20[ip][k] + K[1]*K[2]*FE1_C1_D11[ip][k] + K[3]*K[0]*FE1_C1_D11[ip][k] + K[3]*K[2]*FE1_C1_D02[ip][k]))*(-1.0)) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*K[1]*FE1_C0_D20[ip][k] + K[1]*K[3]*FE1_C0_D11[ip][k] + K[3]*K[1]*FE1_C0_D11[ip][k] + K[3]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)) + ((K[1]*K[0]*FE1_C1_D20[ip][k] + K[1]*K[2]*FE1_C1_D11[ip][k] + K[3]*K[0]*FE1_C1_D11[ip][k] + K[3]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + ((K[1]*K[1]*FE1_C1_D20[ip][k] + K[1]*K[3]*FE1_C1_D11[ip][k] + K[3]*K[1]*FE1_C1_D11[ip][k] + K[3]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6)) + ((K[1]*K[0]*FE1_C0_D20[ip][k] + K[1]*K[2]*FE1_C0_D11[ip][k] + K[3]*K[0]*FE1_C0_D11[ip][k] + K[3]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*F10 + FE1_C2[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))))) + ((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE1_C2_D10[ip][k] + K[3]*FE1_C2_D01[ip][k]))*(((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))) + ((((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[0]*K[1]*FE1_C0_D20[ip][k] + K[0]*K[3]*FE1_C0_D11[ip][k] + K[2]*K[1]*FE1_C0_D11[ip][k] + K[2]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[0]*K[0]*FE1_C1_D20[ip][k] + K[0]*K[2]*FE1_C1_D11[ip][k] + K[2]*K[0]*FE1_C1_D11[ip][k] + K[2]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + ((K[0]*K[1]*FE1_C1_D20[ip][k] + K[0]*K[3]*FE1_C1_D11[ip][k] + K[2]*K[1]*FE1_C1_D11[ip][k] + K[2]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[0]*K[0]*FE1_C0_D20[ip][k] + K[0]*K[2]*FE1_C0_D11[ip][k] + K[2]*K[0]*FE1_C0_D11[ip][k] + K[2]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(-1.0) + (K[0]*K[1]*FE1_C1_D20[ip][k] + K[0]*K[3]*FE1_C1_D11[ip][k] + K[2]*K[1]*FE1_C1_D11[ip][k] + K[2]*K[3]*FE1_C1_D02[ip][k])) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[0]*K[1]*FE1_C0_D20[ip][k] + K[0]*K[3]*FE1_C0_D11[ip][k] + K[2]*K[1]*FE1_C0_D11[ip][k] + K[2]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[0]*K[0]*FE1_C1_D20[ip][k] + K[0]*K[2]*FE1_C1_D11[ip][k] + K[2]*K[0]*FE1_C1_D11[ip][k] + K[2]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + ((K[0]*K[1]*FE1_C1_D20[ip][k] + K[0]*K[3]*FE1_C1_D11[ip][k] + K[2]*K[1]*FE1_C1_D11[ip][k] + K[2]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[0]*K[0]*FE1_C0_D20[ip][k] + K[0]*K[2]*FE1_C0_D11[ip][k] + K[2]*K[0]*FE1_C0_D11[ip][k] + K[2]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*F10 + FE1_C2[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + (((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))))) + ((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE1_C2_D10[ip][k] + K[2]*FE1_C2_D01[ip][k]))*((((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + (((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[0]*K[1]*FE1_C0_D20[ip][k] + K[0]*K[3]*FE1_C0_D11[ip][k] + K[2]*K[1]*FE1_C0_D11[ip][k] + K[2]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[0]*K[0]*FE1_C1_D20[ip][k] + K[0]*K[2]*FE1_C1_D11[ip][k] + K[2]*K[0]*FE1_C1_D11[ip][k] + K[2]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + ((K[0]*K[1]*FE1_C1_D20[ip][k] + K[0]*K[3]*FE1_C1_D11[ip][k] + K[2]*K[1]*FE1_C1_D11[ip][k] + K[2]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[0]*K[0]*FE1_C0_D20[ip][k] + K[0]*K[2]*FE1_C0_D11[ip][k] + K[2]*K[0]*FE1_C0_D11[ip][k] + K[2]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(-1.0) + ((K[0]*K[1]*FE1_C0_D20[ip][k] + K[0]*K[3]*FE1_C0_D11[ip][k] + K[2]*K[1]*FE1_C0_D11[ip][k] + K[2]*K[3]*FE1_C0_D02[ip][k]))*(-1.0)) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))) + (((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[0]*K[1]*FE1_C0_D20[ip][k] + K[0]*K[3]*FE1_C0_D11[ip][k] + K[2]*K[1]*FE1_C0_D11[ip][k] + K[2]*K[3]*FE1_C0_D02[ip][k]))*((K[0]*F0 + K[2]*F1))) + (((K[0]*K[0]*FE1_C1_D20[ip][k] + K[0]*K[2]*FE1_C1_D11[ip][k] + K[2]*K[0]*FE1_C1_D11[ip][k] + K[2]*K[2]*FE1_C1_D02[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))*(-1.0) + ((((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + ((K[0]*K[1]*FE1_C1_D20[ip][k] + K[0]*K[3]*FE1_C1_D11[ip][k] + K[2]*K[1]*FE1_C1_D11[ip][k] + K[2]*K[3]*FE1_C1_D02[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0))) + (((K[0]*K[0]*FE1_C0_D20[ip][k] + K[0]*K[2]*FE1_C0_D11[ip][k] + K[2]*K[0]*FE1_C0_D11[ip][k] + K[2]*K[2]*FE1_C0_D02[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*F13 + FE1_C3[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))))) + ((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*((K[0]*F14 + K[2]*F15)) + ((K[0]*FE1_C3_D10[ip][k] + K[2]*FE1_C3_D01[ip][k]))*(((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))))*(-1.0))) + ((((K[0]*FE1_C2_D10[ip][j] + K[2]*FE1_C2_D01[ip][j]))*((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE1_C2_D10[ip][k] + K[3]*FE1_C2_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE1_C2_D10[ip][k] + K[2]*FE1_C2_D01[ip][k]))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + (((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F14 + K[2]*F15)) + ((K[0]*FE1_C3_D10[ip][k] + K[2]*FE1_C3_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F14 + K[3]*F15)) + ((K[1]*FE1_C3_D10[ip][k] + K[3]*FE1_C3_D01[ip][k]))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + (((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((1.0*((-1.0)*F19) + 2.0*((((K[0]*F11 + K[2]*F12))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((1.0*((-1.0)*F19) + 2.0*((((K[0]*F11 + K[2]*F12))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))) + (((FE1_C4[ip][k]*(-1.0))*1.0 + 2.0*((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE1_C2_D10[ip][k] + K[2]*FE1_C2_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE1_C2_D10[ip][k] + K[3]*FE1_C2_D01[ip][k]))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))) + ((K[0]*FE1_C3_D10[ip][j] + K[2]*FE1_C3_D01[ip][j]))*((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE1_C2_D10[ip][k] + K[3]*FE1_C2_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE1_C2_D10[ip][k] + K[2]*FE1_C2_D01[ip][k]))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + (((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F14 + K[2]*F15)) + ((K[0]*FE1_C3_D10[ip][k] + K[2]*FE1_C3_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F14 + K[3]*F15)) + ((K[1]*FE1_C3_D10[ip][k] + K[3]*FE1_C3_D01[ip][k]))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + (((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((1.0*((-1.0)*F19) + 2.0*((((K[0]*F14 + K[2]*F15))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((1.0*((-1.0)*F19) + 2.0*((((K[0]*F14 + K[2]*F15))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))) + (((FE1_C4[ip][k]*(-1.0))*1.0 + 2.0*((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F14 + K[3]*F15)) + ((K[1]*FE1_C3_D10[ip][k] + K[3]*FE1_C3_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F14 + K[2]*F15)) + ((K[0]*FE1_C3_D10[ip][k] + K[2]*FE1_C3_D01[ip][k]))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))) + (((K[1]*FE1_C2_D10[ip][j] + K[3]*FE1_C2_D01[ip][j]))*((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE1_C2_D10[ip][k] + K[3]*FE1_C2_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE1_C2_D10[ip][k] + K[2]*FE1_C2_D01[ip][k]))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + (((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F14 + K[2]*F15)) + ((K[0]*FE1_C3_D10[ip][k] + K[2]*FE1_C3_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F14 + K[3]*F15)) + ((K[1]*FE1_C3_D10[ip][k] + K[3]*FE1_C3_D01[ip][k]))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + (((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((1.0*((-1.0)*F19) + 2.0*((((K[0]*F11 + K[2]*F12))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((1.0*((-1.0)*F19) + 2.0*((((K[0]*F11 + K[2]*F12))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))) + (((FE1_C4[ip][k]*(-1.0))*1.0 + 2.0*((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE1_C2_D10[ip][k] + K[2]*FE1_C2_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE1_C2_D10[ip][k] + K[3]*FE1_C2_D01[ip][k]))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))) + ((K[1]*FE1_C3_D10[ip][j] + K[3]*FE1_C3_D01[ip][j]))*((((((((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE1_C2_D10[ip][k] + K[3]*FE1_C2_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE1_C2_D10[ip][k] + K[2]*FE1_C2_D01[ip][k]))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + (((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F14 + K[2]*F15)) + ((K[0]*FE1_C3_D10[ip][k] + K[2]*FE1_C3_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F14 + K[3]*F15)) + ((K[1]*FE1_C3_D10[ip][k] + K[3]*FE1_C3_D01[ip][k]))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + (((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F11 + K[3]*F12))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (((K[0]*F14 + K[2]*F15))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((1.0*((-1.0)*F19) + 2.0*((((K[0]*F14 + K[2]*F15))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((1.0*((-1.0)*F19) + 2.0*((((K[0]*F14 + K[2]*F15))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F14 + K[3]*F15))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))) + (((FE1_C4[ip][k]*(-1.0))*1.0 + 2.0*((((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + (K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[1]*F14 + K[3]*F15)) + ((K[1]*FE1_C3_D10[ip][k] + K[3]*FE1_C3_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + ((((((((((K[0]*FE1_C1_D10[ip][k] + K[2]*FE1_C1_D01[ip][k]))*((K[1]*F2 + K[3]*F3)) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*((K[0]*F0 + K[2]*F1))))*(-1.0) + (((K[0]*FE1_C0_D10[ip][k] + K[2]*FE1_C0_D01[ip][k]))*(((K[1]*F0 + K[3]*F1) + 1.0)) + ((K[1]*FE1_C1_D10[ip][k] + K[3]*FE1_C1_D01[ip][k]))*(((K[0]*F2 + K[2]*F3) + 1.0)))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(-1.0) + ((K[1]*FE1_C0_D10[ip][k] + K[3]*FE1_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((K[0]*F14 + K[2]*F15)) + ((K[0]*FE1_C3_D10[ip][k] + K[2]*FE1_C3_D01[ip][k]))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))))*W81[ip]*det;
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_2: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_2() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Values of basis functions at quadrature points.
    static const double FE1_C0[6][27] = \
    {{-0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C3[6][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0}};
    
    static const double FE2[6][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 729; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 91878
    for (unsigned int ip = 0; ip < 6; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      
      // Total number of operations to compute function values = 4
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE2[ip][0]*w[1][0];
        F1 += FE2[ip][0]*w[0][0];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 15309
      for (unsigned int j = 0; j < 27; j++)
      {
        for (unsigned int k = 0; k < 27; k++)
        {
          // Number of operations to compute entry: 21
          A[j*27 + k] += (((((FE1_C0[ip][j]*FE1_C0[ip][k] + FE1_C1[ip][j]*FE1_C1[ip][k]))*1.0/(F0))*10000000000.0 + (((FE1_C0[ip][j]*FE1_C2[ip][k]*0.5 + FE1_C1[ip][j]*FE1_C3[ip][k]*0.5))*(-1.0))*10000000000.0) + ((FE1_C2[ip][j]*FE1_C2[ip][k] + FE1_C3[ip][j]*FE1_C3[ip][k]))*F1/(F0))*W6[ip]*det;
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "d4c8f679d706b6c848c2591f0f287ef825ef8298a91ae2b1287eca9318885e5ccbbb3c88f407c4f2ad6bd0873b2cc586825b1705738fb81cc55e8e57d81221ab";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 4;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4();
        break;
      }
    case 1:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4();
        break;
      }
    case 2:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_0();
        break;
      }
    case 3:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_0();
        break;
      }
    case 4:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4();
        break;
      }
    case 5:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_finite_element_4();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4();
        break;
      }
    case 1:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4();
        break;
      }
    case 2:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_0();
        break;
      }
    case 3:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_0();
        break;
      }
    case 4:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4();
        break;
      }
    case 5:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_dofmap_4();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 3;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    switch (subdomain_id)
    {
    case 1:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new ffc_form_f2d44367611ba053a55267e6bde162b932fdea4e_cell_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
