// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_0E93D7D261CCFB5ED0D4094A01ECDD6BAA2D6012_H
#define __FFC_FORM_0E93D7D261CCFB5ED0D4094A01ECDD6BAA2D6012_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_3();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_4: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_4()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (3,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 15; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 15; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[12];
    for (unsigned int r = 0; r < 12; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[4] = dof_values[7];
    vertex_values[7] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[5] = dof_values[13];
    vertex_values[8] = dof_values[14];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_4();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_4: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_4()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (3,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 3*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 8;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[24] = vertex_coordinates[0];
    dof_coordinates[25] = vertex_coordinates[1];
    dof_coordinates[26] = vertex_coordinates[2];
    dof_coordinates[27] = vertex_coordinates[3];
    dof_coordinates[28] = vertex_coordinates[4];
    dof_coordinates[29] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_4();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W49[49] = {0.0036234660797264, 0.00715464377909735, 0.00824760301353097, 0.00693554275373524, 0.00429791008798315, 0.00177448507143835, 0.000337590756711431, 0.00782718664849641, 0.0154550176627367, 0.0178159604006788, 0.0149817292193919, 0.0092840787568901, 0.00383313257348533, 0.000729242610651687, 0.0106850106013168, 0.021097877818156, 0.0243208363749012, 0.0204517846225132, 0.0126738360020949, 0.00523266711568851, 0.000995500091625133, 0.0116960367644213, 0.0230941796709132, 0.0266220977213878, 0.0223869525046108, 0.0138730467715663, 0.00572778720065371, 0.00108969528483177, 0.0106850106013168, 0.021097877818156, 0.0243208363749012, 0.0204517846225133, 0.0126738360020949, 0.00523266711568852, 0.000995500091625133, 0.00782718664849641, 0.0154550176627367, 0.0178159604006788, 0.0149817292193919, 0.0092840787568901, 0.00383313257348533, 0.000729242610651687, 0.00362346607972641, 0.00715464377909737, 0.00824760301353099, 0.00693554275373526, 0.00429791008798316, 0.00177448507143835, 0.000337590756711432};
    // Quadrature points on the UFC reference element: (0.0248740323760607, 0.0224793864387125), (0.0225279156156636, 0.114679053160904), (0.0186827443488427, 0.265789822784589), (0.0139228951565961, 0.452846373669445), (0.00897290400671669, 0.64737528288683), (0.00458641254163789, 0.819759308263108), (0.00143165958133296, 0.943737439463078), (0.126329297019669, 0.0224793864387125), (0.114413927746761, 0.114679053160904), (0.0948852170128628, 0.265789822784589), (0.0707110745463253, 0.452846373669445), (0.045571246280295, 0.64737528288683), (0.0232932989499898, 0.819759308263108), (0.00727105865856026, 0.943737439463078), (0.29039930608799, 0.0224793864387125), (0.263008866575801, 0.114679053160904), (0.218117268350298, 0.265789822784589), (0.16254699001287, 0.452846373669445), (0.104756842708482, 0.64737528288683), (0.0535454404572833, 0.819759308263108), (0.0167143365694675, 0.943737439463078), (0.488760306780644, 0.0224793864387125), (0.442660473419548, 0.114679053160904), (0.367105088607705, 0.265789822784589), (0.273576813165278, 0.452846373669445), (0.176312358556585, 0.64737528288683), (0.0901203458684462, 0.819759308263108), (0.0281312802684611, 0.943737439463078), (0.687121307473297, 0.0224793864387125), (0.622312080263294, 0.114679053160904), (0.516092908865112, 0.265789822784589), (0.384606636317686, 0.452846373669445), (0.247867874404688, 0.64737528288683), (0.126695251279609, 0.819759308263108), (0.0395482239674546, 0.943737439463078), (0.851191316541618, 0.0224793864387125), (0.770907019092334, 0.114679053160904), (0.639324960202548, 0.265789822784589), (0.47644255178423, 0.452846373669445), (0.307053470832875, 0.64737528288683), (0.156947392786903, 0.819759308263108), (0.0489915018783619, 0.943737439463078), (0.952646581185227, 0.0224793864387125), (0.862793031223432, 0.114679053160904), (0.715527432866568, 0.265789822784589), (0.533230731173959, 0.452846373669445), (0.343651813106453, 0.64737528288683), (0.175654279195255, 0.819759308263108), (0.0548309009555892, 0.943737439463078)
    
    // Values of basis functions at quadrature points.
    static const double FE1_C0[49][12] = \
    {{0.862424436102575, -0.02363659740277, -0.0214687408093905, 0.00223661194428193, 0.0856596425519241, 0.0947846476133796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.626030598232005, -0.0215129016516906, -0.0883764826931412, 0.0103339201299721, 0.395777151578119, 0.0777477144047362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.308431581502674, -0.0179846544760343, -0.124501362992862, 0.0198627332384349, 0.760719638316469, 0.0534720644113193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0354392941626714, -0.0135352011375129, -0.042706697378312, 0.0252197303305776, 0.965886411764936, 0.0296964622576403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.107458675803748, -0.00881187799408911, 0.190814230898777, 0.0232353450786583, 0.889886758897448, 0.0123342189229533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.113945427596046, -0.00454434218163359, 0.52425133870491, 0.0150390174901691, 0.575976921626226, 0.00322249195637392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0488180455563859, -0.00142756028301921, 0.837543269825575, 0.00540444298987963, 0.206983896285125, 0.000313996738824734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.597861998170088, -0.0944111144487016, -0.0214687408093905, 0.0113592203449441, 0.076537034151262, 0.430121602591797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.417688245079323, -0.088232834021879, -0.0883764826931412, 0.0524835236096748, 0.353627548098416, 0.352809999927606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.178147849273431, -0.0768788081977067, -0.124501362992862, 0.100878100058905, 0.679704271495999, 0.242649950362235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0224475414828925, -0.0607109624193333, -0.042706697378312, 0.128085014746293, 0.863021127349221, 0.134759059185025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.118489802931845, -0.0414177693052163, 0.190814230898777, 0.118006793808845, 0.795115310167261, 0.0559712373621771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.10768242458169, -0.0222081433980425, 0.52425133870491, 0.0763795945376374, 0.514636344578758, 0.0146232901584272, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0441911673657668, -0.0071653220705277, 0.837543269825575, 0.0274478811224619, 0.184940458152543, 0.00142488033571417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.25715007489433, -0.121735792135218, -0.0214687408093905, 0.0261119928923435, 0.0617842616038625, 0.798158203554072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.152232570219964, -0.124661538780826, -0.0883764826931412, 0.120646431167342, 0.285464640540749, 0.654694379545912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0166108722965939, -0.122966982845106, -0.124501362992862, 0.231893400404338, 0.548688971150566, 0.450275101986471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0887621069184765, -0.109703942088382, -0.042706697378312, 0.294435259912846, 0.696670882182668, 0.250066604289657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124990908080892, -0.0828088505199825, 0.190814230898777, 0.271267962730938, 0.641854141245168, 0.10386342372599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0945918778860025, -0.0478112120697543, 0.52425133870491, 0.175577492919624, 0.415438446196772, 0.0271358121344514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0364200999294947, -0.0161555984755526, 0.837543269825575, 0.0630957807855733, 0.149292558489432, 0.00264408930446688, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0109870318120258, -0.0109870318120258, -0.0214687408093905, 0.043948127248103, 0.043948127248103, 0.955546549937236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0507638839635113, -0.0507638839635114, -0.0883764826931412, 0.203055535854045, 0.203055535854045, 0.783793178912073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.097572796444363, -0.097572796444363, -0.124501362992862, 0.390291185777452, 0.390291185777452, 0.539064584326685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.123888267761939, -0.123888267761939, -0.042706697378312, 0.495553071047757, 0.495553071047757, 0.299377090806677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.114140262997013, -0.114140262997013, 0.190814230898777, 0.456561051988053, 0.456561051988053, 0.124344191119143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0738769923895494, -0.0738769923895494, 0.52425133870491, 0.295507969558198, 0.295507969558198, 0.0324867069577934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0265485424093756, -0.0265485424093756, 0.837543269825575, 0.106194169637503, 0.106194169637502, 0.00316547571817086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.121735792135218, 0.25715007489433, -0.0214687408093905, 0.0617842616038626, 0.0261119928923435, 0.798158203554073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124661538780826, 0.152232570219964, -0.0883764826931412, 0.285464640540749, 0.120646431167342, 0.654694379545913, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.122966982845106, 0.0166108722965939, -0.124501362992862, 0.548688971150566, 0.231893400404338, 0.450275101986471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.109703942088382, -0.0887621069184766, -0.042706697378312, 0.696670882182667, 0.294435259912846, 0.250066604289657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0828088505199825, -0.124990908080892, 0.190814230898777, 0.641854141245168, 0.271267962730938, 0.10386342372599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0478112120697543, -0.0945918778860025, 0.52425133870491, 0.415438446196772, 0.175577492919624, 0.0271358121344514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0161555984755526, -0.0364200999294946, 0.837543269825575, 0.149292558489432, 0.0630957807855734, 0.00264408930446688, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0944111144487016, 0.597861998170088, -0.0214687408093905, 0.0765370341512621, 0.011359220344944, 0.430121602591797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.088232834021879, 0.417688245079323, -0.0883764826931412, 0.353627548098416, 0.0524835236096747, 0.352809999927606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0768788081977066, 0.178147849273431, -0.124501362992862, 0.679704271495999, 0.100878100058904, 0.242649950362234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0607109624193332, -0.0224475414828926, -0.042706697378312, 0.863021127349221, 0.128085014746293, 0.134759059185024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0414177693052163, -0.118489802931845, 0.190814230898777, 0.795115310167261, 0.118006793808845, 0.0559712373621771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0222081433980425, -0.10768242458169, 0.52425133870491, 0.514636344578758, 0.0763795945376375, 0.0146232901584272, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00716532207052775, -0.0441911673657668, 0.837543269825575, 0.184940458152543, 0.0274478811224619, 0.00142488033571417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0236365974027701, 0.862424436102575, -0.0214687408093905, 0.085659642551924, 0.0022366119442819, 0.0947846476133799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0215129016516907, 0.626030598232004, -0.0883764826931412, 0.395777151578119, 0.0103339201299722, 0.0777477144047368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0179846544760343, 0.308431581502673, -0.124501362992862, 0.760719638316469, 0.0198627332384349, 0.0534720644113193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.013535201137513, 0.0354392941626711, -0.042706697378312, 0.965886411764936, 0.0252197303305778, 0.0296964622576405, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00881187799408917, -0.107458675803748, 0.190814230898777, 0.889886758897448, 0.0232353450786585, 0.0123342189229534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0045443421816336, -0.113945427596046, 0.52425133870491, 0.575976921626226, 0.0150390174901692, 0.00322249195637392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00142756028301927, -0.0488180455563859, 0.837543269825575, 0.206983896285125, 0.00540444298987963, 0.000313996738824762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D01[49][12] = \
    {{-2.81058632474091, 0.0, -0.91008245424515, 0.0994961295042323, 3.72066877898606, -0.0994961295042409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.45117212489373, 0.0, -0.541283787356382, 0.0901116624626435, 2.99245591225012, -0.0901116624626522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86210973146628, 0.0, 0.0631592911383591, 0.0747309773953598, 1.79895044032792, -0.0747309773953694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263715, 0.321537430018067, -0.0556915806263827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268519, -1.2148938791215, -0.0358916160268646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665344, -2.5764201162714, -0.0183456501665492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531317, -3.55562615402994, -0.00572663832532894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.40476526616648, 0.0, -0.910082454245149, 0.505317188078666, 3.31484772041163, -0.505317188078675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.08362807636934, 0.0, -0.541283787356382, 0.457655710987035, 2.62491186372573, -0.457655710987044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.5572998408102, 0.0, 0.0631592911383592, 0.37954086805144, 1.49414054967184, -0.379540868051451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.905770207136925, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591496, -0.2828442981853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.228213883331504, 0.0, 1.58950113154732, 0.182284985121165, -1.36128724821581, -0.182284985121178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.372210428852384, 0.0, 2.27903723305243, 0.0931731957999418, -2.65124766190481, -0.0931731957999569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.804033992486547, 0.0, 2.77494975785231, 0.0290842346342219, -3.57898375033885, -0.0290842346342381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.74848522989319, 0.0, -0.910082454245149, 1.16159722435195, 2.65856768413835, -1.16159722435196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.06437163546045, 0.0, 0.0631592911383593, 0.872469073401182, 1.0012123443221, -0.872469073401193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00852850238124286, 0.0, 1.58950113154732, 0.419027370833912, -1.59802963392856, -0.419027370833926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.493218994881558, 0.0, 2.27903723305243, 0.214181761829116, -2.77225622793398, -0.214181761829131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.841807104130176, 0.0, 2.77494975785231, 0.066857346277851, -3.61675686198248, -0.0668573462778673, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.955041227122579, 0.0, -0.910082454245149, 1.95504122712256, 1.86512368136773, -1.95504122712258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292472, -1.46842035443082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0943072526611156, 0.0, 0.811385494677781, 1.0943072526611, -0.717078242016659, -1.09430725266111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.294750565773655, 0.0, 1.58950113154732, 0.705249434226324, -1.88425169732097, -0.705249434226338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.63951861652621, 0.0, 2.27903723305243, 0.360481383473767, -2.91855584957864, -0.360481383473783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.88747487892615, 0.0, 2.77494975785231, 0.112525121073825, -3.66242463677846, -0.112525121073842, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.161597224351966, 0.0, -0.910082454245149, 2.74848522989318, 1.07167967859712, -2.74848522989319, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.349812039948516, 0.0, 0.81138549467778, 1.53842654527073, -1.16119753462629, -1.53842654527074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.580972629166068, 0.0, 1.58950113154732, 0.991471497618736, -2.17047376071338, -0.991471497618751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.785818238170862, 0.0, 2.27903723305243, 0.506781005118419, -3.06485547122329, -0.506781005118435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.933142653722124, 0.0, 2.77494975785231, 0.158192895869799, -3.70809241157443, -0.158192895869816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.494682811921319, 0.0, -0.910082454245149, 3.40476526616646, 0.415399642323839, -3.40476526616647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165655991, -3.08362807636934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.620459131948544, 0.0, 0.0631592911383591, 2.55729984081018, -0.683618423086896, -2.55729984081019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.717155701814694, 0.0, 0.81138549467778, 1.90577020713691, -1.52854119649247, -1.90577020713692, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.906826804200036, 0.0, 2.27903723305243, 0.627789571147593, -3.18586403725246, -0.627789571147609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.970915765365754, 0.0, 2.77494975785231, 0.195966007513428, -3.74586552321806, -0.195966007513445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.900503870495752, 0.0, -0.91008245424515, 3.81058632474089, 0.00957858374940601, -3.81058632474091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.36860455018095, -3.45117212489373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.925269022604624, 0.0, 0.0631592911383587, 2.86210973146626, -0.988428313742976, -2.86210973146627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.944308419373611, 0.0, 0.81138549467778, 2.13292292469582, -1.75569391405138, -2.13292292469584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.981654349833443, 0.0, 2.27903723305243, 0.702617116781, -3.26069158288587, -0.702617116781017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994273361674663, 0.0, 2.77494975785231, 0.219323603822338, -3.76922311952697, -0.219323603822354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D02[49][12] = \
    {{4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.28785870856518e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.59872115546023e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.28785870856518e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D10[49][12] = \
    {{-2.81058632474091, -0.90050387049576, 0.0, 0.0899175457548491, -0.0899175457548491, 3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.45117212489373, -0.909888337537348, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86210973146627, -0.925269022604631, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.13292292469584, -0.944308419373618, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.374607252425813, -0.964108383973135, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.29738288321898, -0.98165434983345, 0.0, 3.27903723305242, -3.27903723305242, 0.684271466614469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.780676396177642, -0.99427336167467, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.40476526616647, -0.494682811921326, 0.0, 0.089917545754849, -0.089917545754849, 2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.62597236538229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.2282138833315, -0.817715014878821, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.372210428852388, -0.906826804200042, 0.0, 3.27903723305242, -3.27903723305242, 0.534616375347654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.804033992486551, -0.970915765365761, 0.0, 3.7749497578523, -3.7749497578523, 0.16688177287921, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548488, -0.0899175457548488, 1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.48924832105318, 0.0520354663032025, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00852850238124758, -0.580972629166074, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.493218994881562, -0.785818238170868, 0.0, 3.27903723305242, -3.27903723305242, 0.292599243289305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.84180710413018, -0.933142653722132, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.955041227122574, 0.955041227122573, 0.0, 0.0899175457548487, -0.0899175457548487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.770641893678191, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.46842035443082, 0.46842035443082, 0.0, 1.06315929113836, -1.06315929113836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0943072526611103, 0.0943072526611104, 0.0, 1.81138549467778, -1.81138549467778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.29475056577366, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.639518616526214, -0.639518616526216, 0.0, 3.27903723305242, -3.27903723305242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.887474878926154, -0.887474878926158, 0.0, 3.7749497578523, -3.7749497578523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.161597224351959, 1.74848522989319, 0.0, 0.0899175457548486, -0.0899175457548486, -1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.052035466303203, 1.48924832105318, 0.0, 0.458716212643615, -0.458716212643615, -1.43721285474997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.127530926598809, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.580972629166073, -0.00852850238124825, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.785818238170866, -0.493218994881564, 0.0, 3.27903723305242, -3.27903723305242, -0.292599243289302, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.933142653722129, -0.841807104130183, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.494682811921326, 2.40476526616647, 0.0, 0.0899175457548484, -0.0899175457548484, -2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.542344289012958, 2.08362807636934, 0.0, 0.458716212643615, -0.458716212643615, -2.6259723653823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.620459131948551, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.7171557018147, 0.905770207136922, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.90682680420004, -0.37221042885239, 0.0, 3.27903723305242, -3.27903723305242, -0.534616375347651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.970915765365758, -0.804033992486554, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.900503870495761, 2.81058632474091, 0.0, 0.0899175457548483, -0.0899175457548483, -3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.909888337537349, 2.45117212489373, 0.0, 0.458716212643615, -0.458716212643615, -3.36106046243108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.925269022604632, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.944308419373617, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.981654349833448, -0.297382883218982, 0.0, 3.27903723305242, -3.27903723305242, -0.684271466614466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994273361674667, -0.780676396177645, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D11[49][12] = \
    {{4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.22124532708767e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.15463194561016e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.02140518265514e-14, 0.0, 4, -4, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.50990331349021e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.35447209004269e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.22124532708767e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 1.66533453693773e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.50990331349021e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.28785870856518e-14, 0.0, 4, -4, -4.00000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 1.02140518265514e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D20[49][12] = \
    {{4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4, 0.0, 0.0, 0.0, -8.00000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4.0, 4, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {4, 4.0, 0.0, 0.0, 0.0, -8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1[49][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.862424436102575, -0.02363659740277, -0.0214687408093905, 0.00223661194428193, 0.0856596425519241, 0.0947846476133796},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.626030598232005, -0.0215129016516906, -0.0883764826931412, 0.0103339201299721, 0.395777151578119, 0.0777477144047362},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.308431581502674, -0.0179846544760343, -0.124501362992862, 0.0198627332384349, 0.760719638316469, 0.0534720644113193},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0354392941626714, -0.0135352011375129, -0.042706697378312, 0.0252197303305776, 0.965886411764936, 0.0296964622576403},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.107458675803748, -0.00881187799408911, 0.190814230898777, 0.0232353450786583, 0.889886758897448, 0.0123342189229533},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113945427596046, -0.00454434218163359, 0.52425133870491, 0.0150390174901691, 0.575976921626226, 0.00322249195637392},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0488180455563859, -0.00142756028301921, 0.837543269825575, 0.00540444298987963, 0.206983896285125, 0.000313996738824734},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.597861998170088, -0.0944111144487016, -0.0214687408093905, 0.0113592203449441, 0.076537034151262, 0.430121602591797},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.417688245079323, -0.088232834021879, -0.0883764826931412, 0.0524835236096748, 0.353627548098416, 0.352809999927606},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.178147849273431, -0.0768788081977067, -0.124501362992862, 0.100878100058905, 0.679704271495999, 0.242649950362235},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0224475414828925, -0.0607109624193333, -0.042706697378312, 0.128085014746293, 0.863021127349221, 0.134759059185025},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118489802931845, -0.0414177693052163, 0.190814230898777, 0.118006793808845, 0.795115310167261, 0.0559712373621771},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10768242458169, -0.0222081433980425, 0.52425133870491, 0.0763795945376374, 0.514636344578758, 0.0146232901584272},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0441911673657668, -0.0071653220705277, 0.837543269825575, 0.0274478811224619, 0.184940458152543, 0.00142488033571417},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25715007489433, -0.121735792135218, -0.0214687408093905, 0.0261119928923435, 0.0617842616038625, 0.798158203554072},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.152232570219964, -0.124661538780826, -0.0883764826931412, 0.120646431167342, 0.285464640540749, 0.654694379545912},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0166108722965939, -0.122966982845106, -0.124501362992862, 0.231893400404338, 0.548688971150566, 0.450275101986471},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0887621069184765, -0.109703942088382, -0.042706697378312, 0.294435259912846, 0.696670882182668, 0.250066604289657},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124990908080892, -0.0828088505199825, 0.190814230898777, 0.271267962730938, 0.641854141245168, 0.10386342372599},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0945918778860025, -0.0478112120697543, 0.52425133870491, 0.175577492919624, 0.415438446196772, 0.0271358121344514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0364200999294947, -0.0161555984755526, 0.837543269825575, 0.0630957807855733, 0.149292558489432, 0.00264408930446688},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0109870318120258, -0.0109870318120258, -0.0214687408093905, 0.043948127248103, 0.043948127248103, 0.955546549937236},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0507638839635113, -0.0507638839635114, -0.0883764826931412, 0.203055535854045, 0.203055535854045, 0.783793178912073},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.097572796444363, -0.097572796444363, -0.124501362992862, 0.390291185777452, 0.390291185777452, 0.539064584326685},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123888267761939, -0.123888267761939, -0.042706697378312, 0.495553071047757, 0.495553071047757, 0.299377090806677},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.114140262997013, -0.114140262997013, 0.190814230898777, 0.456561051988053, 0.456561051988053, 0.124344191119143},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0738769923895494, -0.0738769923895494, 0.52425133870491, 0.295507969558198, 0.295507969558198, 0.0324867069577934},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0265485424093756, -0.0265485424093756, 0.837543269825575, 0.106194169637503, 0.106194169637502, 0.00316547571817086},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.121735792135218, 0.25715007489433, -0.0214687408093905, 0.0617842616038626, 0.0261119928923435, 0.798158203554073},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124661538780826, 0.152232570219964, -0.0883764826931412, 0.285464640540749, 0.120646431167342, 0.654694379545913},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.122966982845106, 0.0166108722965939, -0.124501362992862, 0.548688971150566, 0.231893400404338, 0.450275101986471},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109703942088382, -0.0887621069184766, -0.042706697378312, 0.696670882182667, 0.294435259912846, 0.250066604289657},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0828088505199825, -0.124990908080892, 0.190814230898777, 0.641854141245168, 0.271267962730938, 0.10386342372599},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0478112120697543, -0.0945918778860025, 0.52425133870491, 0.415438446196772, 0.175577492919624, 0.0271358121344514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0161555984755526, -0.0364200999294946, 0.837543269825575, 0.149292558489432, 0.0630957807855734, 0.00264408930446688},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0944111144487016, 0.597861998170088, -0.0214687408093905, 0.0765370341512621, 0.011359220344944, 0.430121602591797},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.088232834021879, 0.417688245079323, -0.0883764826931412, 0.353627548098416, 0.0524835236096747, 0.352809999927606},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0768788081977066, 0.178147849273431, -0.124501362992862, 0.679704271495999, 0.100878100058904, 0.242649950362234},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0607109624193332, -0.0224475414828926, -0.042706697378312, 0.863021127349221, 0.128085014746293, 0.134759059185024},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0414177693052163, -0.118489802931845, 0.190814230898777, 0.795115310167261, 0.118006793808845, 0.0559712373621771},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0222081433980425, -0.10768242458169, 0.52425133870491, 0.514636344578758, 0.0763795945376375, 0.0146232901584272},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00716532207052775, -0.0441911673657668, 0.837543269825575, 0.184940458152543, 0.0274478811224619, 0.00142488033571417},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0236365974027701, 0.862424436102575, -0.0214687408093905, 0.085659642551924, 0.0022366119442819, 0.0947846476133799},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0215129016516907, 0.626030598232004, -0.0883764826931412, 0.395777151578119, 0.0103339201299722, 0.0777477144047368},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0179846544760343, 0.308431581502673, -0.124501362992862, 0.760719638316469, 0.0198627332384349, 0.0534720644113193},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.013535201137513, 0.0354392941626711, -0.042706697378312, 0.965886411764936, 0.0252197303305778, 0.0296964622576405},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00881187799408917, -0.107458675803748, 0.190814230898777, 0.889886758897448, 0.0232353450786585, 0.0123342189229534},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0045443421816336, -0.113945427596046, 0.52425133870491, 0.575976921626226, 0.0150390174901692, 0.00322249195637392},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00142756028301927, -0.0488180455563859, 0.837543269825575, 0.206983896285125, 0.00540444298987963, 0.000313996738824762}};
    
    static const double FE1_C1_D01[49][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, 0.0, -0.91008245424515, 0.0994961295042323, 3.72066877898606, -0.0994961295042409},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, 0.0, -0.541283787356382, 0.0901116624626435, 2.99245591225012, -0.0901116624626522},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146628, 0.0, 0.0631592911383591, 0.0747309773953598, 1.79895044032792, -0.0747309773953694},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263715, 0.321537430018067, -0.0556915806263827},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268519, -1.2148938791215, -0.0358916160268646},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665344, -2.5764201162714, -0.0183456501665492},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531317, -3.55562615402994, -0.00572663832532894},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616648, 0.0, -0.910082454245149, 0.505317188078666, 3.31484772041163, -0.505317188078675},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, 0.0, -0.541283787356382, 0.457655710987035, 2.62491186372573, -0.457655710987044},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5572998408102, 0.0, 0.0631592911383592, 0.37954086805144, 1.49414054967184, -0.379540868051451},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136925, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591496, -0.2828442981853},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331504, 0.0, 1.58950113154732, 0.182284985121165, -1.36128724821581, -0.182284985121178},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852384, 0.0, 2.27903723305243, 0.0931731957999418, -2.65124766190481, -0.0931731957999569},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486547, 0.0, 2.77494975785231, 0.0290842346342219, -3.57898375033885, -0.0290842346342381},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.0, -0.910082454245149, 1.16159722435195, 2.65856768413835, -1.16159722435196},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, 0.0, 0.0631592911383593, 0.872469073401182, 1.0012123443221, -0.872469073401193},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051478},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124286, 0.0, 1.58950113154732, 0.419027370833912, -1.59802963392856, -0.419027370833926},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881558, 0.0, 2.27903723305243, 0.214181761829116, -2.77225622793398, -0.214181761829131},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130176, 0.0, 2.77494975785231, 0.066857346277851, -3.61675686198248, -0.0668573462778673},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122579, 0.0, -0.910082454245149, 1.95504122712256, 1.86512368136773, -1.95504122712258},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292472, -1.46842035443082},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611156, 0.0, 0.811385494677781, 1.0943072526611, -0.717078242016659, -1.09430725266111},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773655, 0.0, 1.58950113154732, 0.705249434226324, -1.88425169732097, -0.705249434226338},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63951861652621, 0.0, 2.27903723305243, 0.360481383473767, -2.91855584957864, -0.360481383473783},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.88747487892615, 0.0, 2.77494975785231, 0.112525121073825, -3.66242463677846, -0.112525121073842},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161597224351966, 0.0, -0.910082454245149, 2.74848522989318, 1.07167967859712, -2.74848522989319},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948516, 0.0, 0.81138549467778, 1.53842654527073, -1.16119753462629, -1.53842654527074},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166068, 0.0, 1.58950113154732, 0.991471497618736, -2.17047376071338, -0.991471497618751},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170862, 0.0, 2.27903723305243, 0.506781005118419, -3.06485547122329, -0.506781005118435},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.933142653722124, 0.0, 2.77494975785231, 0.158192895869799, -3.70809241157443, -0.158192895869816},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921319, 0.0, -0.910082454245149, 3.40476526616646, 0.415399642323839, -3.40476526616647},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165655991, -3.08362807636934},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620459131948544, 0.0, 0.0631592911383591, 2.55729984081018, -0.683618423086896, -2.55729984081019},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.717155701814694, 0.0, 0.81138549467778, 1.90577020713691, -1.52854119649247, -1.90577020713692},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200036, 0.0, 2.27903723305243, 0.627789571147593, -3.18586403725246, -0.627789571147609},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365754, 0.0, 2.77494975785231, 0.195966007513428, -3.74586552321806, -0.195966007513445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495752, 0.0, -0.91008245424515, 3.81058632474089, 0.00957858374940601, -3.81058632474091},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.36860455018095, -3.45117212489373},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.925269022604624, 0.0, 0.0631592911383587, 2.86210973146626, -0.988428313742976, -2.86210973146627},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.944308419373611, 0.0, 0.81138549467778, 2.13292292469582, -1.75569391405138, -2.13292292469584},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833443, 0.0, 2.27903723305243, 0.702617116781, -3.26069158288587, -0.702617116781017},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674663, 0.0, 2.77494975785231, 0.219323603822338, -3.76922311952697, -0.219323603822354}};
    
    static const double FE1_C1_D02[49][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.28785870856518e-14, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.59872115546023e-14, -7.99999999999998, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.28785870856518e-14, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -8, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4, 0.0, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 4, -1.33226762955019e-14, -7.99999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 3.99999999999999, -1.55431223447522e-14, -7.99999999999998, 0.0}};
    
    static const double FE1_C1_D10[49][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, -0.90050387049576, 0.0, 0.0899175457548491, -0.0899175457548491, 3.71109019523667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, -0.909888337537348, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146627, -0.925269022604631, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, -0.944308419373618, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406945},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425813, -0.964108383973135, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29738288321898, -0.98165434983345, 0.0, 3.27903723305242, -3.27903723305242, 0.684271466614469},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177642, -0.99427336167467, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497028},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616647, -0.494682811921326, 0.0, 0.089917545754849, -0.089917545754849, 2.8994480780878},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.62597236538229},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2282138833315, -0.817715014878821, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852388, -0.906826804200042, 0.0, 3.27903723305242, -3.27903723305242, 0.534616375347654},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486551, -0.970915765365761, 0.0, 3.7749497578523, -3.7749497578523, 0.16688177287921},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548488, -0.0899175457548488, 1.58688800554123},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0520354663032025, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124758, -0.580972629166074, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881562, -0.785818238170868, 0.0, 3.27903723305242, -3.27903723305242, 0.292599243289305},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.84180710413018, -0.933142653722132, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919512},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122574, 0.955041227122573, 0.0, 0.0899175457548487, -0.0899175457548487, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.770641893678191, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.46842035443082, 0.46842035443082, 0.0, 1.06315929113836, -1.06315929113836, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611103, 0.0943072526611104, 0.0, 1.81138549467778, -1.81138549467778, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29475056577366, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.639518616526214, -0.639518616526216, 0.0, 3.27903723305242, -3.27903723305242, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926154, -0.887474878926158, 0.0, 3.7749497578523, -3.7749497578523, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161597224351959, 1.74848522989319, 0.0, 0.0899175457548486, -0.0899175457548486, -1.58688800554123},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.052035466303203, 1.48924832105318, 0.0, 0.458716212643615, -0.458716212643615, -1.43721285474997},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598809, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219266},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166073, -0.00852850238124825, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170866, -0.493218994881564, 0.0, 3.27903723305242, -3.27903723305242, -0.292599243289302},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.933142653722129, -0.841807104130183, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919458},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921326, 2.40476526616647, 0.0, 0.0899175457548484, -0.0899175457548484, -2.8994480780878},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.542344289012958, 2.08362807636934, 0.0, 0.458716212643615, -0.458716212643615, -2.6259723653823},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620459131948551, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7171557018147, 0.905770207136922, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.90682680420004, -0.37221042885239, 0.0, 3.27903723305242, -3.27903723305242, -0.534616375347651},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365758, -0.804033992486554, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879204},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495761, 2.81058632474091, 0.0, 0.0899175457548483, -0.0899175457548483, -3.71109019523667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.909888337537349, 2.45117212489373, 0.0, 0.458716212643615, -0.458716212643615, -3.36106046243108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.925269022604632, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.944308419373617, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406946},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833448, -0.297382883218982, 0.0, 3.27903723305242, -3.27903723305242, -0.684271466614466},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674667, -0.780676396177645, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497023}};
    
    static const double FE1_C1_D11[49][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.22124532708767e-14, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.15463194561016e-14, 0.0, 4, -4, -4.00000000000002},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.02140518265514e-14, 0.0, 4, -4, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.50990331349021e-14, 0.0, 4, -4, -4.00000000000002},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.35447209004269e-14, 0.0, 4, -4, -4.00000000000002},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.22124532708767e-14, 0.0, 4, -4, -4.00000000000002},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -4.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 1.66533453693773e-14, 0.0, 4, -4, -4.00000000000002},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.50990331349021e-14, 0.0, 4, -4, -4.00000000000002},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.28785870856518e-14, 0.0, 4, -4, -4.00000000000002},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 1.02140518265514e-14, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 0.0, 0.0, 3.99999999999999, -3.99999999999999, -4.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 0.0, 0.0, 3.99999999999998, -3.99999999999998, -3.99999999999999}};
    
    static const double FE1_C1_D20[49][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999998},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 3.99999999999999, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -7.99999999999999},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4, 0.0, 0.0, 0.0, -8.00000000000001},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4, 4.0, 0.0, 0.0, 0.0, -8},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.99999999999999, 4, 0.0, 0.0, 0.0, -7.99999999999999}};
    
    static const double FE2_C0[49][15] = \
    {{0.862424436102575, -0.02363659740277, -0.0214687408093905, 0.00223661194428193, 0.0856596425519241, 0.0947846476133796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.626030598232005, -0.0215129016516906, -0.0883764826931412, 0.0103339201299721, 0.395777151578119, 0.0777477144047362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.308431581502674, -0.0179846544760343, -0.124501362992862, 0.0198627332384349, 0.760719638316469, 0.0534720644113193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0354392941626714, -0.0135352011375129, -0.042706697378312, 0.0252197303305776, 0.965886411764936, 0.0296964622576403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.107458675803748, -0.00881187799408911, 0.190814230898777, 0.0232353450786583, 0.889886758897448, 0.0123342189229533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.113945427596046, -0.00454434218163359, 0.52425133870491, 0.0150390174901691, 0.575976921626226, 0.00322249195637392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0488180455563859, -0.00142756028301921, 0.837543269825575, 0.00540444298987963, 0.206983896285125, 0.000313996738824734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.597861998170088, -0.0944111144487016, -0.0214687408093905, 0.0113592203449441, 0.076537034151262, 0.430121602591797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.417688245079323, -0.088232834021879, -0.0883764826931412, 0.0524835236096748, 0.353627548098416, 0.352809999927606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.178147849273431, -0.0768788081977067, -0.124501362992862, 0.100878100058905, 0.679704271495999, 0.242649950362235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0224475414828925, -0.0607109624193333, -0.042706697378312, 0.128085014746293, 0.863021127349221, 0.134759059185025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.118489802931845, -0.0414177693052163, 0.190814230898777, 0.118006793808845, 0.795115310167261, 0.0559712373621771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.10768242458169, -0.0222081433980425, 0.52425133870491, 0.0763795945376374, 0.514636344578758, 0.0146232901584272, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0441911673657668, -0.0071653220705277, 0.837543269825575, 0.0274478811224619, 0.184940458152543, 0.00142488033571417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.25715007489433, -0.121735792135218, -0.0214687408093905, 0.0261119928923435, 0.0617842616038625, 0.798158203554072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.152232570219964, -0.124661538780826, -0.0883764826931412, 0.120646431167342, 0.285464640540749, 0.654694379545912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0166108722965939, -0.122966982845106, -0.124501362992862, 0.231893400404338, 0.548688971150566, 0.450275101986471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0887621069184765, -0.109703942088382, -0.042706697378312, 0.294435259912846, 0.696670882182668, 0.250066604289657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124990908080892, -0.0828088505199825, 0.190814230898777, 0.271267962730938, 0.641854141245168, 0.10386342372599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0945918778860025, -0.0478112120697543, 0.52425133870491, 0.175577492919624, 0.415438446196772, 0.0271358121344514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0364200999294947, -0.0161555984755526, 0.837543269825575, 0.0630957807855733, 0.149292558489432, 0.00264408930446688, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0109870318120258, -0.0109870318120258, -0.0214687408093905, 0.043948127248103, 0.043948127248103, 0.955546549937236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0507638839635113, -0.0507638839635114, -0.0883764826931412, 0.203055535854045, 0.203055535854045, 0.783793178912073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.097572796444363, -0.097572796444363, -0.124501362992862, 0.390291185777452, 0.390291185777452, 0.539064584326685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.123888267761939, -0.123888267761939, -0.042706697378312, 0.495553071047757, 0.495553071047757, 0.299377090806677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.114140262997013, -0.114140262997013, 0.190814230898777, 0.456561051988053, 0.456561051988053, 0.124344191119143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0738769923895494, -0.0738769923895494, 0.52425133870491, 0.295507969558198, 0.295507969558198, 0.0324867069577934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0265485424093756, -0.0265485424093756, 0.837543269825575, 0.106194169637503, 0.106194169637502, 0.00316547571817086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.121735792135218, 0.25715007489433, -0.0214687408093905, 0.0617842616038626, 0.0261119928923435, 0.798158203554073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124661538780826, 0.152232570219964, -0.0883764826931412, 0.285464640540749, 0.120646431167342, 0.654694379545913, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.122966982845106, 0.0166108722965939, -0.124501362992862, 0.548688971150566, 0.231893400404338, 0.450275101986471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.109703942088382, -0.0887621069184766, -0.042706697378312, 0.696670882182667, 0.294435259912846, 0.250066604289657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0828088505199825, -0.124990908080892, 0.190814230898777, 0.641854141245168, 0.271267962730938, 0.10386342372599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0478112120697543, -0.0945918778860025, 0.52425133870491, 0.415438446196772, 0.175577492919624, 0.0271358121344514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0161555984755526, -0.0364200999294946, 0.837543269825575, 0.149292558489432, 0.0630957807855734, 0.00264408930446688, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0944111144487016, 0.597861998170088, -0.0214687408093905, 0.0765370341512621, 0.011359220344944, 0.430121602591797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.088232834021879, 0.417688245079323, -0.0883764826931412, 0.353627548098416, 0.0524835236096747, 0.352809999927606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0768788081977066, 0.178147849273431, -0.124501362992862, 0.679704271495999, 0.100878100058904, 0.242649950362234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0607109624193332, -0.0224475414828926, -0.042706697378312, 0.863021127349221, 0.128085014746293, 0.134759059185024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0414177693052163, -0.118489802931845, 0.190814230898777, 0.795115310167261, 0.118006793808845, 0.0559712373621771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0222081433980425, -0.10768242458169, 0.52425133870491, 0.514636344578758, 0.0763795945376375, 0.0146232901584272, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00716532207052775, -0.0441911673657668, 0.837543269825575, 0.184940458152543, 0.0274478811224619, 0.00142488033571417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0236365974027701, 0.862424436102575, -0.0214687408093905, 0.085659642551924, 0.0022366119442819, 0.0947846476133799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0215129016516907, 0.626030598232004, -0.0883764826931412, 0.395777151578119, 0.0103339201299722, 0.0777477144047368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0179846544760343, 0.308431581502673, -0.124501362992862, 0.760719638316469, 0.0198627332384349, 0.0534720644113193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.013535201137513, 0.0354392941626711, -0.042706697378312, 0.965886411764936, 0.0252197303305778, 0.0296964622576405, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00881187799408917, -0.107458675803748, 0.190814230898777, 0.889886758897448, 0.0232353450786585, 0.0123342189229534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0045443421816336, -0.113945427596046, 0.52425133870491, 0.575976921626226, 0.0150390174901692, 0.00322249195637392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00142756028301927, -0.0488180455563859, 0.837543269825575, 0.206983896285125, 0.00540444298987963, 0.000313996738824762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D01[49][15] = \
    {{-2.81058632474091, 0.0, -0.91008245424515, 0.0994961295042323, 3.72066877898606, -0.0994961295042409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.45117212489373, 0.0, -0.541283787356382, 0.0901116624626435, 2.99245591225012, -0.0901116624626522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86210973146628, 0.0, 0.0631592911383591, 0.0747309773953598, 1.79895044032792, -0.0747309773953694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263715, 0.321537430018067, -0.0556915806263827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268519, -1.2148938791215, -0.0358916160268646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665344, -2.5764201162714, -0.0183456501665492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531317, -3.55562615402994, -0.00572663832532894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.40476526616648, 0.0, -0.910082454245149, 0.505317188078666, 3.31484772041163, -0.505317188078675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.08362807636934, 0.0, -0.541283787356382, 0.457655710987035, 2.62491186372573, -0.457655710987044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.5572998408102, 0.0, 0.0631592911383592, 0.37954086805144, 1.49414054967184, -0.379540868051451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.905770207136925, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591496, -0.2828442981853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.228213883331504, 0.0, 1.58950113154732, 0.182284985121165, -1.36128724821581, -0.182284985121178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.372210428852384, 0.0, 2.27903723305243, 0.0931731957999418, -2.65124766190481, -0.0931731957999569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.804033992486547, 0.0, 2.77494975785231, 0.0290842346342219, -3.57898375033885, -0.0290842346342381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.74848522989319, 0.0, -0.910082454245149, 1.16159722435195, 2.65856768413835, -1.16159722435196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.06437163546045, 0.0, 0.0631592911383593, 0.872469073401182, 1.0012123443221, -0.872469073401193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00852850238124286, 0.0, 1.58950113154732, 0.419027370833912, -1.59802963392856, -0.419027370833926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.493218994881558, 0.0, 2.27903723305243, 0.214181761829116, -2.77225622793398, -0.214181761829131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.841807104130176, 0.0, 2.77494975785231, 0.066857346277851, -3.61675686198248, -0.0668573462778673, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.955041227122579, 0.0, -0.910082454245149, 1.95504122712256, 1.86512368136773, -1.95504122712258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292472, -1.46842035443082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0943072526611156, 0.0, 0.811385494677781, 1.0943072526611, -0.717078242016659, -1.09430725266111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.294750565773655, 0.0, 1.58950113154732, 0.705249434226324, -1.88425169732097, -0.705249434226338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.63951861652621, 0.0, 2.27903723305243, 0.360481383473767, -2.91855584957864, -0.360481383473783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.88747487892615, 0.0, 2.77494975785231, 0.112525121073825, -3.66242463677846, -0.112525121073842, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.161597224351966, 0.0, -0.910082454245149, 2.74848522989318, 1.07167967859712, -2.74848522989319, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.349812039948516, 0.0, 0.81138549467778, 1.53842654527073, -1.16119753462629, -1.53842654527074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.580972629166068, 0.0, 1.58950113154732, 0.991471497618736, -2.17047376071338, -0.991471497618751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.785818238170862, 0.0, 2.27903723305243, 0.506781005118419, -3.06485547122329, -0.506781005118435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.933142653722124, 0.0, 2.77494975785231, 0.158192895869799, -3.70809241157443, -0.158192895869816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.494682811921319, 0.0, -0.910082454245149, 3.40476526616646, 0.415399642323839, -3.40476526616647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165655991, -3.08362807636934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.620459131948544, 0.0, 0.0631592911383591, 2.55729984081018, -0.683618423086896, -2.55729984081019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.717155701814694, 0.0, 0.81138549467778, 1.90577020713691, -1.52854119649247, -1.90577020713692, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.906826804200036, 0.0, 2.27903723305243, 0.627789571147593, -3.18586403725246, -0.627789571147609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.970915765365754, 0.0, 2.77494975785231, 0.195966007513428, -3.74586552321806, -0.195966007513445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.900503870495752, 0.0, -0.91008245424515, 3.81058632474089, 0.00957858374940601, -3.81058632474091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.36860455018095, -3.45117212489373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.925269022604624, 0.0, 0.0631592911383587, 2.86210973146626, -0.988428313742976, -2.86210973146627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.944308419373611, 0.0, 0.81138549467778, 2.13292292469582, -1.75569391405138, -2.13292292469584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.981654349833443, 0.0, 2.27903723305243, 0.702617116781, -3.26069158288587, -0.702617116781017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994273361674663, 0.0, 2.77494975785231, 0.219323603822338, -3.76922311952697, -0.219323603822354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D10[49][15] = \
    {{-2.81058632474091, -0.90050387049576, 0.0, 0.0899175457548491, -0.0899175457548491, 3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.45117212489373, -0.909888337537348, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86210973146627, -0.925269022604631, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.13292292469584, -0.944308419373618, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.374607252425813, -0.964108383973135, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.29738288321898, -0.98165434983345, 0.0, 3.27903723305242, -3.27903723305242, 0.684271466614469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.780676396177642, -0.99427336167467, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.40476526616647, -0.494682811921326, 0.0, 0.089917545754849, -0.089917545754849, 2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.62597236538229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.2282138833315, -0.817715014878821, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.372210428852388, -0.906826804200042, 0.0, 3.27903723305242, -3.27903723305242, 0.534616375347654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.804033992486551, -0.970915765365761, 0.0, 3.7749497578523, -3.7749497578523, 0.16688177287921, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548488, -0.0899175457548488, 1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.48924832105318, 0.0520354663032025, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00852850238124758, -0.580972629166074, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.493218994881562, -0.785818238170868, 0.0, 3.27903723305242, -3.27903723305242, 0.292599243289305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.84180710413018, -0.933142653722132, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.955041227122574, 0.955041227122573, 0.0, 0.0899175457548487, -0.0899175457548487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.770641893678191, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.46842035443082, 0.46842035443082, 0.0, 1.06315929113836, -1.06315929113836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0943072526611103, 0.0943072526611104, 0.0, 1.81138549467778, -1.81138549467778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.29475056577366, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.639518616526214, -0.639518616526216, 0.0, 3.27903723305242, -3.27903723305242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.887474878926154, -0.887474878926158, 0.0, 3.7749497578523, -3.7749497578523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.161597224351959, 1.74848522989319, 0.0, 0.0899175457548486, -0.0899175457548486, -1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.052035466303203, 1.48924832105318, 0.0, 0.458716212643615, -0.458716212643615, -1.43721285474997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.127530926598809, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.580972629166073, -0.00852850238124825, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.785818238170866, -0.493218994881564, 0.0, 3.27903723305242, -3.27903723305242, -0.292599243289302, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.933142653722129, -0.841807104130183, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.494682811921326, 2.40476526616647, 0.0, 0.0899175457548484, -0.0899175457548484, -2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.542344289012958, 2.08362807636934, 0.0, 0.458716212643615, -0.458716212643615, -2.6259723653823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.620459131948551, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.7171557018147, 0.905770207136922, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.90682680420004, -0.37221042885239, 0.0, 3.27903723305242, -3.27903723305242, -0.534616375347651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.970915765365758, -0.804033992486554, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.900503870495761, 2.81058632474091, 0.0, 0.0899175457548483, -0.0899175457548483, -3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.909888337537349, 2.45117212489373, 0.0, 0.458716212643615, -0.458716212643615, -3.36106046243108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.925269022604632, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.944308419373617, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.981654349833448, -0.297382883218982, 0.0, 3.27903723305242, -3.27903723305242, -0.684271466614466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994273361674667, -0.780676396177645, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1[49][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.862424436102575, -0.02363659740277, -0.0214687408093905, 0.00223661194428193, 0.0856596425519241, 0.0947846476133796, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.626030598232005, -0.0215129016516906, -0.0883764826931412, 0.0103339201299721, 0.395777151578119, 0.0777477144047362, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.308431581502674, -0.0179846544760343, -0.124501362992862, 0.0198627332384349, 0.760719638316469, 0.0534720644113193, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0354392941626714, -0.0135352011375129, -0.042706697378312, 0.0252197303305776, 0.965886411764936, 0.0296964622576403, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.107458675803748, -0.00881187799408911, 0.190814230898777, 0.0232353450786583, 0.889886758897448, 0.0123342189229533, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113945427596046, -0.00454434218163359, 0.52425133870491, 0.0150390174901691, 0.575976921626226, 0.00322249195637392, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0488180455563859, -0.00142756028301921, 0.837543269825575, 0.00540444298987963, 0.206983896285125, 0.000313996738824734, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.597861998170088, -0.0944111144487016, -0.0214687408093905, 0.0113592203449441, 0.076537034151262, 0.430121602591797, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.417688245079323, -0.088232834021879, -0.0883764826931412, 0.0524835236096748, 0.353627548098416, 0.352809999927606, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.178147849273431, -0.0768788081977067, -0.124501362992862, 0.100878100058905, 0.679704271495999, 0.242649950362235, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0224475414828925, -0.0607109624193333, -0.042706697378312, 0.128085014746293, 0.863021127349221, 0.134759059185025, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118489802931845, -0.0414177693052163, 0.190814230898777, 0.118006793808845, 0.795115310167261, 0.0559712373621771, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10768242458169, -0.0222081433980425, 0.52425133870491, 0.0763795945376374, 0.514636344578758, 0.0146232901584272, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0441911673657668, -0.0071653220705277, 0.837543269825575, 0.0274478811224619, 0.184940458152543, 0.00142488033571417, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25715007489433, -0.121735792135218, -0.0214687408093905, 0.0261119928923435, 0.0617842616038625, 0.798158203554072, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.152232570219964, -0.124661538780826, -0.0883764826931412, 0.120646431167342, 0.285464640540749, 0.654694379545912, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0166108722965939, -0.122966982845106, -0.124501362992862, 0.231893400404338, 0.548688971150566, 0.450275101986471, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0887621069184765, -0.109703942088382, -0.042706697378312, 0.294435259912846, 0.696670882182668, 0.250066604289657, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124990908080892, -0.0828088505199825, 0.190814230898777, 0.271267962730938, 0.641854141245168, 0.10386342372599, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0945918778860025, -0.0478112120697543, 0.52425133870491, 0.175577492919624, 0.415438446196772, 0.0271358121344514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0364200999294947, -0.0161555984755526, 0.837543269825575, 0.0630957807855733, 0.149292558489432, 0.00264408930446688, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0109870318120258, -0.0109870318120258, -0.0214687408093905, 0.043948127248103, 0.043948127248103, 0.955546549937236, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0507638839635113, -0.0507638839635114, -0.0883764826931412, 0.203055535854045, 0.203055535854045, 0.783793178912073, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.097572796444363, -0.097572796444363, -0.124501362992862, 0.390291185777452, 0.390291185777452, 0.539064584326685, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123888267761939, -0.123888267761939, -0.042706697378312, 0.495553071047757, 0.495553071047757, 0.299377090806677, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.114140262997013, -0.114140262997013, 0.190814230898777, 0.456561051988053, 0.456561051988053, 0.124344191119143, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0738769923895494, -0.0738769923895494, 0.52425133870491, 0.295507969558198, 0.295507969558198, 0.0324867069577934, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0265485424093756, -0.0265485424093756, 0.837543269825575, 0.106194169637503, 0.106194169637502, 0.00316547571817086, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.121735792135218, 0.25715007489433, -0.0214687408093905, 0.0617842616038626, 0.0261119928923435, 0.798158203554073, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124661538780826, 0.152232570219964, -0.0883764826931412, 0.285464640540749, 0.120646431167342, 0.654694379545913, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.122966982845106, 0.0166108722965939, -0.124501362992862, 0.548688971150566, 0.231893400404338, 0.450275101986471, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109703942088382, -0.0887621069184766, -0.042706697378312, 0.696670882182667, 0.294435259912846, 0.250066604289657, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0828088505199825, -0.124990908080892, 0.190814230898777, 0.641854141245168, 0.271267962730938, 0.10386342372599, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0478112120697543, -0.0945918778860025, 0.52425133870491, 0.415438446196772, 0.175577492919624, 0.0271358121344514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0161555984755526, -0.0364200999294946, 0.837543269825575, 0.149292558489432, 0.0630957807855734, 0.00264408930446688, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0944111144487016, 0.597861998170088, -0.0214687408093905, 0.0765370341512621, 0.011359220344944, 0.430121602591797, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.088232834021879, 0.417688245079323, -0.0883764826931412, 0.353627548098416, 0.0524835236096747, 0.352809999927606, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0768788081977066, 0.178147849273431, -0.124501362992862, 0.679704271495999, 0.100878100058904, 0.242649950362234, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0607109624193332, -0.0224475414828926, -0.042706697378312, 0.863021127349221, 0.128085014746293, 0.134759059185024, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0414177693052163, -0.118489802931845, 0.190814230898777, 0.795115310167261, 0.118006793808845, 0.0559712373621771, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0222081433980425, -0.10768242458169, 0.52425133870491, 0.514636344578758, 0.0763795945376375, 0.0146232901584272, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00716532207052775, -0.0441911673657668, 0.837543269825575, 0.184940458152543, 0.0274478811224619, 0.00142488033571417, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0236365974027701, 0.862424436102575, -0.0214687408093905, 0.085659642551924, 0.0022366119442819, 0.0947846476133799, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0215129016516907, 0.626030598232004, -0.0883764826931412, 0.395777151578119, 0.0103339201299722, 0.0777477144047368, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0179846544760343, 0.308431581502673, -0.124501362992862, 0.760719638316469, 0.0198627332384349, 0.0534720644113193, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.013535201137513, 0.0354392941626711, -0.042706697378312, 0.965886411764936, 0.0252197303305778, 0.0296964622576405, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00881187799408917, -0.107458675803748, 0.190814230898777, 0.889886758897448, 0.0232353450786585, 0.0123342189229534, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0045443421816336, -0.113945427596046, 0.52425133870491, 0.575976921626226, 0.0150390174901692, 0.00322249195637392, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00142756028301927, -0.0488180455563859, 0.837543269825575, 0.206983896285125, 0.00540444298987963, 0.000313996738824762, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1_D01[49][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, 0.0, -0.91008245424515, 0.0994961295042323, 3.72066877898606, -0.0994961295042409, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, 0.0, -0.541283787356382, 0.0901116624626435, 2.99245591225012, -0.0901116624626522, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146628, 0.0, 0.0631592911383591, 0.0747309773953598, 1.79895044032792, -0.0747309773953694, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263715, 0.321537430018067, -0.0556915806263827, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268519, -1.2148938791215, -0.0358916160268646, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665344, -2.5764201162714, -0.0183456501665492, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531317, -3.55562615402994, -0.00572663832532894, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616648, 0.0, -0.910082454245149, 0.505317188078666, 3.31484772041163, -0.505317188078675, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, 0.0, -0.541283787356382, 0.457655710987035, 2.62491186372573, -0.457655710987044, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5572998408102, 0.0, 0.0631592911383592, 0.37954086805144, 1.49414054967184, -0.379540868051451, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136925, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591496, -0.2828442981853, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331504, 0.0, 1.58950113154732, 0.182284985121165, -1.36128724821581, -0.182284985121178, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852384, 0.0, 2.27903723305243, 0.0931731957999418, -2.65124766190481, -0.0931731957999569, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486547, 0.0, 2.77494975785231, 0.0290842346342219, -3.57898375033885, -0.0290842346342381, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.0, -0.910082454245149, 1.16159722435195, 2.65856768413835, -1.16159722435196, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, 0.0, 0.0631592911383593, 0.872469073401182, 1.0012123443221, -0.872469073401193, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051478, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124286, 0.0, 1.58950113154732, 0.419027370833912, -1.59802963392856, -0.419027370833926, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881558, 0.0, 2.27903723305243, 0.214181761829116, -2.77225622793398, -0.214181761829131, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130176, 0.0, 2.77494975785231, 0.066857346277851, -3.61675686198248, -0.0668573462778673, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122579, 0.0, -0.910082454245149, 1.95504122712256, 1.86512368136773, -1.95504122712258, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292472, -1.46842035443082, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611156, 0.0, 0.811385494677781, 1.0943072526611, -0.717078242016659, -1.09430725266111, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773655, 0.0, 1.58950113154732, 0.705249434226324, -1.88425169732097, -0.705249434226338, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63951861652621, 0.0, 2.27903723305243, 0.360481383473767, -2.91855584957864, -0.360481383473783, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.88747487892615, 0.0, 2.77494975785231, 0.112525121073825, -3.66242463677846, -0.112525121073842, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161597224351966, 0.0, -0.910082454245149, 2.74848522989318, 1.07167967859712, -2.74848522989319, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948516, 0.0, 0.81138549467778, 1.53842654527073, -1.16119753462629, -1.53842654527074, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166068, 0.0, 1.58950113154732, 0.991471497618736, -2.17047376071338, -0.991471497618751, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170862, 0.0, 2.27903723305243, 0.506781005118419, -3.06485547122329, -0.506781005118435, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.933142653722124, 0.0, 2.77494975785231, 0.158192895869799, -3.70809241157443, -0.158192895869816, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921319, 0.0, -0.910082454245149, 3.40476526616646, 0.415399642323839, -3.40476526616647, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165655991, -3.08362807636934, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620459131948544, 0.0, 0.0631592911383591, 2.55729984081018, -0.683618423086896, -2.55729984081019, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.717155701814694, 0.0, 0.81138549467778, 1.90577020713691, -1.52854119649247, -1.90577020713692, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200036, 0.0, 2.27903723305243, 0.627789571147593, -3.18586403725246, -0.627789571147609, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365754, 0.0, 2.77494975785231, 0.195966007513428, -3.74586552321806, -0.195966007513445, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495752, 0.0, -0.91008245424515, 3.81058632474089, 0.00957858374940601, -3.81058632474091, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.36860455018095, -3.45117212489373, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.925269022604624, 0.0, 0.0631592911383587, 2.86210973146626, -0.988428313742976, -2.86210973146627, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.944308419373611, 0.0, 0.81138549467778, 2.13292292469582, -1.75569391405138, -2.13292292469584, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833443, 0.0, 2.27903723305243, 0.702617116781, -3.26069158288587, -0.702617116781017, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674663, 0.0, 2.77494975785231, 0.219323603822338, -3.76922311952697, -0.219323603822354, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1_D10[49][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, -0.90050387049576, 0.0, 0.0899175457548491, -0.0899175457548491, 3.71109019523667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, -0.909888337537348, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146627, -0.925269022604631, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, -0.944308419373618, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406945, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425813, -0.964108383973135, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29738288321898, -0.98165434983345, 0.0, 3.27903723305242, -3.27903723305242, 0.684271466614469, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177642, -0.99427336167467, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497028, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616647, -0.494682811921326, 0.0, 0.089917545754849, -0.089917545754849, 2.8994480780878, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.62597236538229, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2282138833315, -0.817715014878821, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852388, -0.906826804200042, 0.0, 3.27903723305242, -3.27903723305242, 0.534616375347654, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486551, -0.970915765365761, 0.0, 3.7749497578523, -3.7749497578523, 0.16688177287921, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548488, -0.0899175457548488, 1.58688800554123, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0520354663032025, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124758, -0.580972629166074, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881562, -0.785818238170868, 0.0, 3.27903723305242, -3.27903723305242, 0.292599243289305, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.84180710413018, -0.933142653722132, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919512, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122574, 0.955041227122573, 0.0, 0.0899175457548487, -0.0899175457548487, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.770641893678191, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.46842035443082, 0.46842035443082, 0.0, 1.06315929113836, -1.06315929113836, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611103, 0.0943072526611104, 0.0, 1.81138549467778, -1.81138549467778, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29475056577366, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.639518616526214, -0.639518616526216, 0.0, 3.27903723305242, -3.27903723305242, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926154, -0.887474878926158, 0.0, 3.7749497578523, -3.7749497578523, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161597224351959, 1.74848522989319, 0.0, 0.0899175457548486, -0.0899175457548486, -1.58688800554123, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.052035466303203, 1.48924832105318, 0.0, 0.458716212643615, -0.458716212643615, -1.43721285474997, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598809, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219266, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166073, -0.00852850238124825, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170866, -0.493218994881564, 0.0, 3.27903723305242, -3.27903723305242, -0.292599243289302, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.933142653722129, -0.841807104130183, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919458, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921326, 2.40476526616647, 0.0, 0.0899175457548484, -0.0899175457548484, -2.8994480780878, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.542344289012958, 2.08362807636934, 0.0, 0.458716212643615, -0.458716212643615, -2.6259723653823, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620459131948551, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7171557018147, 0.905770207136922, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.90682680420004, -0.37221042885239, 0.0, 3.27903723305242, -3.27903723305242, -0.534616375347651, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365758, -0.804033992486554, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879204, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495761, 2.81058632474091, 0.0, 0.0899175457548483, -0.0899175457548483, -3.71109019523667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.909888337537349, 2.45117212489373, 0.0, 0.458716212643615, -0.458716212643615, -3.36106046243108, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.925269022604632, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.944308419373617, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406946, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833448, -0.297382883218982, 0.0, 3.27903723305242, -3.27903723305242, -0.684271466614466, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674667, -0.780676396177645, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497023, 0.0, 0.0, 0.0}};
    
    static const double FE2_C2[49][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.952646581185227, 0.0248740323760607, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.862793031223432, 0.0225279156156635, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.715527432866568, 0.0186827443488428, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.533230731173959, 0.013922895156596, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.343651813106453, 0.00897290400671669, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.175654279195255, 0.00458641254163794, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0548309009555892, 0.00143165958133301, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.851191316541618, 0.126329297019669, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.770907019092335, 0.114413927746761, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.639324960202548, 0.0948852170128629, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47644255178423, 0.0707110745463253, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.307053470832875, 0.0455712462802949, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.156947392786903, 0.0232932989499898, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0489915018783619, 0.00727105865856031, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687121307473297, 0.29039930608799, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.622312080263295, 0.263008866575801, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.516092908865112, 0.218117268350298, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.384606636317686, 0.16254699001287, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.247867874404688, 0.104756842708482, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.126695251279609, 0.0535454404572833, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0395482239674547, 0.0167143365694676, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.488760306780644, 0.488760306780644, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.442660473419548, 0.442660473419548, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.367105088607705, 0.367105088607705, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.273576813165278, 0.273576813165278, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.176312358556585, 0.176312358556585, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0901203458684462, 0.0901203458684462, 0.819759308263107},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0281312802684611, 0.0281312802684611, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29039930608799, 0.687121307473297, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.263008866575801, 0.622312080263295, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.218117268350298, 0.516092908865112, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16254699001287, 0.384606636317686, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.104756842708482, 0.247867874404688, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0535454404572833, 0.126695251279609, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0167143365694676, 0.0395482239674547, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.126329297019669, 0.851191316541618, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.114413927746761, 0.770907019092335, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0948852170128628, 0.639324960202548, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0707110745463253, 0.47644255178423, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0455712462802949, 0.307053470832875, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0232932989499898, 0.156947392786903, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00727105865856031, 0.0489915018783619, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0248740323760608, 0.952646581185227, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225279156156637, 0.862793031223432, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0186827443488428, 0.715527432866568, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0139228951565962, 0.533230731173959, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00897290400671674, 0.343651813106453, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00458641254163794, 0.175654279195255, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00143165958133301, 0.0548309009555892, 0.943737439463078}};
    
    static const double FE3[49][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 225; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 25867982
    for (unsigned int ip = 0; ip < 49; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      
      // Total number of operations to compute function values = 2
      for (unsigned int r = 0; r < 1; r++)
      {
        F10 += FE3[ip][0]*w[3][0];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 336
      for (unsigned int r = 0; r < 12; r++)
      {
        F0 += FE1_C1_D10[ip][r]*w[1][r];
        F1 += FE1_C1_D01[ip][r]*w[1][r];
        F2 += FE1_C0_D10[ip][r]*w[1][r];
        F3 += FE1_C0_D01[ip][r]*w[1][r];
        F4 += FE1_C0_D20[ip][r]*w[1][r];
        F5 += FE1_C0_D11[ip][r]*w[1][r];
        F6 += FE1_C0_D02[ip][r]*w[1][r];
        F7 += FE1_C1_D20[ip][r]*w[1][r];
        F8 += FE1_C1_D11[ip][r]*w[1][r];
        F9 += FE1_C1_D02[ip][r]*w[1][r];
        F16 += FE1_C0[ip][r]*w[2][r];
        F17 += FE1_C0[ip][r]*w[1][r];
        F19 += FE1_C1[ip][r]*w[2][r];
        F20 += FE1_C1[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 180
      for (unsigned int r = 0; r < 15; r++)
      {
        F11 += FE2_C0_D10[ip][r]*w[0][r];
        F12 += FE2_C0_D01[ip][r]*w[0][r];
        F13 += FE2_C1_D10[ip][r]*w[0][r];
        F14 += FE2_C1_D01[ip][r]*w[0][r];
        F15 += FE2_C0[ip][r]*w[0][r];
        F18 += FE2_C1[ip][r]*w[0][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 527400
      for (unsigned int j = 0; j < 15; j++)
      {
        for (unsigned int k = 0; k < 15; k++)
        {
          // Number of operations to compute entry: 2344
          A[j*15 + k] += (((((FE2_C0[ip][j]*(FE2_C0[ip][k]*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + FE2_C1[ip][j]*(FE2_C1[ip][k]*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*1000.0/(F10) + (FE2_C2[ip][j]*((((((K[0]*FE2_C0_D10[ip][k] + K[2]*FE2_C0_D01[ip][k]))*((((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + FE2_C0[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + (((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))))) + (((K[0]*FE2_C1_D10[ip][k] + K[2]*FE2_C1_D01[ip][k]))*(((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + FE2_C1[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[0]*K[1]*F7 + K[0]*K[3]*F8 + K[2]*K[1]*F8 + K[2]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[0]*K[0]*F4 + K[0]*K[2]*F5 + K[2]*K[0]*F5 + K[2]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[0]*K[1]*F4 + K[0]*K[3]*F5 + K[2]*K[1]*F5 + K[2]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[0]*K[0]*F7 + K[0]*K[2]*F8 + K[2]*K[0]*F8 + K[2]*K[2]*F9)))))))))) + ((((K[1]*FE2_C0_D10[ip][k] + K[3]*FE2_C0_D01[ip][k]))*(((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + FE2_C0[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (-1.0)*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + ((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))))) + (((K[1]*FE2_C1_D10[ip][k] + K[3]*FE2_C1_D01[ip][k]))*((((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + FE2_C1[ip][k]*(((((-1.0)*(((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))) + (K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))) + (((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((((((K[0]*F2 + K[2]*F3) + 1.0))*((K[1]*K[1]*F7 + K[1]*K[3]*F8 + K[3]*K[1]*F8 + K[3]*K[3]*F9)) + (((K[1]*F0 + K[3]*F1) + 1.0))*((K[1]*K[0]*F4 + K[1]*K[2]*F5 + K[3]*K[0]*F5 + K[3]*K[2]*F6))) + (-1.0)*((((K[0]*F0 + K[2]*F1))*((K[1]*K[1]*F4 + K[1]*K[3]*F5 + K[3]*K[1]*F5 + K[3]*K[3]*F6)) + ((K[1]*F2 + K[3]*F3))*((K[1]*K[0]*F7 + K[1]*K[2]*F8 + K[3]*K[0]*F8 + K[3]*K[2]*F9)))))))))))))*(-1.0)) + ((FE2_C0[ip][j]*(((((((K[0]*FE2_C0_D10[ip][k] + K[2]*FE2_C0_D01[ip][k]))*((((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[0]*FE2_C1_D10[ip][k] + K[2]*FE2_C1_D01[ip][k]))*(((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(((-1.0)*(((-1.0)*F16 + F17)/(F10)) + F15)) + FE2_C0[ip][k]*((((K[0]*F11 + K[2]*F12))*((((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[0]*F13 + K[2]*F14))*(((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))) + (((((K[1]*FE2_C0_D10[ip][k] + K[3]*FE2_C0_D01[ip][k]))*((((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*FE2_C1_D10[ip][k] + K[3]*FE2_C1_D01[ip][k]))*(((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(((-1.0)*(((-1.0)*F19 + F20)/(F10)) + F18)) + FE2_C1[ip][k]*((((K[1]*F11 + K[3]*F12))*((((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F13 + K[3]*F14))*(((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))))) + FE2_C1[ip][j]*(((((((K[0]*FE2_C0_D10[ip][k] + K[2]*FE2_C0_D01[ip][k]))*(((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[0]*FE2_C1_D10[ip][k] + K[2]*FE2_C1_D01[ip][k]))*((((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(((-1.0)*(((-1.0)*F16 + F17)/(F10)) + F15)) + FE2_C0[ip][k]*((((K[0]*F11 + K[2]*F12))*(((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[0]*F13 + K[2]*F14))*((((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))) + (((((K[1]*FE2_C0_D10[ip][k] + K[3]*FE2_C0_D01[ip][k]))*(((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*FE2_C1_D10[ip][k] + K[3]*FE2_C1_D01[ip][k]))*((((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))*(((-1.0)*(((-1.0)*F19 + F20)/(F10)) + F18)) + FE2_C1[ip][k]*((((K[1]*F11 + K[3]*F12))*(((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((K[1]*F13 + K[3]*F14))*((((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))))*1000.0) + ((((K[0]*FE2_C0_D10[ip][j] + K[2]*FE2_C0_D01[ip][j]))*(((((((K[0]*FE2_C1_D10[ip][k] + K[2]*FE2_C1_D01[ip][k]) + (K[1]*FE2_C0_D10[ip][k] + K[3]*FE2_C0_D01[ip][k]))/(2.0))*2.0)*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((2.0*((K[0]*FE2_C0_D10[ip][k] + K[2]*FE2_C0_D01[ip][k]))/(2.0))*2.0 + FE2_C2[ip][k]*1.0*(-1.0)))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + ((K[0]*FE2_C1_D10[ip][j] + K[2]*FE2_C1_D01[ip][j]))*(((((((K[0]*FE2_C1_D10[ip][k] + K[2]*FE2_C1_D01[ip][k]) + (K[1]*FE2_C0_D10[ip][k] + K[3]*FE2_C0_D01[ip][k]))/(2.0))*2.0)*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((K[1]*F0 + K[3]*F1) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((2.0*((K[1]*FE2_C1_D10[ip][k] + K[3]*FE2_C1_D01[ip][k]))/(2.0))*2.0 + FE2_C2[ip][k]*1.0*(-1.0)))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((-1.0)*((K[1]*F2 + K[3]*F3))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))))) + (((K[1]*FE2_C0_D10[ip][j] + K[3]*FE2_C0_D01[ip][j]))*(((((((K[0]*FE2_C1_D10[ip][k] + K[2]*FE2_C1_D01[ip][k]) + (K[1]*FE2_C0_D10[ip][k] + K[3]*FE2_C0_D01[ip][k]))/(2.0))*2.0)*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((2.0*((K[0]*FE2_C0_D10[ip][k] + K[2]*FE2_C0_D01[ip][k]))/(2.0))*2.0 + FE2_C2[ip][k]*1.0*(-1.0)))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))) + ((K[1]*FE2_C1_D10[ip][j] + K[3]*FE2_C1_D01[ip][j]))*(((((((K[0]*FE2_C1_D10[ip][k] + K[2]*FE2_C1_D01[ip][k]) + (K[1]*FE2_C0_D10[ip][k] + K[3]*FE2_C0_D01[ip][k]))/(2.0))*2.0)*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*((-1.0)*((K[0]*F0 + K[2]*F1))/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))) + ((((2.0*((K[1]*FE2_C1_D10[ip][k] + K[3]*FE2_C1_D01[ip][k]))/(2.0))*2.0 + FE2_C2[ip][k]*1.0*(-1.0)))*(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1))))))*(((K[0]*F2 + K[2]*F3) + 1.0)/(((((K[0]*F2 + K[2]*F3) + 1.0))*(((K[1]*F0 + K[3]*F1) + 1.0)) + (-1.0)*(((K[1]*F2 + K[3]*F3))*((K[0]*F0 + K[2]*F1)))))))))))*W49[ip]*det;
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_exterior_facet_integral_0_2: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_exterior_facet_integral_0_2() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_exterior_facet_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, true, false, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    // Compute facet normals from the facet scale factor constants
    
    // Facet area
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W5[5] = {0.118463442528094, 0.239314335249683, 0.284444444444444, 0.239314335249683, 0.118463442528094};
    // Quadrature points on the UFC reference element: (0.046910077030668), (0.230765344947158), (0.5), (0.769234655052841), (0.953089922969332)
    
    // Values of basis functions at quadrature points.
    static const double FE1_f0_C0_D01[5][12] = \
    {{0.999999999999995, 0.0, -0.812359691877328, 3.81235969187731, -0.187640308122659, -3.81235969187733, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, -0.0769386202113653, 3.07693862021135, -0.923061379788622, -3.07693862021137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, 1, 1.99999999999999, -1.99999999999999, -2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, 2.07693862021137, 0.923061379788617, -3.07693862021136, -0.923061379788633, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, 2.81235969187733, 0.187640308122653, -3.81235969187732, -0.18764030812267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_f0_C0_D10[5][12] = \
    {{1, 2.81235969187733, 0.0, 0.18764030812267, -0.18764030812267, -3.81235969187733, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1, 2.07693862021137, 0.0, 0.923061379788632, -0.923061379788632, -3.07693862021137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1, 1, 0.0, 2, -2, -2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1.0, -0.076938620211366, 0.0, 3.07693862021136, -3.07693862021136, -0.923061379788634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999998, -0.812359691877329, 0.0, 3.81235969187732, -3.81235969187732, -0.18764030812267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_f0_C1_D01[5][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, -0.812359691877328, 3.81235969187731, -0.187640308122659, -3.81235969187733},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, -0.0769386202113653, 3.07693862021135, -0.923061379788622, -3.07693862021137},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, 1, 1.99999999999999, -1.99999999999999, -2},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, 2.07693862021137, 0.923061379788617, -3.07693862021136, -0.923061379788633},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, 2.81235969187733, 0.187640308122653, -3.81235969187732, -0.18764030812267}};
    
    static const double FE1_f0_C1_D10[5][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 2.81235969187733, 0.0, 0.18764030812267, -0.18764030812267, -3.81235969187733},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 2.07693862021137, 0.0, 0.923061379788632, -0.923061379788632, -3.07693862021137},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 0.0, 2, -2, -2},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.076938620211366, 0.0, 3.07693862021136, -3.07693862021136, -0.923061379788634},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999998, -0.812359691877329, 0.0, 3.81235969187732, -3.81235969187732, -0.18764030812267}};
    
    static const double FE2_f0_C0[5][15] = \
    {{0.0, 0.863670879562042, -0.0425089663766216, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.414209254015687, -0.124260056089996, 0.710050802074309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -0.124260056089996, 0.414209254015687, 0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -0.0425089663766216, 0.863670879562042, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C0_D01[5][15] = \
    {{0.999999999999995, 0.0, -0.812359691877328, 3.81235969187731, -0.187640308122659, -3.81235969187733, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, -0.0769386202113653, 3.07693862021135, -0.923061379788622, -3.07693862021137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, 1, 1.99999999999999, -1.99999999999999, -2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, 2.07693862021137, 0.923061379788617, -3.07693862021136, -0.923061379788633, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, 2.81235969187733, 0.187640308122653, -3.81235969187732, -0.18764030812267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C0_D10[5][15] = \
    {{1, 2.81235969187733, 0.0, 0.18764030812267, -0.18764030812267, -3.81235969187733, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1, 2.07693862021137, 0.0, 0.923061379788632, -0.923061379788632, -3.07693862021137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1, 1, 0.0, 2, -2, -2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1.0, -0.076938620211366, 0.0, 3.07693862021136, -3.07693862021136, -0.923061379788634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999998, -0.812359691877329, 0.0, 3.81235969187732, -3.81235969187732, -0.18764030812267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C1[5][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.863670879562042, -0.0425089663766216, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.414209254015687, -0.124260056089996, 0.710050802074309, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124260056089996, 0.414209254015687, 0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0425089663766216, 0.863670879562042, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C1_D01[5][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, -0.812359691877328, 3.81235969187731, -0.187640308122659, -3.81235969187733, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, -0.0769386202113653, 3.07693862021135, -0.923061379788622, -3.07693862021137, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, 1, 1.99999999999999, -1.99999999999999, -2, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, 2.07693862021137, 0.923061379788617, -3.07693862021136, -0.923061379788633, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, 2.81235969187733, 0.187640308122653, -3.81235969187732, -0.18764030812267, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C1_D10[5][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 2.81235969187733, 0.0, 0.18764030812267, -0.18764030812267, -3.81235969187733, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 2.07693862021137, 0.0, 0.923061379788632, -0.923061379788632, -3.07693862021137, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 0.0, 2, -2, -2, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.076938620211366, 0.0, 3.07693862021136, -3.07693862021136, -0.923061379788634, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999998, -0.812359691877329, 0.0, 3.81235969187732, -3.81235969187732, -0.18764030812267, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C2[5][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.953089922969332, 0.046910077030668},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.769234655052842, 0.230765344947158},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.230765344947159, 0.769234655052841},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0469100770306681, 0.953089922969332}};
    
    static const double FE2_f1_C0[5][15] = \
    {{0.863670879562042, 0.0, -0.0425089663766216, 0.0, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.414209254015687, 0.0, -0.124260056089996, 0.0, 0.710050802074309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124260056089996, 0.0, 0.414209254015687, 0.0, 0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0425089663766216, 0.0, 0.863670879562042, 0.0, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f1_C1[5][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.863670879562042, 0.0, -0.0425089663766216, 0.0, 0.178838086814579, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.414209254015687, 0.0, -0.124260056089996, 0.0, 0.710050802074309, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124260056089996, 0.0, 0.414209254015687, 0.0, 0.71005080207431, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0425089663766216, 0.0, 0.863670879562042, 0.0, 0.178838086814579, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f2_C0[5][15] = \
    {{0.863670879562042, -0.0425089663766216, 0.0, 0.0, 0.0, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.414209254015687, -0.124260056089996, 0.0, 0.0, 0.0, 0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124260056089996, 0.414209254015687, 0.0, 0.0, 0.0, 0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0425089663766216, 0.863670879562042, 0.0, 0.0, 0.0, 0.178838086814579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f2_C1[5][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.863670879562042, -0.0425089663766216, 0.0, 0.0, 0.0, 0.178838086814579, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.414209254015687, -0.124260056089996, 0.0, 0.0, 0.0, 0.71005080207431, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124260056089996, 0.414209254015687, 0.0, 0.0, 0.0, 0.71005080207431, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0425089663766216, 0.863670879562042, 0.0, 0.0, 0.0, 0.178838086814579, 0.0, 0.0, 0.0}};
    
    static const double FE3_f0[5][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 225; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 476365
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 476365
      for (unsigned int ip = 0; ip < 5; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        
        // Total number of operations to compute function values = 2
        for (unsigned int r = 0; r < 1; r++)
        {
          F0 += FE3_f0[ip][0]*w[3][0];
        } // end loop over 'r'
        
        // Total number of operations to compute function values = 96
        for (unsigned int r = 0; r < 12; r++)
        {
          F1 += FE1_f0_C0_D10[ip][r]*(w[1][r + 12]);
          F2 += FE1_f0_C0_D01[ip][r]*(w[1][r + 12]);
          F3 += FE1_f0_C1_D10[ip][r]*(w[1][r + 12]);
          F4 += FE1_f0_C1_D01[ip][r]*(w[1][r + 12]);
        } // end loop over 'r'
        
        // Number of operations for primary indices: 95175
        for (unsigned int j = 0; j < 15; j++)
        {
          for (unsigned int k = 0; k < 15; k++)
          {
            // Number of operations to compute entry: 416
            A[j*30 + (k + 15)] += (FE2_f0_C0[ip][j]*(((((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[0]*F1 + K_1[2]*F2) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[0]*FE2_f0_C0_D10[ip][k] + K_1[2]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[0]*F3 + K_1[2]*F4))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_11 + (((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[1]*F1 + K_1[3]*F2))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[0]*FE2_f0_C0_D10[ip][k] + K_1[2]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_10)) + FE2_f0_C1[ip][j]*(((((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[1]*FE2_f0_C1_D10[ip][k] + K_1[3]*FE2_f0_C1_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[1]*F1 + K_1[3]*F2))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_10 + (((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[0]*F3 + K_1[2]*F4))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[1]*FE2_f0_C1_D10[ip][k] + K_1[3]*FE2_f0_C1_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[0]*F1 + K_1[2]*F2) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_11)))*W5[ip]*det;
            // Number of operations to compute entry: 7
            A[j*15 + k] += ((FE2_f0_C0[ip][j]*FE2_f0_C0[ip][k] + FE2_f0_C1[ip][j]*FE2_f0_C1[ip][k]))*1000.0/(F0)*W5[ip]*det;
          } // end loop over 'k'
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 476365
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 476365
      for (unsigned int ip = 0; ip < 5; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        
        // Total number of operations to compute function values = 2
        for (unsigned int r = 0; r < 1; r++)
        {
          F0 += FE3_f0[ip][0]*w[3][0];
        } // end loop over 'r'
        
        // Total number of operations to compute function values = 96
        for (unsigned int r = 0; r < 12; r++)
        {
          F1 += FE1_f0_C0_D10[ip][r]*(w[1][r + 12]);
          F2 += FE1_f0_C0_D01[ip][r]*(w[1][r + 12]);
          F3 += FE1_f0_C1_D10[ip][r]*(w[1][r + 12]);
          F4 += FE1_f0_C1_D01[ip][r]*(w[1][r + 12]);
        } // end loop over 'r'
        
        // Number of operations for primary indices: 95175
        for (unsigned int j = 0; j < 15; j++)
        {
          for (unsigned int k = 0; k < 15; k++)
          {
            // Number of operations to compute entry: 416
            A[j*30 + (k + 15)] += (FE2_f1_C0[ip][j]*(((((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[0]*F1 + K_1[2]*F2) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[0]*FE2_f0_C0_D10[ip][k] + K_1[2]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[0]*F3 + K_1[2]*F4))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_11 + (((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[1]*F1 + K_1[3]*F2))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[0]*FE2_f0_C0_D10[ip][k] + K_1[2]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_10)) + FE2_f1_C1[ip][j]*(((((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[1]*FE2_f0_C1_D10[ip][k] + K_1[3]*FE2_f0_C1_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[1]*F1 + K_1[3]*F2))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_10 + (((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[0]*F3 + K_1[2]*F4))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[1]*FE2_f0_C1_D10[ip][k] + K_1[3]*FE2_f0_C1_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[0]*F1 + K_1[2]*F2) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_11)))*W5[ip]*det;
            // Number of operations to compute entry: 7
            A[j*15 + k] += ((FE2_f1_C0[ip][j]*FE2_f1_C0[ip][k] + FE2_f1_C1[ip][j]*FE2_f1_C1[ip][k]))*1000.0/(F0)*W5[ip]*det;
          } // end loop over 'k'
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 476365
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 476365
      for (unsigned int ip = 0; ip < 5; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        
        // Total number of operations to compute function values = 2
        for (unsigned int r = 0; r < 1; r++)
        {
          F0 += FE3_f0[ip][0]*w[3][0];
        } // end loop over 'r'
        
        // Total number of operations to compute function values = 96
        for (unsigned int r = 0; r < 12; r++)
        {
          F1 += FE1_f0_C0_D10[ip][r]*(w[1][r + 12]);
          F2 += FE1_f0_C0_D01[ip][r]*(w[1][r + 12]);
          F3 += FE1_f0_C1_D10[ip][r]*(w[1][r + 12]);
          F4 += FE1_f0_C1_D01[ip][r]*(w[1][r + 12]);
        } // end loop over 'r'
        
        // Number of operations for primary indices: 95175
        for (unsigned int j = 0; j < 15; j++)
        {
          for (unsigned int k = 0; k < 15; k++)
          {
            // Number of operations to compute entry: 416
            A[j*30 + (k + 15)] += (FE2_f2_C0[ip][j]*(((((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[0]*F1 + K_1[2]*F2) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[0]*FE2_f0_C0_D10[ip][k] + K_1[2]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[0]*F3 + K_1[2]*F4))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_11 + (((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[1]*F1 + K_1[3]*F2))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[0]*FE2_f0_C0_D10[ip][k] + K_1[2]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_10)) + FE2_f2_C1[ip][j]*(((((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[1]*FE2_f0_C1_D10[ip][k] + K_1[3]*FE2_f0_C1_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[1]*F1 + K_1[3]*F2))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_10 + (((((((K_1[0]*FE2_f0_C1_D10[ip][k] + K_1[2]*FE2_f0_C1_D01[ip][k]) + (K_1[1]*FE2_f0_C0_D10[ip][k] + K_1[3]*FE2_f0_C0_D01[ip][k]))/(2.0))*2.0)*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*((-1.0)*((K_1[0]*F3 + K_1[2]*F4))/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4)))))) + ((((2.0*((K_1[1]*FE2_f0_C1_D10[ip][k] + K_1[3]*FE2_f0_C1_D01[ip][k]))/(2.0))*2.0 + FE2_f0_C2[ip][k]*1.0*(-1.0)))*(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))*(((K_1[0]*F1 + K_1[2]*F2) + 1.0)/(((((K_1[0]*F1 + K_1[2]*F2) + 1.0))*(((K_1[1]*F3 + K_1[3]*F4) + 1.0)) + (-1.0)*(((K_1[1]*F1 + K_1[3]*F2))*((K_1[0]*F3 + K_1[2]*F4))))))))*n_11)))*W5[ip]*det;
            // Number of operations to compute entry: 7
            A[j*15 + k] += ((FE2_f2_C0[ip][j]*FE2_f2_C0[ip][k] + FE2_f2_C1[ip][j]*FE2_f2_C1[ip][k]))*1000.0/(F0)*W5[ip]*det;
          } // end loop over 'k'
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "0817a0b5f5d5f687be835b4ede11d6ad6614dd0a24966b7e799b3e96cfa6f68a99022b3b1e52ec04f33ecd9d421b9a8afebb52b928edfb45367ff131ec19a4ab";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 4;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 2, 3, 5});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_4();
        break;
      }
    case 1:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_4();
        break;
      }
    case 2:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_4();
        break;
      }
    case 3:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_2();
        break;
      }
    case 4:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_2();
        break;
      }
    case 5:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_4();
        break;
      }
    case 1:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_4();
        break;
      }
    case 2:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_4();
        break;
      }
    case 3:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_2();
        break;
      }
    case 4:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_2();
        break;
      }
    case 5:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_dofmap_0();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 3;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    switch (subdomain_id)
    {
    case 2:
      {
        return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_exterior_facet_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_0e93d7d261ccfb5ed0d4094a01ecdd6baa2d6012_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
