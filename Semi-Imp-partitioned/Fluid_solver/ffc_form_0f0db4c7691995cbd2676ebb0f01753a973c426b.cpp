// This code conforms with the UFC specification version 2016.1.0dev
// and was automatically generated by FFC version 2016.1.0dev.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False

#include "ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0: public ufc::finite_element
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', triangle, 5)";
}

ufc::shape ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::space_dimension() const
{
    return 21;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::value_size() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::degree() const
{
    return 5;
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::family() const
{
    return "Lagrange";
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 21; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[32];
    for (unsigned int r = 0; r < 32; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
      y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
      y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
      y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
      y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
      y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
    y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
    y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
    y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
    y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
    y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[7] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[8] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[9] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[10] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    dof_coordinates[11] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    dof_coordinates[12] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
    dof_coordinates[13] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
    dof_coordinates[14] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
    dof_coordinates[15] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
    dof_coordinates[16] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
    dof_coordinates[17] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
    dof_coordinates[18] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
    dof_coordinates[19] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
    dof_coordinates[20] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
    dof_coordinates[21] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
    dof_coordinates[22] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
    dof_coordinates[23] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
    dof_coordinates[24] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
    dof_coordinates[25] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
    dof_coordinates[26] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
    dof_coordinates[27] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
    dof_coordinates[28] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
    dof_coordinates[29] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
    dof_coordinates[30] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[31] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[32] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[33] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[34] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[35] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[36] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[37] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[38] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[39] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[40] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    dof_coordinates[41] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1: public ufc::finite_element
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 5), dim=2)";
}

ufc::shape ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::space_dimension() const
{
    return 42;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::value_size() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::degree() const
{
    return 5;
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::family() const
{
    return "Lagrange";
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 42; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 42; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[64];
    for (unsigned int r = 0; r < 64; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 42; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
      y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
      y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
      y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
      y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
      y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 22:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 23:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 24:
      {
        y[0] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 25:
      {
        y[0] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 26:
      {
        y[0] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 27:
      {
        y[0] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 28:
      {
        y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
      y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 29:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 30:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 31:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 32:
      {
        y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
      y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 33:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
      y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 34:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
      y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 35:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
      y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 36:
      {
        y[0] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 37:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 38:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 39:
      {
        y[0] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 40:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 41:
      {
        y[0] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
      y[1] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
    y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
    y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
    y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
    y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
    y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
    y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
    y[1] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
    y[1] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
    y[1] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
    y[1] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    y[1] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[21];
    vertex_values[3] = dof_values[22];
    vertex_values[5] = dof_values[23];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[7] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[8] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[9] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[10] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    dof_coordinates[11] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    dof_coordinates[12] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
    dof_coordinates[13] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
    dof_coordinates[14] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
    dof_coordinates[15] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
    dof_coordinates[16] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
    dof_coordinates[17] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
    dof_coordinates[18] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
    dof_coordinates[19] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
    dof_coordinates[20] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
    dof_coordinates[21] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
    dof_coordinates[22] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
    dof_coordinates[23] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
    dof_coordinates[24] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
    dof_coordinates[25] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
    dof_coordinates[26] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
    dof_coordinates[27] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
    dof_coordinates[28] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
    dof_coordinates[29] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
    dof_coordinates[30] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[31] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[32] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[33] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[34] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[35] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[36] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[37] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[38] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[39] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[40] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    dof_coordinates[41] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    dof_coordinates[42] = coordinate_dofs[0];
    dof_coordinates[43] = coordinate_dofs[1];
    dof_coordinates[44] = coordinate_dofs[2];
    dof_coordinates[45] = coordinate_dofs[3];
    dof_coordinates[46] = coordinate_dofs[4];
    dof_coordinates[47] = coordinate_dofs[5];
    dof_coordinates[48] = 0.8*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[49] = 0.8*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[50] = 0.6*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[51] = 0.6*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[52] = 0.4*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    dof_coordinates[53] = 0.4*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
    dof_coordinates[54] = 0.2*coordinate_dofs[2] + 0.8*coordinate_dofs[4];
    dof_coordinates[55] = 0.2*coordinate_dofs[3] + 0.8*coordinate_dofs[5];
    dof_coordinates[56] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[4];
    dof_coordinates[57] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[5];
    dof_coordinates[58] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[4];
    dof_coordinates[59] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[5];
    dof_coordinates[60] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[4];
    dof_coordinates[61] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[5];
    dof_coordinates[62] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[4];
    dof_coordinates[63] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[5];
    dof_coordinates[64] = 0.8*coordinate_dofs[0] + 0.2*coordinate_dofs[2];
    dof_coordinates[65] = 0.8*coordinate_dofs[1] + 0.2*coordinate_dofs[3];
    dof_coordinates[66] = 0.6*coordinate_dofs[0] + 0.4*coordinate_dofs[2];
    dof_coordinates[67] = 0.6*coordinate_dofs[1] + 0.4*coordinate_dofs[3];
    dof_coordinates[68] = 0.4*coordinate_dofs[0] + 0.6*coordinate_dofs[2];
    dof_coordinates[69] = 0.4*coordinate_dofs[1] + 0.6*coordinate_dofs[3];
    dof_coordinates[70] = 0.2*coordinate_dofs[0] + 0.8*coordinate_dofs[2];
    dof_coordinates[71] = 0.2*coordinate_dofs[1] + 0.8*coordinate_dofs[3];
    dof_coordinates[72] = 0.6*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[73] = 0.6*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[74] = 0.4*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[75] = 0.4*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[76] = 0.2*coordinate_dofs[0] + 0.6*coordinate_dofs[2] + 0.2*coordinate_dofs[4];
    dof_coordinates[77] = 0.2*coordinate_dofs[1] + 0.6*coordinate_dofs[3] + 0.2*coordinate_dofs[5];
    dof_coordinates[78] = 0.4*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[79] = 0.4*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[80] = 0.2*coordinate_dofs[0] + 0.4*coordinate_dofs[2] + 0.4*coordinate_dofs[4];
    dof_coordinates[81] = 0.2*coordinate_dofs[1] + 0.4*coordinate_dofs[3] + 0.4*coordinate_dofs[5];
    dof_coordinates[82] = 0.2*coordinate_dofs[0] + 0.2*coordinate_dofs[2] + 0.6*coordinate_dofs[4];
    dof_coordinates[83] = 0.2*coordinate_dofs[1] + 0.2*coordinate_dofs[3] + 0.6*coordinate_dofs[5];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2: public ufc::finite_element
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', triangle, 3)";
}

ufc::shape ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::space_dimension() const
{
    return 10;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::value_size() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::degree() const
{
    return 3;
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::family() const
{
    return "Lagrange";
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435951, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731327, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 10; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
      y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
    y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[7] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[8] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
    dof_coordinates[9] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
    dof_coordinates[10] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[11] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[12] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
    dof_coordinates[13] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
    dof_coordinates[14] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
    dof_coordinates[15] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
    dof_coordinates[16] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
    dof_coordinates[17] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
    dof_coordinates[18] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[19] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3: public ufc::finite_element
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 3), dim=2)";
}

ufc::shape ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::space_dimension() const
{
    return 20;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::value_rank() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::value_size() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::degree() const
{
    return 3;
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::family() const
{
    return "Lagrange";
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435951, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731327, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435951, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731327, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 20; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[16];
    for (unsigned int r = 0; r < 16; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
      y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 13:
      {
        y[0] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 14:
      {
        y[0] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 15:
      {
        y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 16:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 17:
      {
        y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
      y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 18:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 19:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
    y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
    y[1] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[3] = dof_values[11];
    vertex_values[5] = dof_values[12];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[7] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[8] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
    dof_coordinates[9] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
    dof_coordinates[10] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[11] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[12] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
    dof_coordinates[13] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
    dof_coordinates[14] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
    dof_coordinates[15] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
    dof_coordinates[16] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
    dof_coordinates[17] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
    dof_coordinates[18] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[19] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[20] = coordinate_dofs[0];
    dof_coordinates[21] = coordinate_dofs[1];
    dof_coordinates[22] = coordinate_dofs[2];
    dof_coordinates[23] = coordinate_dofs[3];
    dof_coordinates[24] = coordinate_dofs[4];
    dof_coordinates[25] = coordinate_dofs[5];
    dof_coordinates[26] = 0.666666666666667*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[27] = 0.666666666666667*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[28] = 0.333333333333333*coordinate_dofs[2] + 0.666666666666667*coordinate_dofs[4];
    dof_coordinates[29] = 0.333333333333333*coordinate_dofs[3] + 0.666666666666667*coordinate_dofs[5];
    dof_coordinates[30] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[31] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[32] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[4];
    dof_coordinates[33] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[5];
    dof_coordinates[34] = 0.666666666666667*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2];
    dof_coordinates[35] = 0.666666666666667*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3];
    dof_coordinates[36] = 0.333333333333333*coordinate_dofs[0] + 0.666666666666667*coordinate_dofs[2];
    dof_coordinates[37] = 0.333333333333333*coordinate_dofs[1] + 0.666666666666667*coordinate_dofs[3];
    dof_coordinates[38] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[39] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_2();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4: public ufc::finite_element
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::signature() const
{
    return "FiniteElement('Lagrange', triangle, 1)";
}

ufc::shape ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::space_dimension() const
{
    return 3;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::value_rank() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::value_size() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::degree() const
{
    return 1;
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::family() const
{
    return "Lagrange";
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5: public ufc::finite_element
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::shape ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::space_dimension() const
{
    return 6;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::value_rank() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::value_size() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::degree() const
{
    return 1;
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::family() const
{
    return "Lagrange";
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[0];
    dof_coordinates[7] = coordinate_dofs[1];
    dof_coordinates[8] = coordinate_dofs[2];
    dof_coordinates[9] = coordinate_dofs[3];
    dof_coordinates[10] = coordinate_dofs[4];
    dof_coordinates[11] = coordinate_dofs[5];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_4();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0: public ufc::dofmap
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 5)";
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + 4*num_global_entities[1] + 6*num_global_entities[2];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::num_element_dofs() const
{
    return 21;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::num_facet_dofs() const
{
    return 6;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 6;
        break;
      }
    }
    
    return 0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 4*entity_indices[1][0];
    dofs[4] = offset + 4*entity_indices[1][0] + 1;
    dofs[5] = offset + 4*entity_indices[1][0] + 2;
    dofs[6] = offset + 4*entity_indices[1][0] + 3;
    dofs[7] = offset + 4*entity_indices[1][1];
    dofs[8] = offset + 4*entity_indices[1][1] + 1;
    dofs[9] = offset + 4*entity_indices[1][1] + 2;
    dofs[10] = offset + 4*entity_indices[1][1] + 3;
    dofs[11] = offset + 4*entity_indices[1][2];
    dofs[12] = offset + 4*entity_indices[1][2] + 1;
    dofs[13] = offset + 4*entity_indices[1][2] + 2;
    dofs[14] = offset + 4*entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[15] = offset + 6*entity_indices[2][0];
    dofs[16] = offset + 6*entity_indices[2][0] + 1;
    dofs[17] = offset + 6*entity_indices[2][0] + 2;
    dofs[18] = offset + 6*entity_indices[2][0] + 3;
    dofs[19] = offset + 6*entity_indices[2][0] + 4;
    dofs[20] = offset + 6*entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 9;
        dofs[3] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 11;
        dofs[1] = 12;
        dofs[2] = 13;
        dofs[3] = 14;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 15;
      dofs[1] = 16;
      dofs[2] = 17;
      dofs[3] = 18;
      dofs[4] = 19;
      dofs[5] = 20;
        break;
      }
    }
    
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1: public ufc::dofmap
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 5), dim=2)";
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0] + 8*num_global_entities[1] + 12*num_global_entities[2];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::num_element_dofs() const
{
    return 42;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::num_facet_dofs() const
{
    return 12;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 8;
        break;
      }
    case 2:
      {
        return 12;
        break;
      }
    }
    
    return 0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 4*entity_indices[1][0];
    dofs[4] = offset + 4*entity_indices[1][0] + 1;
    dofs[5] = offset + 4*entity_indices[1][0] + 2;
    dofs[6] = offset + 4*entity_indices[1][0] + 3;
    dofs[7] = offset + 4*entity_indices[1][1];
    dofs[8] = offset + 4*entity_indices[1][1] + 1;
    dofs[9] = offset + 4*entity_indices[1][1] + 2;
    dofs[10] = offset + 4*entity_indices[1][1] + 3;
    dofs[11] = offset + 4*entity_indices[1][2];
    dofs[12] = offset + 4*entity_indices[1][2] + 1;
    dofs[13] = offset + 4*entity_indices[1][2] + 2;
    dofs[14] = offset + 4*entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[15] = offset + 6*entity_indices[2][0];
    dofs[16] = offset + 6*entity_indices[2][0] + 1;
    dofs[17] = offset + 6*entity_indices[2][0] + 2;
    dofs[18] = offset + 6*entity_indices[2][0] + 3;
    dofs[19] = offset + 6*entity_indices[2][0] + 4;
    dofs[20] = offset + 6*entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
    dofs[21] = offset + entity_indices[0][0];
    dofs[22] = offset + entity_indices[0][1];
    dofs[23] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[24] = offset + 4*entity_indices[1][0];
    dofs[25] = offset + 4*entity_indices[1][0] + 1;
    dofs[26] = offset + 4*entity_indices[1][0] + 2;
    dofs[27] = offset + 4*entity_indices[1][0] + 3;
    dofs[28] = offset + 4*entity_indices[1][1];
    dofs[29] = offset + 4*entity_indices[1][1] + 1;
    dofs[30] = offset + 4*entity_indices[1][1] + 2;
    dofs[31] = offset + 4*entity_indices[1][1] + 3;
    dofs[32] = offset + 4*entity_indices[1][2];
    dofs[33] = offset + 4*entity_indices[1][2] + 1;
    dofs[34] = offset + 4*entity_indices[1][2] + 2;
    dofs[35] = offset + 4*entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[36] = offset + 6*entity_indices[2][0];
    dofs[37] = offset + 6*entity_indices[2][0] + 1;
    dofs[38] = offset + 6*entity_indices[2][0] + 2;
    dofs[39] = offset + 6*entity_indices[2][0] + 3;
    dofs[40] = offset + 6*entity_indices[2][0] + 4;
    dofs[41] = offset + 6*entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 22;
      dofs[7] = 23;
      dofs[8] = 24;
      dofs[9] = 25;
      dofs[10] = 26;
      dofs[11] = 27;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      dofs[6] = 21;
      dofs[7] = 23;
      dofs[8] = 28;
      dofs[9] = 29;
      dofs[10] = 30;
      dofs[11] = 31;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      dofs[6] = 21;
      dofs[7] = 22;
      dofs[8] = 32;
      dofs[9] = 33;
      dofs[10] = 34;
      dofs[11] = 35;
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 21;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 22;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 23;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 24;
        dofs[5] = 25;
        dofs[6] = 26;
        dofs[7] = 27;
          break;
        }
      case 1:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 9;
        dofs[3] = 10;
        dofs[4] = 28;
        dofs[5] = 29;
        dofs[6] = 30;
        dofs[7] = 31;
          break;
        }
      case 2:
        {
          dofs[0] = 11;
        dofs[1] = 12;
        dofs[2] = 13;
        dofs[3] = 14;
        dofs[4] = 32;
        dofs[5] = 33;
        dofs[6] = 34;
        dofs[7] = 35;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 15;
      dofs[1] = 16;
      dofs[2] = 17;
      dofs[3] = 18;
      dofs[4] = 19;
      dofs[5] = 20;
      dofs[6] = 36;
      dofs[7] = 37;
      dofs[8] = 38;
      dofs[9] = 39;
      dofs[10] = 40;
      dofs[11] = 41;
        break;
      }
    }
    
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2: public ufc::dofmap
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 3)";
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + 2*num_global_entities[1] + num_global_entities[2];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::num_element_dofs() const
{
    return 10;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::num_facet_dofs() const
{
    return 4;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2*entity_indices[1][0];
    dofs[4] = offset + 2*entity_indices[1][0] + 1;
    dofs[5] = offset + 2*entity_indices[1][1];
    dofs[6] = offset + 2*entity_indices[1][1] + 1;
    dofs[7] = offset + 2*entity_indices[1][2];
    dofs[8] = offset + 2*entity_indices[1][2] + 1;
    offset += 2*num_global_entities[1];
    dofs[9] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3: public ufc::dofmap
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 3), dim=2)";
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0] + 4*num_global_entities[1] + 2*num_global_entities[2];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::num_element_dofs() const
{
    return 20;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::num_facet_dofs() const
{
    return 8;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2*entity_indices[1][0];
    dofs[4] = offset + 2*entity_indices[1][0] + 1;
    dofs[5] = offset + 2*entity_indices[1][1];
    dofs[6] = offset + 2*entity_indices[1][1] + 1;
    dofs[7] = offset + 2*entity_indices[1][2];
    dofs[8] = offset + 2*entity_indices[1][2] + 1;
    offset += 2*num_global_entities[1];
    dofs[9] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
    dofs[10] = offset + entity_indices[0][0];
    dofs[11] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[13] = offset + 2*entity_indices[1][0];
    dofs[14] = offset + 2*entity_indices[1][0] + 1;
    dofs[15] = offset + 2*entity_indices[1][1];
    dofs[16] = offset + 2*entity_indices[1][1] + 1;
    dofs[17] = offset + 2*entity_indices[1][2];
    dofs[18] = offset + 2*entity_indices[1][2] + 1;
    offset += 2*num_global_entities[1];
    dofs[19] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 13;
      dofs[7] = 14;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 10;
      dofs[5] = 12;
      dofs[6] = 15;
      dofs[7] = 16;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 10;
      dofs[5] = 11;
      dofs[6] = 17;
      dofs[7] = 18;
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 10;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 12;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 13;
        dofs[3] = 14;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
        dofs[2] = 15;
        dofs[3] = 16;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 17;
        dofs[3] = 18;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
      dofs[1] = 19;
        break;
      }
    }
    
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_2();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4: public ufc::dofmap
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::num_element_dofs() const
{
    return 3;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::num_facet_dofs() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5: public ufc::dofmap
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0];
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::num_element_dofs() const
{
    return 6;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::num_facet_dofs() const
{
    return 4;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
}

void ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_4();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5::create() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5();
}


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    
  }

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_cell_integral_0_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    42
    // Number of operations (multiply-add pairs) for tensor contraction: 398
    // Total number of operations (multiply-add pairs):                  443
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0 = det*w[0][0]*(1.0);
    const double G0_1 = det*w[0][1]*(1.0);
    const double G0_2 = det*w[0][2]*(1.0);
    const double G0_3 = det*w[0][3]*(1.0);
    const double G0_4 = det*w[0][4]*(1.0);
    const double G0_5 = det*w[0][5]*(1.0);
    const double G0_6 = det*w[0][6]*(1.0);
    const double G0_7 = det*w[0][7]*(1.0);
    const double G0_8 = det*w[0][8]*(1.0);
    const double G0_9 = det*w[0][9]*(1.0);
    const double G0_10 = det*w[0][10]*(1.0);
    const double G0_11 = det*w[0][11]*(1.0);
    const double G0_12 = det*w[0][12]*(1.0);
    const double G0_13 = det*w[0][13]*(1.0);
    const double G0_14 = det*w[0][14]*(1.0);
    const double G0_15 = det*w[0][15]*(1.0);
    const double G0_16 = det*w[0][16]*(1.0);
    const double G0_17 = det*w[0][17]*(1.0);
    const double G0_18 = det*w[0][18]*(1.0);
    const double G0_19 = det*w[0][19]*(1.0);
    const double G0_20 = det*w[0][20]*(1.0);
    const double G0_21 = det*w[0][21]*(1.0);
    const double G0_22 = det*w[0][22]*(1.0);
    const double G0_23 = det*w[0][23]*(1.0);
    const double G0_24 = det*w[0][24]*(1.0);
    const double G0_25 = det*w[0][25]*(1.0);
    const double G0_26 = det*w[0][26]*(1.0);
    const double G0_27 = det*w[0][27]*(1.0);
    const double G0_28 = det*w[0][28]*(1.0);
    const double G0_29 = det*w[0][29]*(1.0);
    const double G0_30 = det*w[0][30]*(1.0);
    const double G0_31 = det*w[0][31]*(1.0);
    const double G0_32 = det*w[0][32]*(1.0);
    const double G0_33 = det*w[0][33]*(1.0);
    const double G0_34 = det*w[0][34]*(1.0);
    const double G0_35 = det*w[0][35]*(1.0);
    const double G0_36 = det*w[0][36]*(1.0);
    const double G0_37 = det*w[0][37]*(1.0);
    const double G0_38 = det*w[0][38]*(1.0);
    const double G0_39 = det*w[0][39]*(1.0);
    const double G0_40 = det*w[0][40]*(1.0);
    const double G0_41 = det*w[0][41]*(1.0);
    
    // Compute element tensor
    A[0] = 0.0021329365079365*G0_0 + 0.00029141865079365*G0_1 + 0.000291418650793648*G0_2 + 0.000568369708994705*G0_3 + 0.000206679894179898*G0_4 + 0.000206679894179893*G0_5 + 0.000568369708994704*G0_6 + 0.00558035714285711*G0_7 - 0.00454695767195764*G0_8 + 0.00217013888888887*G0_9 - 0.000103339947089949*G0_10 + 0.00558035714285712*G0_11 - 0.00454695767195766*G0_12 + 0.00217013888888889*G0_13 - 0.000103339947089949*G0_14 + 0.00413359788359787*G0_15 - 0.0046502976190476*G0_16 + 0.00413359788359787*G0_17 - 0.0046502976190476*G0_18 + 0.00310019841269841*G0_19 + 0.00413359788359787*G0_20;
    A[1] = 0.000291418650793648*G0_0 + 0.0021329365079365*G0_1 + 0.000291418650793648*G0_2 + 0.00558035714285711*G0_3 - 0.00454695767195764*G0_4 + 0.00217013888888888*G0_5 - 0.000103339947089948*G0_6 + 0.000568369708994707*G0_7 + 0.000206679894179895*G0_8 + 0.000206679894179891*G0_9 + 0.000568369708994705*G0_10 - 0.000103339947089945*G0_11 + 0.00217013888888887*G0_12 - 0.00454695767195765*G0_13 + 0.00558035714285711*G0_14 + 0.00413359788359787*G0_15 - 0.00465029761904761*G0_16 + 0.00413359788359786*G0_17 + 0.0031001984126984*G0_18 - 0.00465029761904759*G0_19 + 0.00413359788359787*G0_20;
    A[2] = 0.000291418650793647*G0_0 + 0.000291418650793649*G0_1 + 0.00213293650793649*G0_2 - 0.000103339947089943*G0_3 + 0.00217013888888888*G0_4 - 0.00454695767195764*G0_5 + 0.00558035714285711*G0_6 - 0.000103339947089939*G0_7 + 0.00217013888888887*G0_8 - 0.00454695767195765*G0_9 + 0.00558035714285711*G0_10 + 0.00056836970899471*G0_11 + 0.000206679894179884*G0_12 + 0.000206679894179896*G0_13 + 0.000568369708994705*G0_14 + 0.00413359788359786*G0_15 + 0.0031001984126984*G0_16 + 0.00413359788359786*G0_17 - 0.0046502976190476*G0_18 - 0.0046502976190476*G0_19 + 0.00413359788359786*G0_20;
    A[3] = 0.000775049603174603*G0_0 + 0.000297619047619049*G0_1 + 0.0142609126984126*G0_3 + 0.00279017857142858*G0_4 + 0.00744047619047615*G0_5 - 0.00666542658730155*G0_6 - 0.00124007936507936*G0_7 - 0.00186011904761902*G0_8 + 0.00124007936507934*G0_9 - 0.00356522817460315*G0_10 - 0.00449528769841268*G0_11 + 0.00837053571428567*G0_12 - 0.00713045634920632*G0_13 + 0.00713045634920632*G0_14 + 0.00310019841269839*G0_15 - 0.00930059523809517*G0_16 + 0.0341021825396824*G0_17 - 0.00930059523809522*G0_18 + 0.0139508928571428*G0_19 - 0.0124007936507936*G0_20;
    A[4] = 0.000775049603174603*G0_0 + 0.00029761904761904*G0_2 - 0.00666542658730153*G0_3 + 0.00744047619047615*G0_4 + 0.00279017857142859*G0_5 + 0.0142609126984126*G0_6 - 0.00449528769841266*G0_7 + 0.00837053571428566*G0_8 - 0.00713045634920631*G0_9 + 0.00713045634920631*G0_10 - 0.00124007936507935*G0_11 - 0.00186011904761906*G0_12 + 0.00124007936507937*G0_13 - 0.00356522817460315*G0_14 + 0.00310019841269839*G0_15 - 0.00930059523809519*G0_16 - 0.0124007936507936*G0_17 - 0.0093005952380952*G0_18 + 0.0139508928571428*G0_19 + 0.0341021825396824*G0_20;
    A[5] = 0.000297619047619034*G0_0 + 0.000775049603174599*G0_1 - 0.00124007936507937*G0_3 - 0.00186011904761903*G0_4 + 0.00124007936507933*G0_5 - 0.00356522817460315*G0_6 + 0.0142609126984126*G0_7 + 0.00279017857142858*G0_8 + 0.00744047619047614*G0_9 - 0.00666542658730156*G0_10 + 0.00713045634920632*G0_11 - 0.00713045634920633*G0_12 + 0.0083705357142857*G0_13 - 0.00449528769841269*G0_14 + 0.0341021825396824*G0_15 - 0.00930059523809524*G0_16 + 0.00310019841269841*G0_17 + 0.0139508928571428*G0_18 - 0.00930059523809521*G0_19 - 0.0124007936507936*G0_20;
    A[6] = 0.000775049603174599*G0_1 + 0.000297619047619038*G0_2 - 0.00449528769841267*G0_3 + 0.00837053571428567*G0_4 - 0.00713045634920629*G0_5 + 0.00713045634920629*G0_6 - 0.00666542658730153*G0_7 + 0.00744047619047612*G0_8 + 0.00279017857142858*G0_9 + 0.0142609126984126*G0_10 - 0.00356522817460314*G0_11 + 0.00124007936507935*G0_12 - 0.00186011904761904*G0_13 - 0.00124007936507935*G0_14 - 0.0124007936507936*G0_15 - 0.00930059523809519*G0_16 + 0.00310019841269838*G0_17 + 0.0139508928571428*G0_18 - 0.00930059523809521*G0_19 + 0.0341021825396824*G0_20;
    A[7] = 0.000297619047619034*G0_0 + 0.000775049603174599*G0_2 - 0.00356522817460316*G0_3 + 0.00124007936507936*G0_4 - 0.00186011904761905*G0_5 - 0.00124007936507936*G0_6 + 0.00713045634920632*G0_7 - 0.0071304563492063*G0_8 + 0.00837053571428566*G0_9 - 0.00449528769841269*G0_10 + 0.0142609126984126*G0_11 + 0.00279017857142853*G0_12 + 0.00744047619047617*G0_13 - 0.00666542658730156*G0_14 + 0.0341021825396824*G0_15 + 0.0139508928571428*G0_16 - 0.0124007936507936*G0_17 - 0.00930059523809519*G0_18 - 0.00930059523809519*G0_19 + 0.00310019841269836*G0_20;
    A[8] = 0.000297619047619049*G0_1 + 0.000775049603174597*G0_2 + 0.00713045634920632*G0_3 - 0.00713045634920629*G0_4 + 0.00837053571428567*G0_5 - 0.00449528769841267*G0_6 - 0.00356522817460315*G0_7 + 0.00124007936507936*G0_8 - 0.00186011904761905*G0_9 - 0.00124007936507935*G0_10 - 0.00666542658730155*G0_11 + 0.00744047619047614*G0_12 + 0.00279017857142856*G0_13 + 0.0142609126984126*G0_14 - 0.0124007936507936*G0_15 + 0.0139508928571428*G0_16 + 0.0341021825396824*G0_17 - 0.00930059523809519*G0_18 - 0.00930059523809516*G0_19 + 0.0031001984126984*G0_20;
    A[9] = 0.00059523809523808*G0_0 + 0.000595238095238101*G0_1 + 0.000595238095238078*G0_2 + 0.000930059523809562*G0_3 + 0.00372023809523811*G0_4 + 0.00372023809523809*G0_5 + 0.00093005952380949*G0_6 + 0.000930059523809587*G0_7 + 0.00372023809523807*G0_8 + 0.00372023809523803*G0_9 + 0.000930059523809507*G0_10 + 0.000930059523809553*G0_11 + 0.003720238095238*G0_12 + 0.00372023809523811*G0_13 + 0.000930059523809521*G0_14 + 0.0372023809523808*G0_15 + 0.0279017857142857*G0_16 + 0.0372023809523808*G0_17 + 0.0279017857142856*G0_18 + 0.0279017857142857*G0_19 + 0.0372023809523808*G0_20;
    A[10] = 0.0021329365079365*G0_21 + 0.00029141865079365*G0_22 + 0.000291418650793648*G0_23 + 0.000568369708994705*G0_24 + 0.000206679894179898*G0_25 + 0.000206679894179893*G0_26 + 0.000568369708994704*G0_27 + 0.00558035714285711*G0_28 - 0.00454695767195764*G0_29 + 0.00217013888888887*G0_30 - 0.000103339947089949*G0_31 + 0.00558035714285712*G0_32 - 0.00454695767195766*G0_33 + 0.00217013888888889*G0_34 - 0.000103339947089949*G0_35 + 0.00413359788359787*G0_36 - 0.0046502976190476*G0_37 + 0.00413359788359787*G0_38 - 0.0046502976190476*G0_39 + 0.00310019841269841*G0_40 + 0.00413359788359787*G0_41;
    A[11] = 0.000291418650793648*G0_21 + 0.0021329365079365*G0_22 + 0.000291418650793648*G0_23 + 0.00558035714285711*G0_24 - 0.00454695767195764*G0_25 + 0.00217013888888888*G0_26 - 0.000103339947089948*G0_27 + 0.000568369708994707*G0_28 + 0.000206679894179895*G0_29 + 0.000206679894179891*G0_30 + 0.000568369708994705*G0_31 - 0.000103339947089945*G0_32 + 0.00217013888888887*G0_33 - 0.00454695767195765*G0_34 + 0.00558035714285711*G0_35 + 0.00413359788359787*G0_36 - 0.00465029761904761*G0_37 + 0.00413359788359786*G0_38 + 0.0031001984126984*G0_39 - 0.00465029761904759*G0_40 + 0.00413359788359787*G0_41;
    A[12] = 0.000291418650793647*G0_21 + 0.000291418650793649*G0_22 + 0.00213293650793649*G0_23 - 0.000103339947089943*G0_24 + 0.00217013888888888*G0_25 - 0.00454695767195764*G0_26 + 0.00558035714285711*G0_27 - 0.000103339947089939*G0_28 + 0.00217013888888887*G0_29 - 0.00454695767195765*G0_30 + 0.00558035714285711*G0_31 + 0.00056836970899471*G0_32 + 0.000206679894179884*G0_33 + 0.000206679894179896*G0_34 + 0.000568369708994705*G0_35 + 0.00413359788359786*G0_36 + 0.0031001984126984*G0_37 + 0.00413359788359786*G0_38 - 0.0046502976190476*G0_39 - 0.0046502976190476*G0_40 + 0.00413359788359786*G0_41;
    A[13] = 0.000775049603174603*G0_21 + 0.000297619047619049*G0_22 + 0.0142609126984126*G0_24 + 0.00279017857142858*G0_25 + 0.00744047619047615*G0_26 - 0.00666542658730155*G0_27 - 0.00124007936507936*G0_28 - 0.00186011904761902*G0_29 + 0.00124007936507934*G0_30 - 0.00356522817460315*G0_31 - 0.00449528769841268*G0_32 + 0.00837053571428567*G0_33 - 0.00713045634920632*G0_34 + 0.00713045634920632*G0_35 + 0.00310019841269839*G0_36 - 0.00930059523809517*G0_37 + 0.0341021825396824*G0_38 - 0.00930059523809522*G0_39 + 0.0139508928571428*G0_40 - 0.0124007936507936*G0_41;
    A[14] = 0.000775049603174603*G0_21 + 0.00029761904761904*G0_23 - 0.00666542658730153*G0_24 + 0.00744047619047615*G0_25 + 0.00279017857142859*G0_26 + 0.0142609126984126*G0_27 - 0.00449528769841266*G0_28 + 0.00837053571428566*G0_29 - 0.00713045634920631*G0_30 + 0.00713045634920631*G0_31 - 0.00124007936507935*G0_32 - 0.00186011904761906*G0_33 + 0.00124007936507937*G0_34 - 0.00356522817460315*G0_35 + 0.00310019841269839*G0_36 - 0.00930059523809519*G0_37 - 0.0124007936507936*G0_38 - 0.0093005952380952*G0_39 + 0.0139508928571428*G0_40 + 0.0341021825396824*G0_41;
    A[15] = 0.000297619047619034*G0_21 + 0.000775049603174599*G0_22 - 0.00124007936507937*G0_24 - 0.00186011904761903*G0_25 + 0.00124007936507933*G0_26 - 0.00356522817460315*G0_27 + 0.0142609126984126*G0_28 + 0.00279017857142858*G0_29 + 0.00744047619047614*G0_30 - 0.00666542658730156*G0_31 + 0.00713045634920632*G0_32 - 0.00713045634920633*G0_33 + 0.0083705357142857*G0_34 - 0.00449528769841269*G0_35 + 0.0341021825396824*G0_36 - 0.00930059523809524*G0_37 + 0.00310019841269841*G0_38 + 0.0139508928571428*G0_39 - 0.00930059523809521*G0_40 - 0.0124007936507936*G0_41;
    A[16] = 0.000775049603174599*G0_22 + 0.000297619047619038*G0_23 - 0.00449528769841267*G0_24 + 0.00837053571428567*G0_25 - 0.00713045634920629*G0_26 + 0.00713045634920629*G0_27 - 0.00666542658730153*G0_28 + 0.00744047619047612*G0_29 + 0.00279017857142858*G0_30 + 0.0142609126984126*G0_31 - 0.00356522817460314*G0_32 + 0.00124007936507935*G0_33 - 0.00186011904761904*G0_34 - 0.00124007936507935*G0_35 - 0.0124007936507936*G0_36 - 0.00930059523809519*G0_37 + 0.00310019841269838*G0_38 + 0.0139508928571428*G0_39 - 0.00930059523809521*G0_40 + 0.0341021825396824*G0_41;
    A[17] = 0.000297619047619034*G0_21 + 0.000775049603174599*G0_23 - 0.00356522817460316*G0_24 + 0.00124007936507936*G0_25 - 0.00186011904761905*G0_26 - 0.00124007936507936*G0_27 + 0.00713045634920632*G0_28 - 0.0071304563492063*G0_29 + 0.00837053571428566*G0_30 - 0.00449528769841269*G0_31 + 0.0142609126984126*G0_32 + 0.00279017857142853*G0_33 + 0.00744047619047617*G0_34 - 0.00666542658730156*G0_35 + 0.0341021825396824*G0_36 + 0.0139508928571428*G0_37 - 0.0124007936507936*G0_38 - 0.00930059523809519*G0_39 - 0.00930059523809519*G0_40 + 0.00310019841269836*G0_41;
    A[18] = 0.000297619047619049*G0_22 + 0.000775049603174597*G0_23 + 0.00713045634920632*G0_24 - 0.00713045634920629*G0_25 + 0.00837053571428567*G0_26 - 0.00449528769841267*G0_27 - 0.00356522817460315*G0_28 + 0.00124007936507936*G0_29 - 0.00186011904761905*G0_30 - 0.00124007936507935*G0_31 - 0.00666542658730155*G0_32 + 0.00744047619047614*G0_33 + 0.00279017857142856*G0_34 + 0.0142609126984126*G0_35 - 0.0124007936507936*G0_36 + 0.0139508928571428*G0_37 + 0.0341021825396824*G0_38 - 0.00930059523809519*G0_39 - 0.00930059523809516*G0_40 + 0.0031001984126984*G0_41;
    A[19] = 0.00059523809523808*G0_21 + 0.000595238095238101*G0_22 + 0.000595238095238078*G0_23 + 0.000930059523809562*G0_24 + 0.00372023809523811*G0_25 + 0.00372023809523809*G0_26 + 0.00093005952380949*G0_27 + 0.000930059523809587*G0_28 + 0.00372023809523807*G0_29 + 0.00372023809523803*G0_30 + 0.000930059523809507*G0_31 + 0.000930059523809553*G0_32 + 0.003720238095238*G0_33 + 0.00372023809523811*G0_34 + 0.000930059523809521*G0_35 + 0.0372023809523808*G0_36 + 0.0279017857142857*G0_37 + 0.0372023809523808*G0_38 + 0.0279017857142856*G0_39 + 0.0279017857142857*G0_40 + 0.0372023809523808*G0_41;
  }

};


class ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0: public ufc::form
{
public:

  ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0();

  ~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};

extern "C" DLL_EXPORT ufc::form * create_ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0()
{
  return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0();
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0() : ufc::form()
{
    // Do nothing
}

ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::~ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0()
{
    // Do nothing
}

const char * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::signature() const
{
    return "226c50ef571d1fee2dc4c5a7827e8d7d6ab6b4ed2fac39963de85fbf1e4a741cdbdca6bdb389ca52e0b84e75964a13610b8a0735f8332a1c85c14ecb8e095895";
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::rank() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::num_coefficients() const
{
    return 1;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0});
    return position[i];
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_coordinate_finite_element() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_5();
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_coordinate_dofmap() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_5();
}

ufc::coordinate_mapping * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_finite_element_1();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_dofmap_1();
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_cell_integrals() const
{
    return true;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_custom_integrals() const
{
    return false;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_interface_integrals() const
{
    return false;
}

bool ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_cell_integral() const
{
    return new ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * ffc_form_0f0db4c7691995cbd2676ebb0f01753a973c426b_form_0::create_default_overlap_integral() const
{
    return 0;
}

